<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />
<title>profvis</title>
<script src="data:application/javascript;base64,"></script>
<script src="data:application/javascript;base64,"></script>
<script src="data:application/javascript;base64,"></script>
<link href="data:text/css,%2Eprofvis%20%7B%0Aposition%3A%20relative%3B%0A%7D%0A%2Eprofvis%20%2A%20%7B%0A%0A%2Dwebkit%2Dbox%2Dsizing%3A%20content%2Dbox%3B%0A%2Dmoz%2Dbox%2Dsizing%3A%20content%2Dbox%3B%0Abox%2Dsizing%3A%20content%2Dbox%3B%0A%7D%0A%2Eprofvis%2Dfooter%20%2Einfo%2Dlabel%20%7B%0Acursor%3A%20default%3B%0A%7D%0A%2Eprofvis%2Dpanel1%20%7B%0Aleft%3A%200px%3B%0Atop%3A%2023px%3B%0Aposition%3A%20absolute%3B%0A%7D%0A%2Eprofvis%2Dpanel1%2Dvertical%20%7B%0Abottom%3A%200px%3B%0Awidth%3A%20500px%3B%0Amargin%2Dbottom%3A%2020px%3B%0A%7D%0A%2Eprofvis%2Dpanel1%2Dhorizontal%20%7B%0Aheight%3A%20378px%3B%0Aright%3A%200px%3B%0A%7D%0A%2Eprofvis%2Dpanel2%20%7B%0Aposition%3A%20absolute%3B%0Aright%3A%200px%3B%0Abottom%3A%200px%3B%0A%7D%0A%2Eprofvis%2Dpanel2%2Dvertical%20%7B%0Atop%3A%2023px%3B%0Aleft%3A%20508px%3B%0Amargin%2Dbottom%3A%2020px%3B%0A%7D%0A%2Eprofvis%2Dpanel2%2Dhorizontal%20%7B%0Aleft%3A%200px%3B%0Atop%3A%20408px%3B%0Amargin%2Dbottom%3A%2020px%3B%0A%7D%0A%2Eprofvis%2Dsplitbar%20%7B%0Aposition%3A%20absolute%3B%0Abackground%2Dcolor%3A%20rgb%28224%2C%20224%2C%20224%29%3B%0Aborder%2Dcolor%3A%20%23ddd%3B%0Aborder%2Dstyle%3A%20solid%3B%0Abackground%2Drepeat%3A%20no%2Drepeat%3B%0Abackground%2Dposition%3A%20center%3B%0A%7D%0A%2Eprofvis%2Dsplitbar%2Dvertical%20%7B%0Acursor%3A%20col%2Dresize%3B%0Aleft%3A%20500px%3B%0Awidth%3A%208px%3B%0Atop%3A%2023px%3B%0Abottom%3A%200px%3B%0Aborder%2Dwidth%3A%200%201px%3B%0Abackground%2Dimage%3A%20url%28%27data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAMAAAAHCAYAAADNufepAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89%2BbN%2FrXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz%2FSMBAPh%2BPDwrIsAHvgABeNMLCADATZvAMByH%2Fw%2FqQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf%2BbTAICd%2BJl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA%2Fg88wAAKCRFRHgg%2FP9eM4Ors7ONo62Dl8t6r8G%2FyJiYuP%2B5c%2BrcEAAAOF0ftH%2BLC%2BzGoA7BoBt%2FqIl7gRoXgugdfeLZrIPQLUAoOnaV%2FNw%2BH48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl%2FAV%2F1s%2BX48%2FPf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H%2FLcL%2F%2Fwd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s%2BwM%2B3zUAsGo%2BAXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93%2F%2B8%2F%2FUegJQCAZkmScQAAXkQkLlTKsz%2FHCAAARKCBKrBBG%2FTBGCzABhzBBdzBC%2FxgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD%2FphCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8%2BQ8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8%2BxdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR%2BcQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI%2BksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG%2BQh8lsKnWJAcaT4U%2BIoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr%2Bh0uhHdlR5Ol9BX0svpR%2BiX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK%2BYTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI%2BpXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q%2FpH5Z%2FYkGWcNMw09DpFGgsV%2FjvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY%2FR27iz2qqaE5QzNKM1ezUvOUZj8H45hx%2BJx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4%2FOBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up%2B6Ynr5egJ5Mb6feeb3n%2Bhx9L%2F1U%2FW36p%2FVHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm%2Beb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw%2B6TvZN9un2N%2FT0HDYfZDqsdWh1%2Bc7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc%2BLpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26%2FuNu5p7ofcn8w0nymeWTNz0MPIQ%2BBR5dE%2FC5%2BVMGvfrH5PQ0%2BBZ7XnIy9jL5FXrdewt6V3qvdh7xc%2B9j5yn%2BM%2B4zw33jLeWV%2FMN8C3yLfLT8Nvnl%2BF30N%2FI%2F9k%2F3r%2F0QCngCUBZwOJgUGBWwL7%2BHp8Ib%2BOPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo%2Bqi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt%2F87fOH4p3iC%2BN7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi%2FRNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z%2Bpn5mZ2y6xlhbL%2BxW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a%2FzYnKOZarnivN7cyzytuQN5zvn%2F%2FtEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1%2B1dT1gvWd%2B1YfqGnRs%2BFYmKrhTbF5cVf9go3HjlG4dvyr%2BZ3JS0qavEuWTPZtJm6ebeLZ5bDpaql%2BaXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO%2FPLi8ZafJzs07P1SkVPRU%2BlQ27tLdtWHX%2BG7R7ht7vPY07NXbW7z3%2FT7JvttVAVVN1WbVZftJ%2B7P3P66Jqun4lvttXa1ObXHtxwPSA%2F0HIw6217nU1R3SPVRSj9Yr60cOxx%2B%2B%2Fp3vdy0NNg1VjZzG4iNwRHnk6fcJ3%2FceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w%2B0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb%2B%2B6EHTh0kX%2Fi%2Bc7vDvOXPK4dPKy2%2BUTV7hXmq86X23qdOo8%2FpPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb%2F1tWeOT3dvfN6b%2FfF9%2FXfFt1%2Bcif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v%2B3Njv3H9qwHeg89HcR%2FcGhYPP%2FpH1jw9DBY%2BZj8uGDYbrnjg%2BOTniP3L96fynQ89kzyaeF%2F6i%2FsuuFxYvfvjV69fO0ZjRoZfyl5O%2FbXyl%2FerA6xmv28bCxh6%2ByXgzMV70VvvtwXfcdx3vo98PT%2BR8IH8o%2F2j5sfVT0Kf7kxmTk%2F8EA5jz%2FGMzLdsAAAAgY0hSTQAAeiUAAICDAAD5%2FwAAgOkAAHUwAADqYAAAOpgAABdvkl%2FFRgAAADdJREFUeNpMi7ENADAIwwz%2FH8TEhMQz%2FJAupWqmyHGI7JoZIrscxMbBbhX%2BMMbTpG%2Bx%2FUgCgzMA%2Ba4RzyZ2yIIAAAAASUVORK5CYII%3D%27%29%3B%0A%7D%0A%2Eprofvis%2Dsplitbar%2Dhorizontal%20%7B%0Acursor%3A%20row%2Dresize%3B%0Atop%3A%20400px%3B%0Aheight%3A%208px%3B%0Aleft%3A%200px%3B%0Aright%3A%200px%3B%0Aborder%2Dwidth%3A%200px%200%3B%0Abackground%2Dimage%3A%20url%28%27data%3Aimage%2Fpng%3Bbase64%2CiVBORw0KGgoAAAANSUhEUgAAAAcAAAADCAYAAABfwxXFAAAACXBIWXMAAAsTAAALEwEAmpwYAAAKT2lDQ1BQaG90b3Nob3AgSUNDIHByb2ZpbGUAAHjanVNnVFPpFj333vRCS4iAlEtvUhUIIFJCi4AUkSYqIQkQSoghodkVUcERRUUEG8igiAOOjoCMFVEsDIoK2AfkIaKOg6OIisr74Xuja9a89%2BbN%2FrXXPues852zzwfACAyWSDNRNYAMqUIeEeCDx8TG4eQuQIEKJHAAEAizZCFz%2FSMBAPh%2BPDwrIsAHvgABeNMLCADATZvAMByH%2Fw%2FqQplcAYCEAcB0kThLCIAUAEB6jkKmAEBGAYCdmCZTAKAEAGDLY2LjAFAtAGAnf%2BbTAICd%2BJl7AQBblCEVAaCRACATZYhEAGg7AKzPVopFAFgwABRmS8Q5ANgtADBJV2ZIALC3AMDOEAuyAAgMADBRiIUpAAR7AGDIIyN4AISZABRG8lc88SuuEOcqAAB4mbI8uSQ5RYFbCC1xB1dXLh4ozkkXKxQ2YQJhmkAuwnmZGTKBNA%2Fg88wAAKCRFRHgg%2FP9eM4Ors7ONo62Dl8t6r8G%2FyJiYuP%2B5c%2BrcEAAAOF0ftH%2BLC%2BzGoA7BoBt%2FqIl7gRoXgugdfeLZrIPQLUAoOnaV%2FNw%2BH48PEWhkLnZ2eXk5NhKxEJbYcpXff5nwl%2FAV%2F1s%2BX48%2FPf14L7iJIEyXYFHBPjgwsz0TKUcz5IJhGLc5o9H%2FLcL%2F%2Fwd0yLESWK5WCoU41EScY5EmozzMqUiiUKSKcUl0v9k4t8s%2BwM%2B3zUAsGo%2BAXuRLahdYwP2SycQWHTA4vcAAPK7b8HUKAgDgGiD4c93%2F%2B8%2F%2FUegJQCAZkmScQAAXkQkLlTKsz%2FHCAAARKCBKrBBG%2FTBGCzABhzBBdzBC%2FxgNoRCJMTCQhBCCmSAHHJgKayCQiiGzbAdKmAv1EAdNMBRaIaTcA4uwlW4Dj1wD%2FphCJ7BKLyBCQRByAgTYSHaiAFiilgjjggXmYX4IcFIBBKLJCDJiBRRIkuRNUgxUopUIFVIHfI9cgI5h1xGupE7yAAygvyGvEcxlIGyUT3UDLVDuag3GoRGogvQZHQxmo8WoJvQcrQaPYw2oefQq2gP2o8%2BQ8cwwOgYBzPEbDAuxsNCsTgsCZNjy7EirAyrxhqwVqwDu4n1Y8%2BxdwQSgUXACTYEd0IgYR5BSFhMWE7YSKggHCQ0EdoJNwkDhFHCJyKTqEu0JroR%2BcQYYjIxh1hILCPWEo8TLxB7iEPENyQSiUMyJ7mQAkmxpFTSEtJG0m5SI%2BksqZs0SBojk8naZGuyBzmULCAryIXkneTD5DPkG%2BQh8lsKnWJAcaT4U%2BIoUspqShnlEOU05QZlmDJBVaOaUt2ooVQRNY9aQq2htlKvUYeoEzR1mjnNgxZJS6WtopXTGmgXaPdpr%2Bh0uhHdlR5Ol9BX0svpR%2BiX6AP0dwwNhhWDx4hnKBmbGAcYZxl3GK%2BYTKYZ04sZx1QwNzHrmOeZD5lvVVgqtip8FZHKCpVKlSaVGyovVKmqpqreqgtV81XLVI%2BpXlN9rkZVM1PjqQnUlqtVqp1Q61MbU2epO6iHqmeob1Q%2FpH5Z%2FYkGWcNMw09DpFGgsV%2FjvMYgC2MZs3gsIWsNq4Z1gTXEJrHN2Xx2KruY%2FR27iz2qqaE5QzNKM1ezUvOUZj8H45hx%2BJx0TgnnKKeX836K3hTvKeIpG6Y0TLkxZVxrqpaXllirSKtRq0frvTau7aedpr1Fu1n7gQ5Bx0onXCdHZ4%2FOBZ3nU9lT3acKpxZNPTr1ri6qa6UbobtEd79up%2B6Ynr5egJ5Mb6feeb3n%2Bhx9L%2F1U%2FW36p%2FVHDFgGswwkBtsMzhg8xTVxbzwdL8fb8VFDXcNAQ6VhlWGX4YSRudE8o9VGjUYPjGnGXOMk423GbcajJgYmISZLTepN7ppSTbmmKaY7TDtMx83MzaLN1pk1mz0x1zLnm%2Beb15vft2BaeFostqi2uGVJsuRaplnutrxuhVo5WaVYVVpds0atna0l1rutu6cRp7lOk06rntZnw7Dxtsm2qbcZsOXYBtuutm22fWFnYhdnt8Wuw%2B6TvZN9un2N%2FT0HDYfZDqsdWh1%2Bc7RyFDpWOt6azpzuP33F9JbpL2dYzxDP2DPjthPLKcRpnVOb00dnF2e5c4PziIuJS4LLLpc%2BLpsbxt3IveRKdPVxXeF60vWdm7Obwu2o26%2FuNu5p7ofcn8w0nymeWTNz0MPIQ%2BBR5dE%2FC5%2BVMGvfrH5PQ0%2BBZ7XnIy9jL5FXrdewt6V3qvdh7xc%2B9j5yn%2BM%2B4zw33jLeWV%2FMN8C3yLfLT8Nvnl%2BF30N%2FI%2F9k%2F3r%2F0QCngCUBZwOJgUGBWwL7%2BHp8Ib%2BOPzrbZfay2e1BjKC5QRVBj4KtguXBrSFoyOyQrSH355jOkc5pDoVQfujW0Adh5mGLw34MJ4WHhVeGP45wiFga0TGXNXfR3ENz30T6RJZE3ptnMU85ry1KNSo%2Bqi5qPNo3ujS6P8YuZlnM1VidWElsSxw5LiquNm5svt%2F87fOH4p3iC%2BN7F5gvyF1weaHOwvSFpxapLhIsOpZATIhOOJTwQRAqqBaMJfITdyWOCnnCHcJnIi%2FRNtGI2ENcKh5O8kgqTXqS7JG8NXkkxTOlLOW5hCepkLxMDUzdmzqeFpp2IG0yPTq9MYOSkZBxQqohTZO2Z%2Bpn5mZ2y6xlhbL%2BxW6Lty8elQfJa7OQrAVZLQq2QqboVFoo1yoHsmdlV2a%2FzYnKOZarnivN7cyzytuQN5zvn%2F%2FtEsIS4ZK2pYZLVy0dWOa9rGo5sjxxedsK4xUFK4ZWBqw8uIq2Km3VT6vtV5eufr0mek1rgV7ByoLBtQFr6wtVCuWFfevc1%2B1dT1gvWd%2B1YfqGnRs%2BFYmKrhTbF5cVf9go3HjlG4dvyr%2BZ3JS0qavEuWTPZtJm6ebeLZ5bDpaql%2BaXDm4N2dq0Dd9WtO319kXbL5fNKNu7g7ZDuaO%2FPLi8ZafJzs07P1SkVPRU%2BlQ27tLdtWHX%2BG7R7ht7vPY07NXbW7z3%2FT7JvttVAVVN1WbVZftJ%2B7P3P66Jqun4lvttXa1ObXHtxwPSA%2F0HIw6217nU1R3SPVRSj9Yr60cOxx%2B%2B%2Fp3vdy0NNg1VjZzG4iNwRHnk6fcJ3%2FceDTradox7rOEH0x92HWcdL2pCmvKaRptTmvtbYlu6T8w%2B0dbq3nr8R9sfD5w0PFl5SvNUyWna6YLTk2fyz4ydlZ19fi753GDborZ752PO32oPb%2B%2B6EHTh0kX%2Fi%2Bc7vDvOXPK4dPKy2%2BUTV7hXmq86X23qdOo8%2FpPTT8e7nLuarrlca7nuer21e2b36RueN87d9L158Rb%2F1tWeOT3dvfN6b%2FfF9%2FXfFt1%2Bcif9zsu72Xcn7q28T7xf9EDtQdlD3YfVP1v%2B3Njv3H9qwHeg89HcR%2FcGhYPP%2FpH1jw9DBY%2BZj8uGDYbrnjg%2BOTniP3L96fynQ89kzyaeF%2F6i%2FsuuFxYvfvjV69fO0ZjRoZfyl5O%2FbXyl%2FerA6xmv28bCxh6%2ByXgzMV70VvvtwXfcdx3vo98PT%2BR8IH8o%2F2j5sfVT0Kf7kxmTk%2F8EA5jz%2FGMzLdsAAAAgY0hSTQAAeiUAAICDAAD5%2FwAAgOkAAHUwAADqYAAAOpgAABdvkl%2FFRgAAADZJREFUeNpi3LHv%2BBEGBgYGBob%2FEIqBkQEGGN%2B8ecOADfz%2F%2F5%2BB5cylW0cgqjF1AgAAAP%2F%2FAwCtfA4GqIXcdgAAAABJRU5ErkJggg%3D%3D%27%29%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%7B%0Aposition%3A%20absolute%3B%0Apadding%3A%200px%200px%3B%0Atop%3A%200%3B%0Aleft%3A%200%3B%0Aright%3A%200%3B%0Aheight%3A%2022px%3B%0Aline%2Dheight%3A%2018px%3B%0Aborder%2Dbottom%3A%201px%20solid%20rgb%28196%2C%20201%2C%20204%29%3B%0Abackground%2Dcolor%3A%20rgb%28248%2C%20249%2C%20248%29%3B%0Acolor%3A%20%23444%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0A%2Dwebkit%2Duser%2Dselect%3A%20none%3B%0A%2Dmoz%2Duser%2Dselect%3A%20none%3B%0A%2Dms%2Duser%2Dselect%3A%20none%3B%0Auser%2Dselect%3A%20none%3B%0Aoverflow%3A%20hidden%3B%0A%7D%0A%2Eprofvis%2Dfooter%20%7B%0Aposition%3A%20absolute%3B%0Apadding%3A%200px%200px%3B%0Abottom%3A%200px%3B%0Aleft%3A%200%3B%0Aright%3A%200%3B%0Aheight%3A%2019px%3B%0Aline%2Dheight%3A%2018px%3B%0Aborder%2Dtop%3A%201px%20solid%20rgb%28196%2C%20201%2C%20204%29%3B%0Abackground%2Dcolor%3A%20rgb%28248%2C%20249%2C%20248%29%3B%0Acolor%3A%20%23444%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0A%2Dwebkit%2Duser%2Dselect%3A%20none%3B%0A%2Dmoz%2Duser%2Dselect%3A%20none%3B%0A%2Dms%2Duser%2Dselect%3A%20none%3B%0Auser%2Dselect%3A%20none%3B%0Aoverflow%3A%20hidden%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Einfo%2Dblock%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Avertical%2Dalign%3A%20top%3B%0Awidth%3A%20140px%3B%0Apadding%3A%202px%2011px%202px%2011px%3B%0A%7D%0A%2Eprofvis%2Dfooter%20%2Einfo%2Dblock%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Avertical%2Dalign%3A%20top%3B%0Apadding%3A%201px%2011px%201px%2011px%3B%0A%7D%0A%2Eprofvis%2Dfooter%20%2Einfo%2Dblock%2Dright%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Avertical%2Dalign%3A%20top%3B%0Apadding%3A%201px%2011px%201px%2011px%3B%0Afloat%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Eresult%2Dblock%20%7B%0Awidth%3A%20auto%3B%0Acursor%3A%20pointer%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Eresult%2Dblock%2Dactive%20%7B%0Awidth%3A%20auto%3B%0Abackground%3A%20rgb%28227%2C%20229%2C%20230%29%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Espacing%2Dblock%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Awidth%3A%2025px%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Eseparator%2Dblock%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Awidth%3A%201px%3B%0Atext%2Dalign%3A%20center%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Eseparator%2Dblock%20%2Eseparator%2Dimage%20%7B%0Awidth%3A%202px%3B%0Aheight%3A%2026px%3B%0Amargin%2Dtop%3A%20%2D2px%3B%0A%7D%0A%2Eprofvis%2Dstatus%2Dbar%20%2Eoptions%2Dbutton%20%7B%0Afloat%3A%20right%3B%0Acolor%3A%20%23444%3B%0Atext%2Ddecoration%3A%20none%3B%0Acursor%3A%20pointer%3B%0Apadding%3A%202px%2011px%202px%2011px%3B%0A%7D%0A%2Eprofvis%2Doptions%2Dpanel%20%7B%0Afloat%3A%20left%3B%0Aposition%3A%20absolute%3B%0Aright%3A%200%3B%0Atop%3A%2021px%3B%0Apadding%3A%203px%206px%3B%0Aborder%3A%201px%20solid%20%23999%3B%0Abackground%2Dcolor%3A%20%23fff%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0Aline%2Dheight%3A%20170%25%3B%0A%2Dwebkit%2Duser%2Dselect%3A%20none%3B%0A%2Dmoz%2Duser%2Dselect%3A%20none%3B%0A%2Dms%2Duser%2Dselect%3A%20none%3B%0Auser%2Dselect%3A%20none%3B%0Acursor%3A%20pointer%3B%0A%7D%0A%2Eprofvis%2Dcode%20%7B%0Aposition%3A%20absolute%3B%0Atop%3A%200px%3B%0Aleft%3A%200%3B%0Abottom%3A%200%3B%0Aright%3A%200%3B%0Aoverflow%2Dy%3A%20auto%3B%0Aborder%3A%200px%20solid%20%23ddd%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%7B%0Aposition%3A%20absolute%3B%0Aright%3A%200%3B%0Atop%3A%200%3B%0Abottom%3A%200%3B%0Aleft%3A%200%3B%0Aoverflow%3A%20hidden%3B%0Aborder%3A%200px%20solid%20%23ddd%3B%0Abackground%3A%20rgb%28249%2C%20249%2C%20250%29%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%7B%0Aborder%2Dcollapse%3A%20collapse%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0Awidth%3A%20100%25%3B%0Atext%2Dalign%3A%20left%3B%0Acursor%3A%20default%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%20%7B%0Abackground%2Dcolor%3A%20rgb%28249%2C%20249%2C%20250%29%3B%0Awidth%3A%2014%25%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%2Espacing%20%7B%0Awidth%3A%2020px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%2Efilename%20%7B%0Afont%2Dfamily%3A%20monospace%3B%0Apadding%2Dleft%3A%2010px%3B%0Awidth%3A%20auto%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%2Epercent%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20tr%20%7B%0Aborder%2Dtop%3A%201px%20solid%20transparent%3B%0Aborder%2Dbottom%3A%201px%20solid%20transparent%3B%0Avertical%2Dalign%3A%20top%3B%0A%7D%0A%0Atable%2Eprofvis%2Dtable%20tr%2Elocked%20%3E%20td%20%7B%0Aborder%2Dtop%3A%201px%20solid%20%23444%3B%0Aborder%2Dbottom%3A%201px%20solid%20%23444%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20tr%20%3E%20td%20%7B%0Apadding%2Dtop%3A%200%3B%0Apadding%2Dbottom%3A%200%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20tr%2Eactive%20%7B%0Abackground%2Dcolor%3A%20%23fdb%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Elinenum%20%7B%0Acolor%3A%20%23aaa%3B%0Apadding%3A%200%2015px%3B%0Afont%2Dfamily%3A%20monospace%3B%0Awidth%3A%2025px%3B%0A%7D%0A%0Atable%2Eprofvis%2Dtable%20%5Bdata%2Dpseudo%2Dcontent%5D%3A%3Abefore%20%7B%0Acontent%3A%20attr%28data%2Dpseudo%2Dcontent%29%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Ecode%20%7B%0Awhite%2Dspace%3A%20pre%2Dwrap%3B%0Amargin%3A%200%3B%0Amin%2Dheight%3A%201%2E25em%3B%0Aline%2Dheight%3A%201%2E25%3B%0Awidth%3A%20auto%3B%0Afont%2Dfamily%3A%20monospace%3B%0Abackground%3A%20transparent%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Etime%2C%20table%2Eprofvis%2Dtable%20%2Epercent%20%7B%0Apadding%3A%200%205px%3B%0Atext%2Dalign%3A%20right%3B%0Amin%2Dwidth%3A%202em%3B%0Amax%2Dwidth%3A%202em%3B%0Aoverflow%3A%20hidden%3B%0Apadding%2Dright%3A%2010px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Ememory%20%7B%0Apadding%2Dright%3A%205px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%2Etime%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Ememory%20%7B%0Apadding%3A%200%205px%3B%0Atext%2Dalign%3A%20right%3B%0Amin%2Dwidth%3A%202em%3B%0Amax%2Dwidth%3A%204em%3B%0Aoverflow%3A%20hidden%3B%0Apadding%2Dright%3A%2010px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Ememory%2Dright%20%7B%0Atext%2Dalign%3A%20left%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20th%2Ememory%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Etimebar%2Dcell%20%7B%0Apadding%2Dleft%3A%200%3B%0Aborder%2Dleft%3A%201px%20solid%20%23444%3B%0Amin%2Dwidth%3A%203em%3B%0Awidth%3A%203em%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Etimebar%2Dcell%20%3E%20%2Etimebar%20%7B%0Abackground%2Dcolor%3A%20%235A5A5A%3B%0Aborder%2Dradius%3A%200px%202px%202px%200px%3B%0Aline%2Dheight%3A%2015px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Emembar%2Dleft%2Dcell%20%7B%0Apadding%2Dleft%3A%200%3B%0Apadding%2Dright%3A%200%3B%0Aborder%2Dleft%3A%200px%20solid%20black%3B%0Amin%2Dwidth%3A%200%2E5em%3B%0Awidth%3A%200%2E5em%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Emembar%2Dleft%2Dcell%20%3E%20%2Emembar%20%7B%0Abackground%2Dcolor%3A%20%23A7A7A7%3B%0Afloat%3A%20right%3B%0Aborder%2Dradius%3A%202px%200px%200px%202px%3B%0Aline%2Dheight%3A%2015px%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Emembar%2Dright%2Dcell%20%7B%0Apadding%2Dleft%3A%200%3B%0Aborder%2Dleft%3A%201px%20solid%20black%3B%0Amin%2Dwidth%3A%201em%3B%0Awidth%3A%201em%3B%0A%7D%0Atable%2Eprofvis%2Dtable%20%2Emembar%2Dright%2Dcell%20%3E%20%2Emembar%20%7B%0Abackground%2Dcolor%3A%20%235A5A5A%3B%0Aborder%2Dradius%3A%200px%202px%202px%200px%3B%0Aline%2Dheight%3A%2015px%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ebackground%20%7B%0Afill%3A%20rgb%28249%2C%20249%2C%20250%29%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%20%2Erect%20%7B%0Astroke%3A%20%23000%3B%0Astroke%2Dwidth%3A%200%2E25px%3B%0Afill%3A%20%23fff%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Eactive%20%2Erect%20%7B%0Astroke%2Dwidth%3A%200%2E75px%3B%0Afill%3A%20%23ddd%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Ehighlighted%20%2Erect%20%7B%0Afill%3A%20%23ffc%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Ehighlighted%2Eactive%20%2Erect%20%7B%0Afill%3A%20%23fdb%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Eoutput%20%2Erect%20%7B%0Afill%3A%20%23eef%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Egc%20%2Erect%20%7B%0Afill%3A%20%23ccc%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Estacktrace%20%2Erect%20%7B%0Afill%3A%20%23eee%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Estacktrace%20%2Eprofvis%2Dlabel%20%7B%0Afill%3A%20%23666%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Elocked%20%7B%0Afont%2Dweight%3A%20bold%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%2Elocked%20%2Erect%20%7B%0Astroke%2Dwidth%3A%202px%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Ecell%20%2Eprofvis%2Dlabel%20%7B%0Afont%2Dfamily%3A%20monospace%3B%0Afont%2Dsize%3A%2011px%3B%0Acursor%3A%20default%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Eaxis%20text%20%7B%0Afont%3A%2010px%20sans%2Dserif%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Eaxis%20path%2C%0A%2Eprofvis%2Dflamegraph%20%2Eaxis%20line%20%7B%0Afill%3A%20none%3B%0Astroke%3A%20%23000%3B%0Ashape%2Drendering%3A%20crispEdges%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Eprofvis%2Dtooltip%20rect%20%7B%0Afill%3A%20rgb%28249%2C%20249%2C%20250%29%3B%0Astroke%3A%20%23000%3B%0Aopacity%3A%200%2E75%3B%0Astroke%2Dopacity%3A%200%2E75%3B%0Astroke%2Dwidth%3A%200%2E5%3B%0A%7D%0A%2Eprofvis%2Dflamegraph%20%2Eprofvis%2Dtooltip%20text%20%7B%0Atext%2Danchor%3A%20middle%3B%0Afont%2Dfamily%3A%20monospace%3B%0Afont%2Dsize%3A%2011px%3B%0A%7D%0A%2Eprofvis%2Dinfobox%20%7B%0Aposition%3A%20absolute%3B%0Aleft%3A%208px%3B%0Atop%3A%208px%3B%0Aopacity%3A%200%2E8%3B%0Aborder%2Dradius%3A%203px%3B%0Acolor%3A%20%23f8f8f8%3B%0Abackground%2Dcolor%3A%20%23333%3B%0Apadding%3A%205px%2010px%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0Aline%2Dheight%3A%20100%25%3B%0Apointer%2Devents%3A%20none%3B%0Amin%2Dwidth%3A%20280px%3B%0A%7D%0A%2Eprofvis%2Dinfobox%20table%20%7B%0Aborder%2Dcollapse%3A%20separate%3B%0Aborder%2Dspacing%3A%202px%3B%0A%7D%0A%2Eprofvis%2Dinfobox%20table%20td%20%7B%0Apadding%3A%201px%3B%0A%7D%0A%2Eprofvis%2Dinfobox%20%2Einfobox%2Dtitle%20%7B%0Afont%2Dweight%3A%20bold%3B%0A%7D%0A%2Eprofvis%2Dmessage%20%7B%0Awidth%3A%20100%25%3B%0Aheight%3A%20100%25%3B%0Adisplay%3A%20%2Dms%2Dflexbox%3B%0Adisplay%3A%20%2Dwebkit%2Dflex%3B%0Adisplay%3A%20flex%3B%0A%2Dms%2Dflex%2Dpack%3A%20center%3B%0A%2Dwebkit%2Djustify%2Dcontent%3A%20center%3B%0Ajustify%2Dcontent%3A%20center%3B%0A%2Dms%2Dflex%2Dalign%3A%20center%3B%0A%2Dwebkit%2Dalign%2Ditems%3A%20center%3B%0Aalign%2Ditems%3A%20center%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0A%7D%0A%2Eprofvis%2Dmessage%20div%20%7B%0Acolor%3A%20%23444%3B%0Aheight%3A%2025%25%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%7B%0Atop%3A%200px%3B%0Abottom%3A%200px%3B%0Aleft%3A%200px%3B%0Aright%3A%200px%3B%0Aposition%3A%20absolute%3B%0Amargin%2Dtop%3A%2023px%3B%0Amargin%2Dbottom%3A%2021px%3B%0Amargin%2Dright%3A%200px%3B%0Aoverflow%3A%20hidden%3B%0Afont%3A%2010px%20sans%2Dserif%3B%0Acolor%3A%20%23161616%3B%0Afont%2Dfamily%3A%20%22Lucida%20Sans%22%2C%20%22DejaVu%20Sans%22%2C%20%22Lucida%20Grande%22%2C%20%22Segoe%20UI%22%2C%20Verdana%2C%20Helvetica%2C%20sans%2Dserif%3B%0Afont%2Dsize%3A%2011px%3B%0Aoverflow%2Dy%3A%20auto%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Eresults%20%7B%0Awidth%3A%20100%25%3B%0Atable%2Dlayout%3A%20fixed%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%20%7B%0Afont%2Dweight%3A%20normal%3B%0Aheight%3A%2018px%3B%0Abackground%2Dcolor%3A%20%23F8F9F8%3B%0Aborder%2Dbottom%3A%20solid%201px%20%23E4E4E4%3B%0Aborder%2Dright%3A%20solid%201px%20%23E4E4E4%3B%0Apadding%2Dleft%3A%203px%3B%0Apadding%2Dright%3A%203px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20td%20%7B%0Aheight%3A%2018px%3B%0Aborder%2Dbottom%3A%20solid%201px%20%23E4E4E4%3B%0Aborder%2Dright%3A%20solid%201px%20%23E4E4E4%3B%0Apadding%2Dleft%3A%203px%3B%0Apadding%2Dright%3A%203px%3B%0Aoverflow%3A%20hidden%3B%0Atext%2Doverflow%3A%20ellipsis%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Eaction%20%7B%0Awidth%3A%2018px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%20%7B%0Awidth%3A%20100px%3B%0Atext%2Dalign%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%20%7B%0Acursor%3A%20default%3B%0A%2Dwebkit%2Duser%2Dselect%3A%20none%3B%0A%2Dmoz%2Duser%2Dselect%3A%20none%3B%0A%2Dms%2Duser%2Dselect%3A%20none%3B%0Auser%2Dselect%3A%20none%3B%0Aoverflow%3A%20hidden%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%2Ememory%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etime%20%7B%0Awidth%3A%20100px%3B%0Atext%2Dalign%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%2Etime%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ecount%20%7B%0Atext%2Dalign%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%2Ecount%20%7B%0Atext%2Dalign%3A%20center%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20th%2Ecode%2Dlabel%20%7B%0Atext%2Dalign%3A%20left%3B%0Apadding%2Dleft%3A%205px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20td%2Elabel%2Dpointer%20%7B%0Acursor%3A%20pointer%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Elabel%2Dtext%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0A%2Dwebkit%2Duser%2Dselect%3A%20none%3B%0A%2Dkhtml%2Duser%2Dselect%3A%20none%3B%0A%2Dmoz%2Duser%2Dselect%3A%20none%3B%0A%2Dms%2Duser%2Dselect%3A%20none%3B%0Auser%2Dselect%3A%20none%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Epath%20%7B%0Atext%2Dalign%3A%20left%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etreetable%2Dexpand%20%3E%20div%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Awidth%3A%2015px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etreetable%2Dexpand%20%3E%20div%20%3E%20div%7B%0Awidth%3A%200px%3B%0Aheight%3A%200px%3B%0Amargin%2Dleft%3A%203px%3B%0Amargin%2Dright%3A%206px%3B%0Aborder%2Dtop%3A%204px%20solid%20transparent%3B%0Aborder%2Dleft%3A%206px%20solid%20%23161616%3B%0Aborder%2Dbottom%3A%204px%20solid%20transparent%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etreetable%2Dcollapse%20%3E%20div%20%7B%0Adisplay%3A%20inline%2Dblock%3B%0Awidth%3A%2015px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etreetable%2Dcollapse%20%3E%20div%20%3E%20div%20%7B%0Awidth%3A%200px%3B%0Aheight%3A%200px%3B%0Amargin%2Dleft%3A%203px%3B%0Amargin%2Dright%3A%206px%3B%0Aborder%2Dright%3A%204px%20solid%20transparent%3B%0Aborder%2Dtop%3A%206px%20solid%20%23161616%3B%0Aborder%2Dleft%3A%204px%20solid%20transparent%3B%0Adisplay%3A%20inline%2Dblock%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etime%2Dinfo%20%7B%0Apadding%3A%200px%3B%0Apadding%2Dright%3A%202px%3B%0Atext%2Dalign%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etimebar%20%7B%0Awidth%3A%200px%3B%0Aheight%3A%2014px%3B%0Abackground%2Dcolor%3A%20%235A5A5A%3B%0Afloat%3A%20left%3B%0Aborder%2Dradius%3A%202px%202px%202px%202px%3B%0Apadding%2Dtop%3A%200px%3B%0Amargin%2Dtop%3A%201px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etimecell%20%7B%0Apadding%2Dtop%3A%202px%3B%0Apadding%2Dright%3A%203px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dinfo%20%7B%0Apadding%2Dleft%3A%200px%3B%0Apadding%2Dright%3A%202px%3B%0Atext%2Dalign%3A%20right%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dinfo%2Dright%20%7B%0Apadding%2Dleft%3A%202px%3B%0Apadding%2Dright%3A%200px%3B%0Atext%2Dalign%3A%20left%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dleftbar%2Dwrapper%20%7B%0Afloat%3A%20left%3B%0Aheight%3A%2014px%3B%0Awidth%3A%205px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dleftbar%20%7B%0Awidth%3A%202px%3B%0Aheight%3A%2014px%3B%0Abackground%2Dcolor%3A%20%23A7A7A7%3B%0Afloat%3A%20right%3B%0Aborder%2Dradius%3A%201px%200px%200px%201px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Drightbar%20%7B%0Awidth%3A%202px%3B%0Afloat%3A%20left%3B%0Aheight%3A%2014px%3B%0Abackground%2Dcolor%3A%20%235A5A5A%3B%0Aborder%2Dradius%3A%200px%201px%201px%200px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dcell%20%7B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Ememory%2Dbar%2Dcontainer%20%7B%0Amargin%2Dright%3A%203px%3B%0A%7D%0A%2Eprofvis%2Dtreetable%20%2Etime%2Dbar%2Dcontainer%20%7B%0Amargin%2Dright%3A%203px%3B%0A%7D%0A" rel="stylesheet" />
<script src="data:application/javascript;base64,"></script>
<script src="data:application/javascript;base64,KGZ1bmN0aW9uKCkgewoKICAvLyBQb2x5ZmlsbCBmb3Igc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCgpCiAgLy8gRnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qb2NraTg0LzZmZmFmZDAwMzM4NzE3OWE5ODhlCiAgLy8gTGljZW5zZTogSVNDCiAgaWYgKCFFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKSB7CiAgICBFbGVtZW50LnByb3RvdHlwZS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkID0gZnVuY3Rpb24gKGNlbnRlcklmTmVlZGVkKSB7CiAgICAgICJ1c2Ugc3RyaWN0IjsKCiAgICAgIGZ1bmN0aW9uIG1ha2VSYW5nZShzdGFydCwgbGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHsic3RhcnQiOiBzdGFydCwgImxlbmd0aCI6IGxlbmd0aCwgImVuZCI6IHN0YXJ0ICsgbGVuZ3RofTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gY292ZXJSYW5nZShpbm5lciwgb3V0ZXIpIHsKICAgICAgICBpZiAoCiAgICAgICAgICBmYWxzZSA9PT0gY2VudGVySWZOZWVkZWQgfHwKICAgICAgICAgIChvdXRlci5zdGFydCA8IGlubmVyLmVuZCAmJiBpbm5lci5zdGFydCA8IG91dGVyLmVuZCkKICAgICAgICApIHsKICAgICAgICAgIHJldHVybiBNYXRoLm1heCgKICAgICAgICAgICAgICBpbm5lci5lbmQgLSBvdXRlci5sZW5ndGgsCiAgICAgICAgICAgICAgTWF0aC5taW4ob3V0ZXIuc3RhcnQsIGlubmVyLnN0YXJ0KQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIChpbm5lci5zdGFydCArIGlubmVyLmVuZCAtIG91dGVyLmxlbmd0aCkgLyAyOwogICAgICB9CgogICAgICBmdW5jdGlvbiBtYWtlUG9pbnQoeCwgeSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAieCI6IHgsCiAgICAgICAgICAieSI6IHksCiAgICAgICAgICAidHJhbnNsYXRlIjogZnVuY3Rpb24gdHJhbnNsYXRlKGRYLCBkWSkgewogICAgICAgICAgICByZXR1cm4gbWFrZVBvaW50KHggKyBkWCwgeSArIGRZKTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9CgogICAgICBmdW5jdGlvbiBhYnNvbHV0ZShlbGVtLCBwdCkgewogICAgICAgIHdoaWxlIChlbGVtKSB7CiAgICAgICAgICBwdCA9IHB0LnRyYW5zbGF0ZShlbGVtLm9mZnNldExlZnQsIGVsZW0ub2Zmc2V0VG9wKTsKICAgICAgICAgIGVsZW0gPSBlbGVtLm9mZnNldFBhcmVudDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHB0OwogICAgICB9CgogICAgICB2YXIgdGFyZ2V0ID0gYWJzb2x1dGUodGhpcywgbWFrZVBvaW50KDAsIDApKSwKICAgICAgICAgIGV4dGVudCA9IG1ha2VQb2ludCh0aGlzLm9mZnNldFdpZHRoLCB0aGlzLm9mZnNldEhlaWdodCksCiAgICAgICAgICBlbGVtID0gdGhpcy5wYXJlbnROb2RlLAogICAgICAgICAgb3JpZ2luOwoKICAgICAgd2hpbGUgKGVsZW0gaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkgewogICAgICAgIC8vIEFwcGx5IGRlc2lyZWQgc2Nyb2xsIGFtb3VudC4KICAgICAgICBvcmlnaW4gPSBhYnNvbHV0ZShlbGVtLCBtYWtlUG9pbnQoZWxlbS5jbGllbnRMZWZ0LCBlbGVtLmNsaWVudFRvcCkpOwogICAgICAgIGVsZW0uc2Nyb2xsTGVmdCA9IGNvdmVyUmFuZ2UoCiAgICAgICAgICBtYWtlUmFuZ2UodGFyZ2V0LnggLSBvcmlnaW4ueCwgZXh0ZW50LngpLAogICAgICAgICAgbWFrZVJhbmdlKGVsZW0uc2Nyb2xsTGVmdCwgZWxlbS5jbGllbnRXaWR0aCkKICAgICAgICApOwogICAgICAgIGVsZW0uc2Nyb2xsVG9wID0gY292ZXJSYW5nZSgKICAgICAgICAgIG1ha2VSYW5nZSh0YXJnZXQueSAtIG9yaWdpbi55LCBleHRlbnQueSksCiAgICAgICAgICBtYWtlUmFuZ2UoZWxlbS5zY3JvbGxUb3AsIGVsZW0uY2xpZW50SGVpZ2h0KQogICAgICAgICk7CgogICAgICAgIC8vIERldGVybWluZSBhY3R1YWwgc2Nyb2xsIGFtb3VudCBieSByZWFkaW5nIGJhY2sgc2Nyb2xsIHByb3BlcnRpZXMuCiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnRyYW5zbGF0ZSgtZWxlbS5zY3JvbGxMZWZ0LCAtZWxlbS5zY3JvbGxUb3ApOwogICAgICAgIGVsZW0gPSBlbGVtLnBhcmVudE5vZGU7CiAgICAgIH0KICAgIH07CiAgfQoKfSkoKQ=="></script>
<link href="data:text/css,span%2Eoperator%2C%0Aspan%2Eparen%20%7B%0Acolor%3A%20rgb%28104%2C%20118%2C%20135%29%0A%7D%0Aspan%2Eliteral%20%7B%0Acolor%3A%20rgb%2888%2C%2072%2C%20246%29%0A%7D%0Aspan%2Enumber%20%7B%0Acolor%3A%20rgb%280%2C%200%2C%20205%29%3B%0A%7D%0Aspan%2Ecomment%20%7B%0Acolor%3A%20rgb%2876%2C%20136%2C%20107%29%3B%0A%7D%0Aspan%2Ekeyword%20%7B%0Acolor%3A%20rgb%280%2C%200%2C%20255%29%3B%0A%7D%0Aspan%2Eidentifier%20%7B%0Acolor%3A%20rgb%280%2C%200%2C%200%29%3B%0A%7D%0Aspan%2Estring%20%7B%0Acolor%3A%20rgb%283%2C%20106%2C%207%29%3B%0A%7D%0A" rel="stylesheet" />
<script src="data:application/javascript;base64,"></script>
<script src="data:application/javascript;base64,SFRNTFdpZGdldHMud2lkZ2V0KHsKCiAgbmFtZTogJ3Byb2Z2aXMnLAoKICB0eXBlOiAnb3V0cHV0JywKCiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oZWwsIHdpZHRoLCBoZWlnaHQpIHsKCiAgICByZXR1cm4gewogICAgICAvLyBUT0RPOiBhZGQgaW5zdGFuY2UgZmllbGRzIGFzIHJlcXVpcmVkCiAgICB9OwoKICB9LAoKICByZW5kZXJWYWx1ZTogZnVuY3Rpb24oZWwsIHgsIGluc3RhbmNlKSB7CiAgICBwcm9mdmlzLnJlbmRlcihlbCwgeC5tZXNzYWdlKTsKICB9LAoKICByZXNpemU6IGZ1bmN0aW9uKGVsLCB3aWR0aCwgaGVpZ2h0LCBpbnN0YW5jZSkgewoKICB9Cgp9KTsK"></script>

</head>
<body style="background-color: white;">
<div id="htmlwidget_container">
<div id="htmlwidget-09ab4a04fd23199e2b12" class="profvis html-widget" style="width:960px;height:500px;">

</div>
</div>
<script type="application/json" data-for="htmlwidget-09ab4a04fd23199e2b12">{"x":{"message":{"prof":{"timedepth":[16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1,4,3,2,1,5,4,3,2,1,4,3,2,1,4,3,2,1],"label":["findCenvVar","getInlineInfo","isBaseVar","getFoldFun","constantFoldCall","constantFold","cmp","cmpWhileBody","h","tryInline","cmpCall","cmp","genCode","compile","compiler:::tryCompile","profvis","getExprSrcref","cb$setcurexpr","cmpCall","cmp","cmpComplexAssign","h","tryInline","cmpCall","cmp","cmpForBody","h","tryInline","cmpCall","cmp","h","tryInline","cmpCall","cmp","genCode","cmpfun","compiler:::tryCmpfun","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","dots <- diffuse(dots, D, delta.t)","diffuse","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","dots[,2]<-dots[,2]+Uy[idy]*delta.t","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","dots[,1]<-dots[,1]+Ux[idx]*delta.t","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","rnorm","diffuse","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","<GC>","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis","for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)","find.spot.serial","advect.serial","profvis"],"filenum":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,1,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,3,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null,2,2,1,null,null,2,2,1,null,2,2,1,null,2,2,1,null],"linenum":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,4,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,6,6,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,7,5,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,6,5,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,4,5,null,21,4,5,null,null,21,4,5,null,21,4,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,21,5,5,null,21,5,5,null,21,5,5,null,null,21,5,5,null,4,6,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,4,7,null,21,4,7,null,21,4,7,null,21,4,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null,21,5,7,null,null,21,5,7,null,21,5,7,null,21,5,7,null],"memalloc":[20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.0772399902344,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,20.242919921875,29.3562927246094,29.3562927246094,29.3562927246094,29.3562927246094,35.3847122192383,35.3847122192383,35.3847122192383,35.3847122192383,42.9203033447266,42.9203033447266,42.9203033447266,42.9203033447266,57.1541976928711,57.1541976928711,57.1541976928711,57.1541976928711,63.7480316162109,63.7480316162109,63.7480316162109,63.7480316162109,63.7480316162109,30.0341796875,30.0341796875,30.0341796875,30.0341796875,44.9379043579102,44.9379043579102,44.9379043579102,44.9379043579102,59.841682434082,59.841682434082,59.841682434082,59.841682434082,63.6932601928711,63.6932601928711,63.6932601928711,63.6932601928711,63.6932601928711,30.5365600585938,30.5365600585938,30.5365600585938,30.5365600585938,45.7752532958984,45.7752532958984,45.7752532958984,45.7752532958984,60.5114669799805,60.5114669799805,60.5114669799805,60.5114669799805,56.1600799560547,56.1600799560547,56.1600799560547,56.1600799560547,56.1600799560547,31.3738555908203,31.3738555908203,31.3738555908203,31.3738555908203,46.4450378417969,46.4450378417969,46.4450378417969,46.4450378417969,61.5162734985352,61.5162734985352,61.5162734985352,61.5162734985352,50.9705581665039,50.9705581665039,50.9705581665039,50.9705581665039,50.9705581665039,29.8667449951172,29.8667449951172,29.8667449951172,29.8667449951172,44.6030120849609,44.6030120849609,44.6030120849609,44.6030120849609,60.0091094970703,60.0091094970703,60.0091094970703,60.0091094970703,59.3407745361328,59.3407745361328,59.3407745361328,59.3407745361328,59.3407745361328,30.3691253662109,30.3691253662109,30.3691253662109,30.3691253662109,44.7704772949219,44.7704772949219,44.7704772949219,44.7704772949219,59.3392868041992,59.3392868041992,59.3392868041992,59.3392868041992,63.8606948852539,63.8606948852539,63.8606948852539,63.8606948852539,63.8606948852539,43.6047897338867,43.6047897338867,43.6047897338867,43.6047897338867,43.6047897338867,26.6850662231445,26.6850662231445,26.6850662231445,26.6850662231445,29.3644409179688,29.3644409179688,29.3644409179688,29.3644409179688,35.5603179931641,35.5603179931641,35.5603179931641,35.5603179931641,38.4071350097656,38.4071350097656,38.4071350097656,38.4071350097656,45.1054000854492,45.1054000854492,45.1054000854492,45.1054000854492,48.6220626831055,48.6220626831055,48.6220626831055,48.6220626831055,52.8084487915039,52.8084487915039,52.8084487915039,52.8084487915039,57.6647186279297,57.6647186279297,57.6647186279297,57.6647186279297,59.8416900634766,59.8416900634766,59.8416900634766,59.8416900634766,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,63.8607025146484,44.2744140625,44.2744140625,44.2744140625,44.2744140625,44.2744140625,22.8336029052734,22.8336029052734,22.8336029052734,22.8336029052734,27.1874465942383,27.1874465942383,27.1874465942383,27.1874465942383,30.0342254638672,30.0342254638672,30.0342254638672,30.0342254638672,32.0437164306641,32.0437164306641,32.0437164306641,32.0437164306641,37.0674438476562,37.0674438476562,37.0674438476562,37.0674438476562,39.5793075561523,39.5793075561523,39.5793075561523,39.5793075561523,41.9237670898438,41.9237670898438,41.9237670898438,41.9237670898438,46.9474411010742,46.9474411010742,46.9474411010742,46.9474411010742,48.4545593261719,48.4545593261719,48.4545593261719,48.4545593261719,52.1386795043945,52.1386795043945,52.1386795043945,52.1386795043945,54.1481170654297,54.1481170654297,54.1481170654297,54.1481170654297,55.6552352905273,55.6552352905273,55.6552352905273,55.6552352905273,59.5067596435547,59.5067596435547,59.5067596435547,59.5067596435547,61.5163040161133,61.5163040161133,61.5163040161133,61.5163040161133,63.525764465332,63.525764465332,63.525764465332,63.525764465332,63.860710144043,63.860710144043,63.860710144043,63.860710144043,63.860710144043,44.9440383911133,44.9440383911133,44.9440383911133,44.9440383911133,44.9440383911133,24.0057601928711,24.0057601928711,24.0057601928711,24.0057601928711,28.3596572875977,28.3596572875977,28.3596572875977,28.3596572875977,31.7088088989258,31.7088088989258,31.7088088989258,31.7088088989258,35.3928756713867,35.3928756713867,35.3928756713867,35.3928756713867,37.56982421875,37.56982421875,37.56982421875,37.56982421875,40.4166564941406,40.4166564941406,40.4166564941406,40.4166564941406,45.4403305053711,45.4403305053711,45.4403305053711,45.4403305053711,47.7847900390625,47.7847900390625,47.7847900390625,47.7847900390625,50.2966003417969,50.2966003417969,50.2966003417969,50.2966003417969,55.4877853393555,55.4877853393555,55.4877853393555,55.4877853393555,57.9997024536133,57.9997024536133,57.9997024536133,57.9997024536133,63.0233764648438,63.0233764648438,63.0233764648438,63.0233764648438,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,63.8607177734375,42.4329833984375,42.4329833984375,42.4329833984375,42.4329833984375,42.4329833984375,20.5030364990234,20.5030364990234,20.5030364990234,20.5030364990234,20.5030364990234,23.0010757446289,23.0010757446289,23.0010757446289,23.0010757446289,26.8525466918945,26.8525466918945,26.8525466918945,26.8525466918945,30.034294128418,30.034294128418,30.034294128418,30.034294128418,32.8810729980469,32.8810729980469,32.8810729980469,32.8810729980469,35.8953094482422,35.8953094482422,35.8953094482422,35.8953094482422,42.7610549926758,42.7610549926758,42.7610549926758,42.7610549926758,44.7705078125,44.7705078125,44.7705078125,44.7705078125,46.4451370239258,46.4451370239258,46.4451370239258,46.4451370239258,48.7894897460938,48.7894897460938,48.7894897460938,48.7894897460938,51.8037796020508,51.8037796020508,51.8037796020508,51.8037796020508,53.4783020019531,53.4783020019531,53.4783020019531,53.4783020019531,56.1576232910156,56.1576232910156,56.1576232910156,56.1576232910156,62.3535537719727,62.3535537719727,62.3535537719727,62.3535537719727,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,63.860725402832,56.4949417114258,56.4949417114258,56.4949417114258,56.4949417114258,56.4949417114258,31.3843154907227,31.3843154907227,31.3843154907227,31.3843154907227,31.3843154907227,22.1637420654297,22.1637420654297,22.1637420654297,22.1637420654297,28.1922149658203,28.1922149658203,28.1922149658203,28.1922149658203,33.8858261108398,33.8858261108398,33.8858261108398,33.8858261108398,41.0865020751953,41.0865020751953,41.0865020751953,41.0865020751953,48.1196670532227,48.1196670532227,48.1196670532227,48.1196670532227,57.6647491455078,57.6647491455078,57.6647491455078,57.6647491455078,63.8607330322266,63.8607330322266,63.8607330322266,63.8607330322266,63.8607330322266,25.5251770019531,25.5251770019531,25.5251770019531,25.5251770019531,25.5251770019531,32.0438003540039,32.0438003540039,32.0438003540039,32.0438003540039,46.4450988769531,46.4450988769531,46.4450988769531,46.4450988769531,61.1813659667969,61.1813659667969,61.1813659667969,61.1813659667969,57.1645736694336,57.1645736694336,57.1645736694336,57.1645736694336,57.1645736694336,30.3692321777344,30.3692321777344,30.3692321777344,30.3692321777344,44.93798828125,44.93798828125,44.93798828125,44.93798828125,59.5068511962891,59.5068511962891,59.5068511962891,59.5068511962891,59.3408355712891,59.3408355712891,59.3408355712891,59.3408355712891,59.3408355712891,30.8716125488281,30.8716125488281,30.8716125488281,30.8716125488281,45.7752838134766,45.7752838134766,45.7752838134766,45.7752838134766,56.1577072143555,56.1577072143555,56.1577072143555,56.1577072143555,63.8607559204102,63.8607559204102,63.8607559204102,63.8607559204102,63.8607559204102,23.0010604858398,23.0010604858398,23.0010604858398,23.0010604858398,38.2397537231445,38.2397537231445,38.2397537231445,38.2397537231445,53.3109359741211,53.3109359741211,53.3109359741211,53.3109359741211,63.693359375,63.693359375,63.693359375,63.693359375,63.693359375,24.8332748413086,24.8332748413086,24.8332748413086,24.8332748413086,40.4067764282227,40.4067764282227,40.4067764282227,40.4067764282227,54.8081817626953,54.8081817626953,54.8081817626953,54.8081817626953,63.6834869384766,63.6834869384766,63.6834869384766,63.6834869384766,63.6834869384766,30.0244674682617,30.0244674682617,30.0244674682617,30.0244674682617,45.5980224609375,45.5980224609375,45.5980224609375,45.5980224609375,55.8129043579102,55.8129043579102,55.8129043579102,55.8129043579102,62.5112380981445,62.5112380981445,62.5112380981445,62.5112380981445,63.6834945678711,63.6834945678711,63.6834945678711,63.6834945678711,63.6834945678711,29.8570175170898,29.8570175170898,29.8570175170898,29.8570175170898,44.7606887817383,44.7606887817383,44.7606887817383,44.7606887817383,59.4970092773438,59.4970092773438,59.4970092773438,59.4970092773438,63.6835021972656,63.6835021972656,63.6835021972656,63.6835021972656,63.6835021972656,28.8522796630859,28.8522796630859,28.8522796630859,28.8522796630859,43.0861740112305,43.0861740112305,43.0861740112305,43.0861740112305,58.6596755981445,58.6596755981445,58.6596755981445,58.6596755981445,63.6835098266602,63.6835098266602,63.6835098266602,63.6835098266602,63.6835098266602,30.1919479370117,30.1919479370117,30.1919479370117,30.1919479370117,45.4305877685547,45.4305877685547,45.4305877685547,45.4305877685547,61.0040893554688,61.0040893554688,61.0040893554688,61.0040893554688,52.80224609375,52.80224609375,52.80224609375,52.80224609375,52.80224609375,30.52685546875,30.52685546875,30.52685546875,30.52685546875,38.5648345947266,38.5648345947266,38.5648345947266,38.5648345947266,49.6169815063477,49.6169815063477,49.6169815063477,49.6169815063477,60.5017242431641,60.5017242431641,60.5017242431641,60.5017242431641,63.6835250854492,63.6835250854492,63.6835250854492,63.6835250854492,63.6835250854492,29.0197601318359,29.0197601318359,29.0197601318359,29.0197601318359,43.2536010742188,43.2536010742188,43.2536010742188,43.2536010742188,57.9898681640625,57.9898681640625,57.9898681640625,57.9898681640625,63.8509368896484,63.8509368896484,63.8509368896484,63.8509368896484,63.8509368896484,29.1872253417969,29.1872253417969,29.1872253417969,29.1872253417969,44.0908966064453,44.0908966064453,44.0908966064453,44.0908966064453,55.6454696655273,55.6454696655273,55.6454696655273,55.6454696655273,63.850944519043,63.850944519043,63.850944519043,63.850944519043,63.850944519043,31.3745346069336,31.3745346069336,31.3745346069336,31.3745346069336,31.3745346069336,31.8665542602539,31.8665542602539,31.8665542602539,31.8665542602539,43.2536392211914,43.2536392211914,43.2536392211914,43.2536392211914,53.1344909667969,53.1344909667969,53.1344909667969,53.1344909667969,63.6843185424805,63.6843185424805,63.6843185424805,63.6843185424805,48.9528045654297,48.9528045654297,48.9528045654297,48.9528045654297,48.9528045654297,28.8524017333984,28.8524017333984,28.8524017333984,28.8524017333984,30.5270309448242,30.5270309448242,30.5270309448242,30.5270309448242,40.9093475341797,40.9093475341797,40.9093475341797,40.9093475341797,54.8083267211914,54.8083267211914,54.8083267211914,54.8083267211914,63.6836853027344,63.6836853027344,63.6836853027344,63.6836853027344,63.6836853027344,28.5174942016602,28.5174942016602,28.5174942016602,28.5174942016602,43.4212188720703,43.4212188720703,43.4212188720703,43.4212188720703,55.1432495117188,55.1432495117188,55.1432495117188,55.1432495117188,63.6836929321289,63.6836929321289,63.6836929321289,63.6836929321289,63.6836929321289,29.5222473144531,29.5222473144531,29.5222473144531,29.5222473144531,44.9283981323242,44.9283981323242,44.9283981323242,44.9283981323242,58.9947814941406,58.9947814941406,58.9947814941406,58.9947814941406,63.6837005615234,63.6837005615234,63.6837005615234,63.6837005615234,63.6837005615234,30.3595962524414,30.3595962524414,30.3595962524414,30.3595962524414,43.7562026977539,43.7562026977539,43.7562026977539,43.7562026977539,55.3107223510742,55.3107223510742,55.3107223510742,55.3107223510742,63.8511123657227,63.8511123657227,63.8511123657227,63.8511123657227,63.8511123657227,23.8287048339844,23.8287048339844,23.8287048339844,23.8287048339844,38.7324295043945,38.7324295043945,38.7324295043945,38.7324295043945,53.1337814331055,53.1337814331055,53.1337814331055,53.1337814331055,63.8511199951172,63.8511199951172,63.8511199951172,63.8511199951172,63.8511199951172,27.8476943969727,27.8476943969727,27.8476943969727,27.8476943969727,42.5839614868164,42.5839614868164,42.5839614868164,42.5839614868164,57.6551971435547,57.6551971435547,57.6551971435547,57.6551971435547,63.8511276245117,63.8511276245117,63.8511276245117,63.8511276245117,63.8511276245117,28.8524475097656,28.8524475097656,28.8524475097656,28.8524475097656,43.421257019043,43.421257019043,43.421257019043,43.421257019043,57.6552047729492,57.6552047729492,57.6552047729492,57.6552047729492,63.8511352539062,63.8511352539062,63.8511352539062,63.8511352539062,63.8511352539062,22.1674957275391,22.1674957275391,22.1674957275391,22.1674957275391,22.1674957275391,34.3785552978516,34.3785552978516,34.3785552978516,34.3785552978516,49.6171951293945,49.6171951293945,49.6171951293945,49.6171951293945,63.8511428833008,63.8511428833008,63.8511428833008,63.8511428833008,63.8511428833008,28.5175476074219,28.5175476074219,28.5175476074219,28.5175476074219,39.9046630859375,39.9046630859375,39.9046630859375,39.9046630859375,48.779914855957,48.779914855957,48.779914855957,48.779914855957,60.8368606567383,60.8368606567383,60.8368606567383,60.8368606567383,55.1461334228516,55.1461334228516,55.1461334228516,55.1461334228516,55.1461334228516,31.5317916870117,31.5317916870117,31.5317916870117,31.5317916870117,46.9379425048828,46.9379425048828,46.9379425048828,46.9379425048828,61.0043258666992,61.0043258666992,61.0043258666992,61.0043258666992,63.6837539672852,63.6837539672852,63.6837539672852,63.6837539672852,63.6837539672852,26.8430404663086,26.8430404663086,26.8430404663086,26.8430404663086,35.8856964111328,35.8856964111328,35.8856964111328,35.8856964111328,48.6125259399414,48.6125259399414,48.6125259399414,48.6125259399414,63.0138778686523,63.0138778686523,63.0138778686523,63.0138778686523,32.7139892578125,32.7139892578125,32.7139892578125,32.7139892578125,32.7139892578125,33.7088088989258,33.7088088989258,33.7088088989258,33.7088088989258,48.110107421875,48.110107421875,48.110107421875,48.110107421875,63.348747253418,63.348747253418,63.348747253418,63.348747253418,59.498664855957,59.498664855957,59.498664855957,59.498664855957,59.498664855957,22.8239135742188,22.8239135742188,22.8239135742188,22.8239135742188,30.5269088745117,30.5269088745117,30.5269088745117,30.5269088745117,41.4116516113281,41.4116516113281,41.4116516113281,41.4116516113281,54.8083114624023,54.8083114624023,54.8083114624023,54.8083114624023,63.8510208129883,63.8510208129883,63.8510208129883,63.8510208129883,63.8510208129883,25.8381042480469,25.8381042480469,25.8381042480469,25.8381042480469,40.5744247436523,40.5744247436523,40.5744247436523,40.5744247436523,53.4686050415039,53.4686050415039,53.4686050415039,53.4686050415039,62.5113677978516,62.5113677978516,62.5113677978516,62.5113677978516,45.6039733886719,45.6039733886719,45.6039733886719,45.6039733886719,45.6039733886719,32.7038726806641,32.7038726806641,32.7038726806641,32.7038726806641,47.798469543457,47.798469543457,47.798469543457,47.798469543457,63.0370559692383,63.0370559692383,63.0370559692383,63.0370559692383,35.3393936157227,35.3393936157227,35.3393936157227,35.3393936157227,35.3393936157227,33.6556549072266,33.6556549072266,33.6556549072266,33.6556549072266,48.5593795776367,48.5593795776367,48.5593795776367,48.5593795776367,63.4631576538086,63.4631576538086,63.4631576538086,63.4631576538086,31.1543121337891,31.1543121337891,31.1543121337891,31.1543121337891,31.1543121337891,34.8279037475586,34.8279037475586,34.8279037475586,34.8279037475586,49.0617599487305,49.0617599487305,49.0617599487305,49.0617599487305,63.9655380249023,63.9655380249023,63.9655380249023,63.9655380249023,63.9655380249023,25.2827911376953,25.2827911376953,25.2827911376953,25.2827911376953,39.3492279052734,39.3492279052734,39.3492279052734,39.3492279052734,54.42041015625,54.42041015625,54.42041015625,54.42041015625,63.9655456542969,63.9655456542969,63.9655456542969,63.9655456542969,63.9655456542969,24.9479370117188,24.9479370117188,24.9479370117188,24.9479370117188,40.1865234375,40.1865234375,40.1865234375,40.1865234375,55.425163269043,55.425163269043,55.425163269043,55.425163269043,63.7981491088867,63.7981491088867,63.7981491088867,63.7981491088867,63.7981491088867,30.4740447998047,30.4740447998047,30.4740447998047,30.4740447998047,45.7126312255859,45.7126312255859,45.7126312255859,45.7126312255859,60.6164093017578,60.6164093017578,60.6164093017578,60.6164093017578,56.0975646972656,56.0975646972656,56.0975646972656,56.0975646972656,56.0975646972656,24.1106109619141,24.1106109619141,24.1106109619141,24.1106109619141,32.9859161376953,32.9859161376953,32.9859161376953,32.9859161376953,44.707893371582,44.707893371582,44.707893371582,44.707893371582,59.6116714477539,59.6116714477539,59.6116714477539,59.6116714477539,60.2826766967773,60.2826766967773,60.2826766967773,60.2826766967773,60.2826766967773,30.474006652832,30.474006652832,30.474006652832,30.474006652832,45.2103271484375,45.2103271484375,45.2103271484375,45.2103271484375,59.9465942382812,59.9465942382812,59.9465942382812,59.9465942382812,60.6174926757812,60.6174926757812,60.6174926757812,60.6174926757812,60.6174926757812,30.3066101074219,30.3066101074219,30.3066101074219,30.3066101074219,45.210334777832,45.210334777832,45.210334777832,45.210334777832,60.448974609375,60.448974609375,60.448974609375,60.448974609375,58.6086502075195,58.6086502075195,58.6086502075195,58.6086502075195,58.6086502075195,30.976448059082,30.976448059082,30.976448059082,30.976448059082,44.8754272460938,44.8754272460938,44.8754272460938,44.8754272460938,60.1140670776367,60.1140670776367,60.1140670776367,60.1140670776367,58.9434661865234,58.9434661865234,58.9434661865234,58.9434661865234,58.9434661865234,29.3018798828125,29.3018798828125,29.3018798828125,29.3018798828125,40.8563995361328,40.8563995361328,40.8563995361328,40.8563995361328,50.4015350341797,50.4015350341797,50.4015350341797,50.4015350341797,62.6258850097656,62.6258850097656,62.6258850097656,62.6258850097656,63.7981948852539,63.7981948852539,63.7981948852539,63.7981948852539,63.7981948852539,29.8042602539062,29.8042602539062,29.8042602539062,29.8042602539062,44.8754425048828,44.8754425048828,44.8754425048828,44.8754425048828,59.6117095947266,59.6117095947266,59.6117095947266,59.6117095947266,63.7982025146484,63.7982025146484,63.7982025146484,63.7982025146484,63.7982025146484,30.6415557861328,30.6415557861328,30.6415557861328,30.6415557861328,44.8754501342773,44.8754501342773,44.8754501342773,44.8754501342773,59.7791748046875,59.7791748046875,59.7791748046875,59.7791748046875,63.9656143188477,63.9656143188477,63.9656143188477,63.9656143188477,63.9656143188477,25.952751159668,25.952751159668,25.952751159668,25.952751159668,40.68896484375,40.68896484375,40.68896484375,40.68896484375,55.7602005004883,55.7602005004883,55.7602005004883,55.7602005004883,63.9656219482422,63.9656219482422,63.9656219482422,63.9656219482422,63.9656219482422,26.2876205444336,26.2876205444336,26.2876205444336,26.2876205444336,40.0191421508789,40.0191421508789,40.0191421508789,40.0191421508789,55.0903244018555,55.0903244018555,55.0903244018555,55.0903244018555,63.9656295776367,63.9656295776367,63.9656295776367,63.9656295776367,63.9656295776367,28.297119140625,28.297119140625,28.297119140625,28.297119140625,42.6985244750977,42.6985244750977,42.6985244750977,42.6985244750977,57.6021957397461,57.6021957397461,57.6021957397461,57.6021957397461,63.7982330322266,63.7982330322266,63.7982330322266,63.7982330322266,63.7982330322266,30.3066711425781,30.3066711425781,30.3066711425781,30.3066711425781,45.2103958129883,45.2103958129883,45.2103958129883,45.2103958129883,60.1140670776367,60.1140670776367,60.1140670776367,60.1140670776367,60.617561340332,60.617561340332,60.617561340332,60.617561340332,60.617561340332,29.3019332885742,29.3019332885742,29.3019332885742,29.3019332885742,44.038200378418,44.038200378418,44.038200378418,44.038200378418,59.4442443847656,59.4442443847656,59.4442443847656,59.4442443847656,63.9656524658203,63.9656524658203,63.9656524658203,63.9656524658203,63.9656524658203,29.9717712402344,29.9717712402344,29.9717712402344,29.9717712402344,33.6558380126953,33.6558380126953,33.6558380126953,33.6558380126953,44.2056655883789,44.2056655883789,44.2056655883789,44.2056655883789,57.9371337890625,57.9371337890625,57.9371337890625,57.9371337890625,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,63.9656600952148,20.179313659668,20.179313659668,20.179313659668,20.179313659668,20.179313659668,34.4131546020508,34.4131546020508,34.4131546020508,34.4131546020508,48.9819641113281,48.9819641113281,48.9819641113281,48.9819641113281,63.048454284668,63.048454284668,63.048454284668,63.048454284668,22.858642578125,22.858642578125,22.858642578125,22.858642578125,36.9250259399414,36.9250259399414,36.9250259399414,36.9250259399414,50.9915161132812,50.9915161132812,50.9915161132812,50.9915161132812,63.8857498168945,63.8857498168945,63.8857498168945,63.8857498168945,63.8857498168945,22.8586502075195,22.8586502075195,22.8586502075195,22.8586502075195,37.7623748779297,37.7623748779297,37.7623748779297,37.7623748779297,52.8335037231445,52.8335037231445,52.8335037231445,52.8335037231445,63.8857574462891,63.8857574462891,63.8857574462891,63.8857574462891,63.8857574462891,26.0402984619141,26.0402984619141,26.0402984619141,26.0402984619141,40.2742462158203,40.2742462158203,40.2742462158203,40.2742462158203,54.8430557250977,54.8430557250977,54.8430557250977,54.8430557250977,63.7183609008789,63.7183609008789,63.7183609008789,63.7183609008789,63.7183609008789,29.8918838500977,29.8918838500977,29.8918838500977,29.8918838500977,44.7956085205078,44.7956085205078,44.7956085205078,44.7956085205078,59.8667907714844,59.8667907714844,59.8667907714844,59.8667907714844,41.2862091064453,41.2862091064453,41.2862091064453,41.2862091064453,41.2862091064453,32.571159362793,32.571159362793,32.571159362793,32.571159362793,47.140022277832,47.140022277832,47.140022277832,47.140022277832,62.5461196899414,62.5461196899414,62.5461196899414,62.5461196899414,39.7795791625977,39.7795791625977,39.7795791625977,39.7795791625977,39.7795791625977,22.0213775634766,22.0213775634766,22.0213775634766,22.0213775634766,35.25048828125,35.25048828125,35.25048828125,35.25048828125,50.489128112793,50.489128112793,50.489128112793,50.489128112793,63.0484466552734,63.0484466552734,63.0484466552734,63.0484466552734,25.3828277587891,25.3828277587891,25.3828277587891,25.3828277587891,25.3828277587891,34.0782928466797,34.0782928466797,34.0782928466797,34.0782928466797,48.6471557617188,48.6471557617188,48.6471557617188,48.6471557617188,62.8809967041016,62.8809967041016,62.8809967041016,62.8809967041016,26.5546646118164,26.5546646118164,26.5546646118164,26.5546646118164,26.5546646118164,35.2505569458008,35.2505569458008,35.2505569458008,35.2505569458008,50.1542282104492,50.1542282104492,50.1542282104492,50.1542282104492,63.7183456420898,63.7183456420898,63.7183456420898,63.7183456420898,22.8587036132812,22.8587036132812,22.8587036132812,22.8587036132812,38.0973434448242,38.0973434448242,38.0973434448242,38.0973434448242,52.833610534668,52.833610534668,52.833610534668,52.833610534668,63.8858108520508,63.8858108520508,63.8858108520508,63.8858108520508,63.8858108520508,27.8823852539062,27.8823852539062,27.8823852539062,27.8823852539062,42.2837371826172,42.2837371826172,42.2837371826172,42.2837371826172,57.0200576782227,57.0200576782227,57.0200576782227,57.0200576782227,63.7184143066406,63.7184143066406,63.7184143066406,63.7184143066406,63.7184143066406,30.0593948364258,30.0593948364258,30.0593948364258,30.0593948364258,44.6282043457031,44.6282043457031,44.6282043457031,44.6282043457031,59.8668441772461,59.8668441772461,59.8668441772461,59.8668441772461,43.462516784668,43.462516784668,43.462516784668,43.462516784668,43.462516784668,32.9061279296875,32.9061279296875,32.9061279296875,32.9061279296875,47.8099060058594,47.8099060058594,47.8099060058594,47.8099060058594,63.215950012207,63.215950012207,63.215950012207,63.215950012207,22.8587341308594,22.8587341308594,22.8587341308594,22.8587341308594,38.264778137207,38.264778137207,38.264778137207,38.264778137207,53.3360137939453,53.3360137939453,53.3360137939453,53.3360137939453,63.7184371948242,63.7184371948242,63.7184371948242,63.7184371948242,63.7184371948242,29.2220764160156,29.2220764160156,29.2220764160156,29.2220764160156,43.1211090087891,43.1211090087891,43.1211090087891,43.1211090087891,55.6804275512695,55.6804275512695,55.6804275512695,55.6804275512695,63.7184448242188,63.7184448242188,63.7184448242188,63.7184448242188,63.7184448242188,30.0594253540039,30.0594253540039,30.0594253540039,30.0594253540039,44.2932662963867,44.2932662963867,44.2932662963867,44.2932662963867,59.0295333862305,59.0295333862305,59.0295333862305,59.0295333862305,55.3482437133789,55.3482437133789,55.3482437133789,55.3482437133789,55.3482437133789,30.5618057250977,30.5618057250977,30.5618057250977,30.5618057250977,45.8003921508789,45.8003921508789,45.8003921508789,45.8003921508789,60.8716278076172,60.8716278076172,60.8716278076172,60.8716278076172,42.9603424072266,42.9603424072266,42.9603424072266,42.9603424072266,42.9603424072266,33.4085388183594,33.4085388183594,33.4085388183594,33.4085388183594,48.6471786499023,48.6471786499023,48.6471786499023,48.6471786499023,63.8858184814453,63.8858184814453,63.8858184814453,63.8858184814453,22.5238418579102,22.5238418579102,22.5238418579102,22.5238418579102,34.7482070922852,34.7482070922852,34.7482070922852,34.7482070922852,49.8193893432617,49.8193893432617,49.8193893432617,49.8193893432617,61.876335144043,61.876335144043,61.876335144043,61.876335144043,63.8858795166016,63.8858795166016,63.8858795166016,63.8858795166016,63.8858795166016,35.0923614501953,35.0923614501953,35.0923614501953,35.0923614501953,35.0923614501953,33.9109268188477,33.9109268188477,33.9109268188477,33.9109268188477,47.1401138305664,47.1401138305664,47.1401138305664,47.1401138305664,48.9504013061523,48.9504013061523,48.9504013061523,51.8941802978516,51.8941802978516,51.8941802978516,51.8941802978516,63.9511795043945,63.9511795043945,63.9511795043945,63.9511795043945,63.9511795043945,29.6652450561523,29.6652450561523,29.6652450561523,29.6652450561523,45.0713958740234,45.0713958740234,45.0713958740234,45.0713958740234,60.4774932861328,60.4774932861328,60.4774932861328,60.4774932861328,57.2979354858398,57.2979354858398,57.2979354858398,57.2979354858398,57.2979354858398,31.842041015625,31.842041015625,31.842041015625,31.842041015625,46.4108505249023,46.4108505249023,46.4108505249023,46.4108505249023,61.649543762207,61.649543762207,61.649543762207,61.649543762207,48.7601699829102,48.7601699829102,48.7601699829102,48.7601699829102,48.7601699829102,33.3492202758789,33.3492202758789,33.3492202758789,33.3492202758789,48.5878601074219,48.5878601074219,48.5878601074219,48.5878601074219,63.3241271972656,63.3241271972656,63.3241271972656,63.3241271972656,36.3722686767578,36.3722686767578,36.3722686767578,36.3722686767578,36.3722686767578,34.688835144043,34.688835144043,34.688835144043,34.688835144043,49.4251556396484,49.4251556396484,49.4251556396484,49.4251556396484,63.9939651489258,63.9939651489258,63.9939651489258,63.9939651489258,63.9939651489258,30.6699142456055,30.6699142456055,30.6699142456055,30.6699142456055,45.5735855102539,45.5735855102539,45.5735855102539,45.5735855102539,60.9796829223633,60.9796829223633,60.9796829223633,60.9796829223633,54.1171264648438,54.1171264648438,54.1171264648438,54.1171264648438,54.1171264648438,32.0095291137695,32.0095291137695,32.0095291137695,32.0095291137695,46.7458343505859,46.7458343505859,46.7458343505859,46.7458343505859,60.9796905517578,60.9796905517578,60.9796905517578,60.9796905517578,57.8000259399414,57.8000259399414,57.8000259399414,57.8000259399414,57.8000259399414,31.8421325683594,31.8421325683594,31.8421325683594,31.8421325683594,46.9133148193359,46.9133148193359,46.9133148193359,46.9133148193359,60.8122406005859,60.8122406005859,60.8122406005859,60.8122406005859,63.4916152954102,63.4916152954102,63.4916152954102,63.4916152954102,58.30224609375,58.30224609375,58.30224609375,58.30224609375,58.30224609375,31.1723098754883,31.1723098754883,31.1723098754883,31.1723098754883,45.7410659790039,45.7410659790039,45.7410659790039,45.7410659790039,60.8122482299805,60.8122482299805,60.8122482299805,60.8122482299805,54.6193618774414,54.6193618774414,54.6193618774414,54.6193618774414,54.6193618774414,31.3397750854492,31.3397750854492,31.3397750854492,31.3397750854492,46.5784149169922,46.5784149169922,46.5784149169922,46.5784149169922,61.649543762207,61.649543762207,61.649543762207,61.649543762207,50.2668609619141,50.2668609619141,50.2668609619141,50.2668609619141,50.2668609619141,32.8468475341797,32.8468475341797,32.8468475341797,32.8468475341797,47.2482528686523,47.2482528686523,47.2482528686523,47.2482528686523,62.1519241333008,62.1519241333008,62.1519241333008,62.1519241333008,51.2712936401367,51.2712936401367,51.2712936401367,51.2712936401367,51.2712936401367,32.344482421875,32.344482421875,32.344482421875,32.344482421875,47.7505798339844,47.7505798339844,47.7505798339844,47.7505798339844,62.3194427490234,62.3194427490234,62.3194427490234,62.3194427490234,47.2536010742188,47.2536010742188,47.2536010742188,47.2536010742188,47.2536010742188,33.1818313598633,33.1818313598633,33.1818313598633,33.1818313598633,47.7506408691406,47.7506408691406,47.7506408691406,47.7506408691406,62.4869079589844,62.4869079589844,62.4869079589844,62.4869079589844,45.244758605957,45.244758605957,45.244758605957,45.244758605957,45.244758605957,33.5167541503906,33.5167541503906,33.5167541503906,33.5167541503906,48.4204788208008,48.4204788208008,48.4204788208008,48.4204788208008,63.8265762329102,63.8265762329102,63.8265762329102,63.8265762329102,28.0021362304688,28.0021362304688,28.0021362304688,28.0021362304688,28.0021362304688,35.8611145019531,35.8611145019531,35.8611145019531,35.8611145019531,50.9322967529297,50.9322967529297,50.9322967529297,50.9322967529297,63.9940414428711,63.9940414428711,63.9940414428711,63.9940414428711,63.9940414428711,23.3018569946289,23.3018569946289,23.3018569946289,23.3018569946289,38.7079010009766,38.7079010009766,38.7079010009766,38.7079010009766,54.1139984130859,54.1139984130859,54.1139984130859,54.1139984130859,63.9940490722656,63.9940490722656,63.9940490722656,63.9940490722656,63.9940490722656,29.6652526855469,29.6652526855469,29.6652526855469,29.6652526855469,44.2340087890625,44.2340087890625,44.2340087890625,44.2340087890625,59.1377334594727,59.1377334594727,59.1377334594727,59.1377334594727,63.8266525268555,63.8266525268555,63.8266525268555,63.8266525268555,63.8266525268555,30.8374099731445,30.8374099731445,30.8374099731445,30.8374099731445,45.2388153076172,45.2388153076172,45.2388153076172,45.2388153076172,60.6448593139648,60.6448593139648,60.6448593139648,60.6448593139648,55.1216430664062,55.1216430664062,55.1216430664062,55.1216430664062,55.1216430664062,31.8421630859375,31.8421630859375,31.8421630859375,31.8421630859375,46.5784301757812,46.5784301757812,46.5784301757812,46.5784301757812,61.4821548461914,61.4821548461914,61.4821548461914,61.4821548461914,50.0995254516602,50.0995254516602,50.0995254516602,50.0995254516602,50.0995254516602,33.0144271850586,33.0144271850586,33.0144271850586,33.0144271850586,48.5879821777344,48.5879821777344,48.5879821777344,48.5879821777344,63.4917068481445,63.4917068481445,63.4917068481445,63.4917068481445,35.5353698730469,35.5353698730469,35.5353698730469,35.5353698730469,35.5353698730469,34.5215530395508,34.5215530395508,34.5215530395508,34.5215530395508,43.3967514038086,43.3967514038086,43.3967514038086,43.3967514038086,50.262565612793,50.262565612793,50.262565612793,50.262565612793,61.9845428466797,61.9845428466797,61.9845428466797,61.9845428466797,47.4210739135742,47.4210739135742,47.4210739135742,47.4210739135742,47.4210739135742,32.5120697021484,32.5120697021484,32.5120697021484,32.5120697021484,47.0808258056641,47.0808258056641,47.0808258056641,47.0808258056641,62.1520080566406,62.1520080566406,62.1520080566406,62.1520080566406,46.75146484375,46.75146484375,46.75146484375,46.75146484375,46.75146484375,32.8469924926758,32.8469924926758,32.8469924926758,32.8469924926758,48.0856323242188,48.0856323242188,48.0856323242188,48.0856323242188,62.4869842529297,62.4869842529297,62.4869842529297,62.4869842529297,38.2138595581055,38.2138595581055,38.2138595581055,38.2138595581055,38.2138595581055,31.5071258544922,31.5071258544922,31.5071258544922,31.5071258544922,46.7457656860352,46.7457656860352,46.7457656860352,46.7457656860352,61.6494903564453,61.6494903564453,61.6494903564453,61.6494903564453,47.9231491088867,47.9231491088867,47.9231491088867,47.9231491088867,47.9231491088867,33.68408203125,33.68408203125,33.68408203125,33.68408203125,49.0901794433594,49.0901794433594,49.0901794433594,49.0901794433594,63.9939575195312,63.9939575195312,63.9939575195312,63.9939575195312,63.9939575195312,22.4777221679688,22.4777221679688,22.4777221679688,22.4777221679688,22.4777221679688,36.0285491943359,36.0285491943359,36.0285491943359,36.0285491943359,50.764762878418,50.764762878418,50.764762878418,50.764762878418,63.8265609741211,63.8265609741211,63.8265609741211,63.8265609741211,63.8265609741211,31.0047760009766,31.0047760009766,31.0047760009766,31.0047760009766,46.0760116577148,46.0760116577148,46.0760116577148,46.0760116577148,61.1471405029297,61.1471405029297,61.1471405029297,61.1471405029297,52.7778930664062,52.7778930664062,52.7778930664062,52.7778930664062,52.7778930664062,32.8468170166016,32.8468170166016,32.8468170166016,32.8468170166016,48.2529678344727,48.2529678344727,48.2529678344727,48.2529678344727,63.4916076660156,63.4916076660156,63.4916076660156,63.4916076660156,35.3678665161133,35.3678665161133,35.3678665161133,35.3678665161133,35.3678665161133,34.8563690185547,34.8563690185547,34.8563690185547,34.8563690185547,50.2624664306641,50.2624664306641,50.2624664306641,50.2624664306641,62.9892272949219,62.9892272949219,62.9892272949219,62.9892272949219,63.9939880371094,63.9939880371094,63.9939880371094,63.9939880371094,63.9939880371094,32.1871948242188,32.1871948242188,32.1871948242188,32.1871948242188,32.1871948242188,34.5214614868164,34.5214614868164,34.5214614868164,34.5214614868164,49.4251327514648,49.4251327514648,49.4251327514648,49.4251327514648,63.4916229248047,63.4916229248047,63.4916229248047,63.4916229248047,35.3678817749023,35.3678817749023,35.3678817749023,35.3678817749023,35.3678817749023,34.1865539550781,34.1865539550781,34.1865539550781,34.1865539550781,48.7553100585938,48.7553100585938,48.7553100585938,48.7553100585938,63.6590881347656,63.6590881347656,63.6590881347656,63.6590881347656,32.6894226074219,32.6894226074219,32.6894226074219,32.6894226074219,32.6894226074219,34.5214767456055,34.5214767456055,34.5214767456055,34.5214767456055,49.592658996582,49.592658996582,49.592658996582,49.592658996582,63.994010925293,63.994010925293,63.994010925293,63.994010925293,63.994010925293,28.1695175170898,28.1695175170898,28.1695175170898,28.1695175170898,28.1695175170898,34.8563842773438,34.8563842773438,34.8563842773438,34.8563842773438,49.9275283813477,49.9275283813477,49.9275283813477,49.9275283813477,63.9940185546875,63.9940185546875,63.9940185546875,63.9940185546875,63.9940185546875,23.1343765258789,23.1343765258789,23.1343765258789,23.1343765258789,37.8705902099609,37.8705902099609,37.8705902099609,37.8705902099609,52.9417724609375,52.9417724609375,52.9417724609375,52.9417724609375,63.994026184082,63.994026184082,63.994026184082,63.994026184082,63.994026184082,28.3255157470703,28.3255157470703,28.3255157470703,28.3255157470703,43.7316131591797,43.7316131591797,43.7316131591797,43.7316131591797,59.1377105712891,59.1377105712891,59.1377105712891,59.1377105712891,63.8266296386719,63.8266296386719,63.8266296386719,63.8266296386719,63.8266296386719,30.8374404907227,30.8374404907227,30.8374404907227,30.8374404907227,46.4109420776367,46.4109420776367,46.4109420776367,46.4109420776367,61.4821243286133,61.4821243286133,61.4821243286133,61.4821243286133,49.7646865844727,49.7646865844727,49.7646865844727,49.7646865844727,49.7646865844727,32.6794281005859,32.6794281005859,32.6794281005859,32.6794281005859,47.248291015625,47.248291015625,47.248291015625,47.248291015625,62.8217926025391,62.8217926025391,62.8217926025391,62.8217926025391,38.5486145019531,38.5486145019531,38.5486145019531,38.5486145019531,38.5486145019531,34.6889266967773,34.6889266967773,34.6889266967773,34.6889266967773,49.0902786254883,49.0902786254883,49.0902786254883,49.0902786254883,63.8266525268555,63.8266525268555,63.8266525268555,63.8266525268555,63.8266525268555,30.8374633789062,30.8374633789062,30.8374633789062,30.8374633789062,45.4062728881836,45.4062728881836,45.4062728881836,45.4062728881836,60.9798278808594,60.9798278808594,60.9798278808594,60.9798278808594,58.3023223876953,58.3023223876953,58.3023223876953,58.3023223876953,58.3023223876953,31.3632049560547,31.3632049560547,31.3632049560547,31.3632049560547,46.9367065429688,46.9367065429688,46.9367065429688,46.9367065429688,62.007942199707,62.007942199707,62.007942199707,62.007942199707,45.8614349365234,45.8614349365234,45.8614349365234,45.8614349365234,45.8614349365234,33.4637756347656,33.4637756347656,33.4637756347656,33.4637756347656,48.7024688720703,48.7024688720703,48.7024688720703,48.7024688720703,63.4386825561523,63.4386825561523,63.4386825561523,63.4386825561523,31.966911315918,31.966911315918,31.966911315918,31.966911315918,31.966911315918,35.3058700561523,35.3058700561523,35.3058700561523,35.3058700561523,43.8462066650391,43.8462066650391,43.8462066650391,43.8462066650391,50.0420837402344,50.0420837402344,50.0420837402344,50.0420837402344,58.4149627685547,58.4149627685547,58.4149627685547,58.4149627685547,63.9411163330078,63.9411163330078,63.9411163330078,63.9411163330078,63.9411163330078,24.9235076904297,24.9235076904297,24.9235076904297,24.9235076904297,35.9757080078125,35.9757080078125,35.9757080078125,35.9757080078125,47.0279083251953,47.0279083251953,47.0279083251953,47.0279083251953,59.0848007202148,59.0848007202148,59.0848007202148,59.0848007202148,63.9411239624023,63.9411239624023,63.9411239624023,63.9411239624023,63.9411239624023,24.9234619140625,24.9234619140625,24.9234619140625,24.9234619140625,38.8224411010742,38.8224411010742,38.8224411010742,38.8224411010742,52.5539627075195,52.5539627075195,52.5539627075195,52.5539627075195,63.9411315917969,63.9411315917969,63.9411315917969,63.9411315917969,63.9411315917969,35.3150177001953,35.3150177001953,35.3150177001953,35.3150177001953,35.3150177001953,32.9613265991211,32.9613265991211,32.9613265991211,32.9613265991211,46.6928482055664,46.6928482055664,46.6928482055664,46.6928482055664,61.9314346313477,61.9314346313477,61.9314346313477,61.9314346313477,48.0375823974609,48.0375823974609,48.0375823974609,48.0375823974609,48.0375823974609,33.128791809082,33.128791809082,33.128791809082,33.128791809082,48.5348358154297,48.5348358154297,48.5348358154297,48.5348358154297,63.9409866333008,63.9409866333008,63.9409866333008,63.9409866333008,63.9409866333008,24.0860366821289,24.0860366821289,24.0860366821289,24.0860366821289,36.6454086303711,36.6454086303711,36.6454086303711,36.6454086303711,51.3816757202148,51.3816757202148,51.3816757202148,51.3816757202148,63.9409942626953,63.9409942626953,63.9409942626953,63.9409942626953,63.9409942626953,23.2488098144531,23.2488098144531,23.2488098144531,23.2488098144531,36.8128204345703,36.8128204345703,36.8128204345703,36.8128204345703,47.0277862548828,47.0277862548828,47.0277862548828,47.0277862548828,60.591796875,60.591796875,60.591796875,60.591796875,57.2448348999023,57.2448348999023,57.2448348999023,57.2448348999023,57.2448348999023,32.2914733886719,32.2914733886719,32.2914733886719,32.2914733886719,46.1904525756836,46.1904525756836,46.1904525756836,46.1904525756836,61.2616348266602,61.2616348266602,61.2616348266602,61.2616348266602,51.7205047607422,51.7205047607422,51.7205047607422,51.7205047607422,51.7205047607422,27.1002960205078,27.1002960205078,27.1002960205078,27.1002960205078,32.4589385986328,32.4589385986328,32.4589385986328,32.4589385986328,47.0278015136719,47.0278015136719,47.0278015136719,47.0278015136719,62.4338455200195,62.4338455200195,62.4338455200195,62.4338455200195,45.0243453979492,45.0243453979492,45.0243453979492,45.0243453979492,45.0243453979492,32.6264038085938,32.6264038085938,32.6264038085938,32.6264038085938,47.0278091430664,47.0278091430664,47.0278091430664,47.0278091430664,60.9267349243164,60.9267349243164,60.9267349243164,60.9267349243164,56.5752410888672,56.5752410888672,56.5752410888672,56.5752410888672,56.5752410888672,32.1240921020508,32.1240921020508,32.1240921020508,32.1240921020508,45.8556137084961,45.8556137084961,45.8556137084961,45.8556137084961,60.9267959594727,60.9267959594727,60.9267959594727,60.9267959594727,57.9144821166992,57.9144821166992,57.9144821166992,57.9144821166992,57.9144821166992,32.29150390625,32.29150390625,32.29150390625,32.29150390625,47.6976013183594,47.6976013183594,47.6976013183594,47.6976013183594,62.9362411499023,62.9362411499023,62.9362411499023,62.9362411499023,34.3105010986328,34.3105010986328,34.3105010986328,34.3105010986328,34.3105010986328,34.8034286499023,34.8034286499023,34.8034286499023,34.8034286499023,50.0420684814453,50.0420684814453,50.0420684814453,50.0420684814453,63.9409942626953,63.9409942626953,63.9409942626953,63.9409942626953,56.7426681518555,56.7426681518555,56.7426681518555,56.7426681518555,56.7426681518555,31.4542846679688,31.4542846679688,31.4542846679688,31.4542846679688,46.3580093383789,46.3580093383789,46.3580093383789,46.3580093383789,61.5965957641602,61.5965957641602,61.5965957641602,61.5965957641602,48.3724670410156,48.3724670410156,48.3724670410156,48.3724670410156,48.3724670410156,32.7939529418945,32.7939529418945,32.7939529418945,32.7939529418945,47.697624206543,47.697624206543,47.697624206543,47.697624206543,62.7688598632812,62.7688598632812,62.7688598632812,62.7688598632812,35.9845657348633,35.9845657348633,35.9845657348633,35.9845657348633,35.9845657348633,34.8034515380859,34.8034515380859,34.8034515380859,34.8034515380859,49.7071762084961,49.7071762084961,49.7071762084961,49.7071762084961,63.7736663818359,63.7736663818359,63.7736663818359,63.7736663818359,63.7736663818359,30.9518814086914,30.9518814086914,30.9518814086914,30.9518814086914,46.023063659668,46.023063659668,46.023063659668,46.023063659668,61.2617034912109,61.2617034912109,61.2617034912109,61.2617034912109,49.3769149780273,49.3769149780273,49.3769149780273,49.3769149780273,49.3769149780273,33.2962951660156,33.2962951660156,33.2962951660156,33.2962951660156,48.5349349975586,48.5349349975586,48.5349349975586,48.5349349975586,63.4386596679688,63.4386596679688,63.4386596679688,63.4386596679688,40.0022888183594,40.0022888183594,40.0022888183594,40.0022888183594,40.0022888183594,33.9661865234375,33.9661865234375,33.9661865234375,33.9661865234375,48.7024536132812,48.7024536132812,48.7024536132812,48.7024536132812,63.4386672973633,63.4386672973633,63.4386672973633,63.4386672973633,33.4735336303711,33.4735336303711,33.4735336303711,33.4735336303711,33.4735336303711,33.966194152832,33.966194152832,33.966194152832,33.966194152832,48.7024078369141,48.7024078369141,48.7024078369141,48.7024078369141,63.941047668457,63.941047668457,63.941047668457,63.941047668457,35.9846038818359,35.9846038818359,35.9846038818359,35.9846038818359,35.9846038818359,33.6312866210938,33.6312866210938,33.6312866210938,33.6312866210938,46.6929244995117,46.6929244995117,46.6929244995117,46.6929244995117,59.4197006225586,59.4197006225586,59.4197006225586,59.4197006225586,63.1037673950195,63.1037673950195,63.1037673950195,63.1037673950195,47.5354995727539,47.5354995727539,47.5354995727539,47.5354995727539,47.5354995727539,32.7940063476562,32.7940063476562,32.7940063476562,32.7940063476562,47.5302734375,47.5302734375,47.5302734375,47.5302734375,62.0990295410156,62.0990295410156,62.0990295410156,62.0990295410156,52.055419921875,52.055419921875,52.055419921875,52.055419921875,52.055419921875,32.2916412353516,32.2916412353516,32.2916412353516,32.2916412353516,47.3628234863281,47.3628234863281,47.3628234863281,47.3628234863281,61.5967178344727,61.5967178344727,61.5967178344727,61.5967178344727,48.037727355957,48.037727355957,48.037727355957,48.037727355957,48.037727355957,32.96142578125,32.96142578125,32.96142578125,32.96142578125,48.200065612793,48.200065612793,48.200065612793,48.200065612793,62.9363861083984,62.9363861083984,62.9363861083984,62.9363861083984,39.8349304199219,39.8349304199219,39.8349304199219,39.8349304199219,39.8349304199219,31.1192932128906,31.1192932128906,31.1192932128906,31.1192932128906,45.6880493164062,45.6880493164062,45.6880493164062,45.6880493164062,60.7592315673828,60.7592315673828,60.7592315673828,60.7592315673828,53.5619201660156,53.5619201660156,53.5619201660156,53.5619201660156,53.5619201660156,31.6216201782227,31.6216201782227,31.6216201782227,31.6216201782227,46.8602600097656,46.8602600097656,46.8602600097656,46.8602600097656,61.2616119384766,61.2616119384766,61.2616119384766,61.2616119384766,50.5486526489258,50.5486526489258,50.5486526489258,50.5486526489258,50.5486526489258,31.95654296875,31.95654296875,31.95654296875,31.95654296875,45.6880645751953,45.6880645751953,45.6880645751953,45.6880645751953,60.9267044067383,60.9267044067383,60.9267044067383,60.9267044067383,53.8967437744141,53.8967437744141,53.8967437744141,53.8967437744141,53.8967437744141,32.6264343261719,32.6264343261719,32.6264343261719,32.6264343261719,47.1951904296875,47.1951904296875,47.1951904296875,47.1951904296875,62.0989685058594,62.0989685058594,62.0989685058594,62.0989685058594,42.1784591674805,42.1784591674805,42.1784591674805,42.1784591674805,42.1784591674805,33.7985916137695,33.7985916137695,33.7985916137695,33.7985916137695,49.2046890258789,49.2046890258789,49.2046890258789,49.2046890258789,63.9410095214844,63.9410095214844,63.9410095214844,63.9410095214844,63.9410095214844,24.5884857177734,24.5884857177734,24.5884857177734,24.5884857177734,31.2867889404297,31.2867889404297,31.2867889404297,31.2867889404297,43.8461074829102,43.8461074829102,43.8461074829102,43.8461074829102,58.5823745727539,58.5823745727539,58.5823745727539,58.5823745727539,63.7736129760742,63.7736129760742,63.7736129760742,63.7736129760742,63.7736129760742,25.9281005859375,25.9281005859375,25.9281005859375,25.9281005859375,39.9945373535156,39.9945373535156,39.9945373535156,39.9945373535156,53.7261123657227,53.7261123657227,53.7261123657227,53.7261123657227,63.9410247802734,63.9410247802734,63.9410247802734,63.9410247802734,63.9410247802734,29.7796859741211,29.7796859741211,29.7796859741211,29.7796859741211,44.6834106445312,44.6834106445312,44.6834106445312,44.6834106445312,58.4148788452148,58.4148788452148,58.4148788452148,58.4148788452148,63.7736282348633,63.7736282348633,63.7736282348633,63.7736282348633,63.7736282348633,30.9518966674805,30.9518966674805,30.9518966674805,30.9518966674805,46.3579406738281,46.3579406738281,46.3579406738281,46.3579406738281,61.5966339111328,61.5966339111328,61.5966339111328,61.5966339111328,47.7028350830078,47.7028350830078,47.7028350830078,47.7028350830078,47.7028350830078,33.1288528442383,33.1288528442383,33.1288528442383,33.1288528442383,48.3674926757812,48.3674926757812,48.3674926757812,48.3674926757812,63.9409942626953,63.9409942626953,63.9409942626953,63.9409942626953,37.6585922241211,37.6585922241211,37.6585922241211,37.6585922241211,37.6585922241211,34.8033828735352,34.8033828735352,34.8033828735352,34.8033828735352,49.707160949707,49.707160949707,49.707160949707,49.707160949707,63.9410552978516,63.9410552978516,63.9410552978516,63.9410552978516,63.9410552978516,26.4305648803711,26.4305648803711,26.4305648803711,26.4305648803711,41.5016937255859,41.5016937255859,41.5016937255859,41.5016937255859,56.4054718017578,56.4054718017578,56.4054718017578,56.4054718017578,63.9410629272461,63.9410629272461,63.9410629272461,63.9410629272461,63.9410629272461,30.1145858764648,30.1145858764648,30.1145858764648,30.1145858764648,45.1858215332031,45.1858215332031,45.1858215332031,45.1858215332031,58.5466690063477,58.5466690063477,58.5466690063477,58.5466690063477,63.737907409668,63.737907409668,63.737907409668,63.737907409668,63.737907409668,30.2142944335938,30.2142944335938,30.2142944335938,30.2142944335938,39.2570037841797,39.2570037841797,39.2570037841797,39.2570037841797,42.6061019897461,42.6061019897461,42.6061019897461,42.6061019897461,51.1464385986328,51.1464385986328,51.1464385986328,51.1464385986328,63.8732681274414,63.8732681274414,63.8732681274414,63.8732681274414,63.8732681274414,24.1857757568359,24.1857757568359,24.1857757568359,24.1857757568359,37.5824356079102,37.5824356079102,37.5824356079102,37.5824356079102,52.8210220336914,52.8210220336914,52.8210220336914,52.8210220336914,63.8732757568359,63.8732757568359,63.8732757568359,63.8732757568359,63.8732757568359,23.5160064697266,23.5160064697266,23.5160064697266,23.5160064697266,38.4197311401367,38.4197311401367,38.4197311401367,38.4197311401367,53.9932861328125,53.9932861328125,53.9932861328125,53.9932861328125,63.8732833862305,63.8732833862305,63.8732833862305,63.8732833862305,63.8732833862305,23.5160140991211,23.5160140991211,23.5160140991211,23.5160140991211,33.2285003662109,33.2285003662109,33.2285003662109,33.2285003662109,37.0800247192383,37.0800247192383,37.0800247192383,37.0800247192383,44.783073425293,44.783073425293,44.783073425293,44.783073425293,59.3518829345703,59.3518829345703,59.3518829345703,59.3518829345703,63.873291015625,63.873291015625,63.873291015625,63.873291015625,63.873291015625,63.7058868408203,63.7058868408203,63.7058868408203,63.7058868408203,63.7058868408203,31.0515594482422,31.0515594482422,31.0515594482422,31.0515594482422,45.9553375244141,45.9553375244141,45.9553375244141,45.9553375244141,60.1892318725586,60.1892318725586,60.1892318725586,60.1892318725586,60.0230026245117,60.0230026245117,60.0230026245117,60.0230026245117,60.0230026245117,31.2190246582031,31.2190246582031,31.2190246582031,31.2190246582031,46.2902603149414,46.2902603149414,46.2902603149414,46.2902603149414,60.3566970825195,60.3566970825195,60.3566970825195,60.3566970825195,56.1727142333984,56.1727142333984,56.1727142333984,56.1727142333984,56.1727142333984,32.2238311767578,32.2238311767578,32.2238311767578,32.2238311767578,47.7973861694336,47.7973861694336,47.7973861694336,47.7973861694336,63.0360260009766,63.0360260009766,63.0360260009766,63.0360260009766,30.2250747680664,30.2250747680664,30.2250747680664,30.2250747680664,30.2250747680664,36.075309753418,36.075309753418,36.075309753418,36.075309753418,51.3140029907227,51.3140029907227,51.3140029907227,51.3140029907227,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,23.5158920288086,23.5158920288086,23.5158920288086,23.5158920288086,38.4196166992188,38.4196166992188,38.4196166992188,38.4196166992188,53.4907455444336,53.4907455444336,53.4907455444336,53.4907455444336,63.8731689453125,63.8731689453125,63.8731689453125,63.8731689453125,63.8731689453125,25.0229644775391,25.0229644775391,25.0229644775391,25.0229644775391,40.0941467285156,40.0941467285156,40.0941467285156,40.0941467285156,54.9978713989258,54.9978713989258,54.9978713989258,54.9978713989258,63.873176574707,63.873176574707,63.873176574707,63.873176574707,63.873176574707,30.8839874267578,30.8839874267578,30.8839874267578,30.8839874267578,46.2901382446289,46.2901382446289,46.2901382446289,46.2901382446289,61.3613204956055,61.3613204956055,61.3613204956055,61.3613204956055,43.9520874023438,43.9520874023438,43.9520874023438,43.9520874023438,43.9520874023438,34.2332000732422,34.2332000732422,34.2332000732422,34.2332000732422,48.9694671630859,48.9694671630859,48.9694671630859,48.9694671630859,63.8731918334961,63.8731918334961,63.8731918334961,63.8731918334961,63.8731918334961,25.6928176879883,25.6928176879883,25.6928176879883,25.6928176879883,37.4148483276367,37.4148483276367,37.4148483276367,37.4148483276367,41.6013412475586,41.6013412475586,41.6013412475586,41.6013412475586,50.3091354370117,50.3091354370117,50.3091354370117,50.3091354370117,63.8731994628906,63.8731994628906,63.8731994628906,63.8731994628906,63.8731994628906,28.8745193481445,28.8745193481445,28.8745193481445,28.8745193481445,43.61083984375,43.61083984375,43.61083984375,43.61083984375,58.6820220947266,58.6820220947266,58.6820220947266,58.6820220947266,63.8732070922852,63.8732070922852,63.8732070922852,63.8732070922852,63.8732070922852,30.7166137695312,30.7166137695312,30.7166137695312,30.7166137695312,44.7829971313477,44.7829971313477,44.7829971313477,44.7829971313477,59.8541793823242,59.8541793823242,59.8541793823242,59.8541793823242,58.8510894775391,58.8510894775391,58.8510894775391,58.8510894775391,58.8510894775391,32.056282043457,32.056282043457,32.056282043457,32.056282043457,47.6298370361328,47.6298370361328,47.6298370361328,47.6298370361328,62.1986465454102,62.1986465454102,62.1986465454102,62.1986465454102,42.6128921508789,42.6128921508789,42.6128921508789,42.6128921508789,42.6128921508789,33.8982696533203,33.8982696533203,33.8982696533203,33.8982696533203,48.6345901489258,48.6345901489258,48.6345901489258,48.6345901489258,62.8684310913086,62.8684310913086,62.8684310913086,62.8684310913086,36.0841369628906,36.0841369628906,36.0841369628906,36.0841369628906,36.0841369628906,34.9030227661133,34.9030227661133,34.9030227661133,34.9030227661133,49.8068008422852,49.8068008422852,49.8068008422852,49.8068008422852,63.8732376098633,63.8732376098633,63.8732376098633,63.8732376098633,63.8732376098633,25.1904907226562,25.1904907226562,25.1904907226562,25.1904907226562,40.2617263793945,40.2617263793945,40.2617263793945,40.2617263793945,55.8352279663086,55.8352279663086,55.8352279663086,55.8352279663086,63.7058410644531,63.7058410644531,63.7058410644531,63.7058410644531,63.7058410644531,31.5539398193359,31.5539398193359,31.5539398193359,31.5539398193359,47.1274795532227,47.1274795532227,47.1274795532227,47.1274795532227,62.1986236572266,62.1986236572266,62.1986236572266,62.1986236572266,44.6217727661133,44.6217727661133,44.6217727661133,44.6217727661133,44.6217727661133,33.730842590332,33.730842590332,33.730842590332,33.730842590332,48.132194519043,48.132194519043,48.132194519043,48.132194519043,61.86376953125,61.86376953125,61.86376953125,61.86376953125,44.1195678710938,44.1195678710938,44.1195678710938,44.1195678710938,44.1195678710938,33.898307800293,33.898307800293,33.898307800293,33.898307800293,49.3044586181641,49.3044586181641,49.3044586181641,49.3044586181641,63.8732681274414,63.8732681274414,63.8732681274414,63.8732681274414,63.8732681274414,23.515998840332,23.515998840332,23.515998840332,23.515998840332,38.2522125244141,38.2522125244141,38.2522125244141,38.2522125244141,53.6583633422852,53.6583633422852,53.6583633422852,53.6583633422852,63.7058715820312,63.7058715820312,63.7058715820312,63.7058715820312,63.7058715820312,31.3865127563477,31.3865127563477,31.3865127563477,31.3865127563477,46.6250991821289,46.6250991821289,46.6250991821289,46.6250991821289,62.03125,62.03125,62.03125,62.03125,46.7980575561523,46.7980575561523,46.7980575561523,46.7980575561523,46.7980575561523,33.2285537719727,33.2285537719727,33.2285537719727,33.2285537719727,47.79736328125,47.79736328125,47.79736328125,47.79736328125,62.8684921264648,62.8684921264648,62.8684921264648,62.8684921264648,36.4190063476562,36.4190063476562,36.4190063476562,36.4190063476562,36.4190063476562,25.5254592895508,25.5254592895508,25.5254592895508,25.5254592895508,36.0752868652344,36.0752868652344,36.0752868652344,36.0752868652344,49.3044357299805,49.3044357299805,49.3044357299805,49.3044357299805,63.7057876586914,63.7057876586914,63.7057876586914,63.7057876586914,33.4057388305664,33.4057388305664,33.4057388305664,33.4057388305664,33.4057388305664,34.7356338500977,34.7356338500977,34.7356338500977,34.7356338500977,49.6393585205078,49.6393585205078,49.6393585205078,49.6393585205078,63.8733062744141,63.8733062744141,63.8733062744141,63.8733062744141,63.8733062744141,24.0184097290039,24.0184097290039,24.0184097290039,24.0184097290039,38.7546234130859,38.7546234130859,38.7546234130859,38.7546234130859,53.1560287475586,53.1560287475586,53.1560287475586,53.1560287475586,63.8733139038086,63.8733139038086,63.8733139038086,63.8733139038086,63.8733139038086,25.6929397583008,25.6929397583008,25.6929397583008,25.6929397583008,40.5966644287109,40.5966644287109,40.5966644287109,40.5966644287109,56.0027618408203,56.0027618408203,56.0027618408203,56.0027618408203,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,63.8733215332031,31.1831207275391,31.1831207275391,31.1831207275391,31.1831207275391,31.1831207275391,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,34.6860504150391,34.6860504150391,34.6860504150391,34.6860504150391,50.2596054077148,50.2596054077148,50.2596054077148,50.2596054077148,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,22.9640808105469,22.9640808105469,22.9640808105469,22.9640808105469,38.8724975585938,38.8724975585938,38.8724975585938,38.8724975585938,52.9389877319336,52.9389877319336,52.9389877319336,52.9389877319336,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,29.3274230957031,29.3274230957031,29.3274230957031,29.3274230957031,44.3986053466797,44.3986053466797,44.3986053466797,44.3986053466797,59.1349258422852,59.1349258422852,59.1349258422852,59.1349258422852,51.2684783935547,51.2684783935547,51.2684783935547,51.2684783935547,51.2684783935547,25.6556396484375,25.6556396484375,25.6556396484375,25.6556396484375,25.6556396484375,29.3274841308594,29.3274841308594,29.3274841308594,29.3274841308594,44.733528137207,44.733528137207,44.733528137207,44.733528137207,59.8047637939453,59.8047637939453,59.8047637939453,59.8047637939453,49.259635925293,49.259635925293,49.259635925293,49.259635925293,49.259635925293,29.9972686767578,29.9972686767578,29.9972686767578,29.9972686767578,42.3891830444336,42.3891830444336,42.3891830444336,42.3891830444336,57.2929077148438,57.2929077148438,57.2929077148438,57.2929077148438,60.6431274414062,60.6431274414062,60.6431274414062,60.6431274414062,60.6431274414062,30.1647872924805,30.1647872924805,30.1647872924805,30.1647872924805,45.4034271240234,45.4034271240234,45.4034271240234,45.4034271240234,59.9722366333008,59.9722366333008,59.9722366333008,59.9722366333008,42.8982925415039,42.8982925415039,42.8982925415039,42.8982925415039,42.8982925415039,33.8488082885742,33.8488082885742,33.8488082885742,33.8488082885742,48.585075378418,48.585075378418,48.585075378418,48.585075378418,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,24.8061599731445,24.8061599731445,24.8061599731445,24.8061599731445,39.3749694824219,39.3749694824219,39.3749694824219,39.3749694824219,54.7810134887695,54.7810134887695,54.7810134887695,54.7810134887695,63.8238296508789,63.8238296508789,63.8238296508789,63.8238296508789,63.8238296508789,30.6671829223633,30.6671829223633,30.6671829223633,30.6671829223633,45.7383651733398,45.7383651733398,45.7383651733398,45.7383651733398,61.3119201660156,61.3119201660156,61.3119201660156,61.3119201660156,29.1711730957031,29.1711730957031,29.1711730957031,29.1711730957031,29.1711730957031,35.5234603881836,35.5234603881836,35.5234603881836,35.5234603881836,50.2830352783203,50.2830352783203,50.2830352783203,50.2830352783203,63.8471527099609,63.8471527099609,63.8471527099609,63.8471527099609,63.8471527099609,24.4182968139648,24.4182968139648,24.4182968139648,24.4182968139648,39.1545104980469,39.1545104980469,39.1545104980469,39.1545104980469,53.8908309936523,53.8908309936523,53.8908309936523,53.8908309936523,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,27.0976257324219,27.0976257324219,27.0976257324219,27.0976257324219,42.3362121582031,42.3362121582031,42.3362121582031,42.3362121582031,57.2399368286133,57.2399368286133,57.2399368286133,57.2399368286133,60.4228057861328,60.4228057861328,60.4228057861328,60.4228057861328,60.4228057861328,30.4467849731445,30.4467849731445,30.4467849731445,30.4467849731445,45.0155410766602,45.0155410766602,45.0155410766602,45.0155410766602,59.7518615722656,59.7518615722656,59.7518615722656,59.7518615722656,46.5282669067383,46.5282669067383,46.5282669067383,46.5282669067383,46.5282669067383,33.4610290527344,33.4610290527344,33.4610290527344,33.4610290527344,49.0345306396484,49.0345306396484,49.0345306396484,49.0345306396484,63.4359359741211,63.4359359741211,63.4359359741211,63.4359359741211,23.0786666870117,23.0786666870117,23.0786666870117,23.0786666870117,37.8148803710938,37.8148803710938,37.8148803710938,37.8148803710938,53.3884887695312,53.3884887695312,53.3884887695312,53.3884887695312,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,30.279296875,30.279296875,30.279296875,30.279296875,45.5179901123047,45.5179901123047,45.5179901123047,45.5179901123047,61.0914916992188,61.0914916992188,61.0914916992188,61.0914916992188,52.5548400878906,52.5548400878906,52.5548400878906,52.5548400878906,52.5548400878906,20.4132385253906,20.4132385253906,20.4132385253906,20.4132385253906,20.4132385253906,34.6332015991211,34.6332015991211,34.6332015991211,34.6332015991211,49.8718414306641,49.8718414306641,49.8718414306641,49.8718414306641,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,24.9206695556641,24.9206695556641,24.9206695556641,24.9206695556641,38.6522445678711,38.6522445678711,38.6522445678711,38.6522445678711,53.7233734130859,53.7233734130859,53.7233734130859,53.7233734130859,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,30.7817459106445,30.7817459106445,30.7817459106445,30.7817459106445,46.5227584838867,46.5227584838867,46.5227584838867,46.5227584838867,61.5939407348633,61.5939407348633,61.5939407348633,61.5939407348633,35.4796371459961,35.4796371459961,35.4796371459961,35.4796371459961,35.4796371459961,34.8006820678711,34.8006820678711,34.8006820678711,34.8006820678711,50.2067794799805,50.2067794799805,50.2067794799805,50.2067794799805,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,24.7532348632812,24.7532348632812,24.7532348632812,24.7532348632812,40.4942474365234,40.4942474365234,40.4942474365234,40.4942474365234,55.5654296875,55.5654296875,55.5654296875,55.5654296875,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,30.279182434082,30.279182434082,30.279182434082,30.279182434082,45.6852798461914,45.6852798461914,45.6852798461914,45.6852798461914,60.756462097168,60.756462097168,60.756462097168,60.756462097168,36.4839248657227,36.4839248657227,36.4839248657227,36.4839248657227,36.4839248657227,34.4656829833984,34.4656829833984,34.4656829833984,34.4656829833984,48.6995239257812,48.6995239257812,48.6995239257812,48.6995239257812,63.9381637573242,63.9381637573242,63.9381637573242,63.9381637573242,23.0785751342773,23.0785751342773,23.0785751342773,23.0785751342773,38.6520767211914,38.6520767211914,38.6520767211914,38.6520767211914,53.5558547973633,53.5558547973633,53.5558547973633,53.5558547973633,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,29.2745132446289,29.2745132446289,29.2745132446289,29.2745132446289,45.0155258178711,45.0155258178711,45.0155258178711,45.0155258178711,56.0676727294922,56.0676727294922,56.0676727294922,56.0676727294922,59.0819091796875,59.0819091796875,59.0819091796875,59.0819091796875,59.0835113525391,59.0835113525391,59.0835113525391,59.0835113525391,59.0835113525391,30.4467239379883,30.4467239379883,30.4467239379883,30.4467239379883,45.0155334472656,45.0155334472656,45.0155334472656,45.0155334472656,59.081916809082,59.081916809082,59.081916809082,59.081916809082,54.061393737793,54.061393737793,54.061393737793,54.061393737793,54.061393737793,32.2887115478516,32.2887115478516,32.2887115478516,32.2887115478516,46.6901168823242,46.6901168823242,46.6901168823242,46.6901168823242,61.9287033081055,61.9287033081055,61.9287033081055,61.9287033081055,32.1314544677734,32.1314544677734,32.1314544677734,32.1314544677734,32.1314544677734,35.135498046875,35.135498046875,35.135498046875,35.135498046875,50.2067337036133,50.2067337036133,50.2067337036133,50.2067337036133,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,30.4467468261719,30.4467468261719,30.4467468261719,30.4467468261719,45.3504180908203,45.3504180908203,45.3504180908203,45.3504180908203,60.4216003417969,60.4216003417969,60.4216003417969,60.4216003417969,38.6602325439453,38.6602325439453,38.6602325439453,38.6602325439453,38.6602325439453,33.6283950805664,33.6283950805664,33.6283950805664,33.6283950805664,48.0297470092773,48.0297470092773,48.0297470092773,48.0297470092773,62.7660140991211,62.7660140991211,62.7660140991211,62.7660140991211,23.0786285400391,23.0786285400391,23.0786285400391,23.0786285400391,38.4847259521484,38.4847259521484,38.4847259521484,38.4847259521484,53.0534820556641,53.0534820556641,53.0534820556641,53.0534820556641,63.9382781982422,63.9382781982422,63.9382781982422,63.9382781982422,63.9382781982422,30.1118011474609,30.1118011474609,30.1118011474609,30.1118011474609,45.0155258178711,45.0155258178711,45.0155258178711,45.0155258178711,59.7518463134766,59.7518463134766,59.7518463134766,59.7518463134766,41.6735305786133,41.6735305786133,41.6735305786133,41.6735305786133,41.6735305786133,34.1308441162109,34.1308441162109,34.1308441162109,34.1308441162109,49.5369415283203,49.5369415283203,49.5369415283203,49.5369415283203,63.9382934570312,63.9382934570312,63.9382934570312,63.9382934570312,63.9382934570312,27.2650909423828,27.2650909423828,27.2650909423828,27.2650909423828,42.6711883544922,42.6711883544922,42.6711883544922,42.6711883544922,57.5748596191406,57.5748596191406,57.5748596191406,57.5748596191406,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,31.2840805053711,31.2840805053711,31.2840805053711,31.2840805053711,46.1877517700195,46.1877517700195,46.1877517700195,46.1877517700195,60.924072265625,60.924072265625,60.924072265625,60.924072265625,35.3121948242188,35.3121948242188,35.3121948242188,35.3121948242188,35.3121948242188,35.1355590820312,35.1355590820312,35.1355590820312,35.1355590820312,50.2067947387695,50.2067947387695,50.2067947387695,50.2067947387695,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,30.7817230224609,30.7817230224609,30.7817230224609,30.7817230224609,46.3552780151367,46.3552780151367,46.3552780151367,46.3552780151367,61.9287796020508,61.9287796020508,61.9287796020508,61.9287796020508,29.2856597900391,29.2856597900391,29.2856597900391,29.2856597900391,29.2856597900391,34.1308822631836,34.1308822631836,34.1308822631836,34.1308822631836,44.0108795166016,44.0108795166016,44.0108795166016,44.0108795166016,52.0487899780273,52.0487899780273,52.0487899780273,52.0487899780273,55.2304840087891,55.2304840087891,55.2304840087891,55.2304840087891,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,26.9302139282227,26.9302139282227,26.9302139282227,26.9302139282227,42.1688003540039,42.1688003540039,42.1688003540039,42.1688003540039,56.737663269043,56.737663269043,56.737663269043,56.737663269043,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,29.9444046020508,29.9444046020508,29.9444046020508,29.9444046020508,41.8339462280273,41.8339462280273,41.8339462280273,41.8339462280273,56.7376174926758,56.7376174926758,56.7376174926758,56.7376174926758,63.7709426879883,63.7709426879883,63.7709426879883,63.7709426879883,63.7709426879883,30.4468383789062,30.4468383789062,30.4468383789062,30.4468383789062,45.6854248046875,45.6854248046875,45.6854248046875,45.6854248046875,60.4216918945312,60.4216918945312,60.4216918945312,60.4216918945312,58.0792083740234,58.0792083740234,58.0792083740234,58.0792083740234,58.0792083740234,30.4467926025391,30.4467926025391,30.4467926025391,30.4467926025391,45.3505706787109,45.3505706787109,45.3505706787109,45.3505706787109,60.2542953491211,60.2542953491211,60.2542953491211,60.2542953491211,36.651481628418,36.651481628418,36.651481628418,36.651481628418,36.651481628418,31.2839813232422,31.2839813232422,31.2839813232422,31.2839813232422,46.1877059936523,46.1877059936523,46.1877059936523,46.1877059936523,59.7517166137695,59.7517166137695,59.7517166137695,59.7517166137695,59.4182968139648,59.4182968139648,59.4182968139648,59.4182968139648,59.4182968139648,26.762580871582,26.762580871582,26.762580871582,26.762580871582,34.4656829833984,34.4656829833984,34.4656829833984,34.4656829833984,47.5273742675781,47.5273742675781,47.5273742675781,47.5273742675781,60.0866394042969,60.0866394042969,60.0866394042969,60.0866394042969,57.4094543457031,57.4094543457031,57.4094543457031,57.4094543457031,57.4094543457031,29.6094207763672,29.6094207763672,29.6094207763672,29.6094207763672,41.6663665771484,41.6663665771484,41.6663665771484,41.6663665771484,54.7280578613281,54.7280578613281,54.7280578613281,54.7280578613281,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,26.4276809692383,26.4276809692383,26.4276809692383,26.4276809692383,41.666374206543,41.666374206543,41.666374206543,41.666374206543,52.5511093139648,52.5511093139648,52.5511093139648,52.5511093139648,59.0819091796875,59.0819091796875,59.0819091796875,59.0819091796875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,25.5904541015625,25.5904541015625,25.5904541015625,25.5904541015625,39.4893798828125,39.4893798828125,39.4893798828125,39.4893798828125,53.7233276367188,53.7233276367188,53.7233276367188,53.7233276367188,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,30.7815933227539,30.7815933227539,30.7815933227539,30.7815933227539,44.8480834960938,44.8480834960938,44.8480834960938,44.8480834960938,57.4073486328125,57.4073486328125,57.4073486328125,57.4073486328125,63.9382476806641,63.9382476806641,63.9382476806641,63.9382476806641,63.9382476806641,24.3127288818359,24.3127288818359,24.3127288818359,24.3127288818359,37.7093353271484,37.7093353271484,37.7093353271484,37.7093353271484,52.1106338500977,52.1106338500977,52.1106338500977,52.1106338500977,63.6653137207031,63.6653137207031,63.6653137207031,63.6653137207031,63.6653137207031,31.0510711669922,31.0510711669922,31.0510711669922,31.0510711669922,46.1223068237305,46.1223068237305,46.1223068237305,46.1223068237305,61.1934356689453,61.1934356689453,61.1934356689453,61.1934356689453,31.2289962768555,31.2289962768555,31.2289962768555,31.2289962768555,31.2289962768555,35.0700607299805,35.0700607299805,35.0700607299805,35.0700607299805,49.1365509033203,49.1365509033203,49.1365509033203,49.1365509033203,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,22.5107879638672,22.5107879638672,22.5107879638672,22.5107879638672,31.888427734375,31.888427734375,31.888427734375,31.888427734375,44.4476928710938,44.4476928710938,44.4476928710938,44.4476928710938,59.3514709472656,59.3514709472656,59.3514709472656,59.3514709472656,48.136833190918,48.136833190918,48.136833190918,48.136833190918,48.136833190918,33.0605850219727,33.0605850219727,33.0605850219727,33.0605850219727,47.1270217895508,47.1270217895508,47.1270217895508,47.1270217895508,57.6769027709961,57.6769027709961,57.6769027709961,57.6769027709961,63.8728332519531,63.8728332519531,63.8728332519531,63.8728332519531,63.8728332519531,25.0226821899414,25.0226821899414,25.0226821899414,25.0226821899414,39.0890655517578,39.0890655517578,39.0890655517578,39.0890655517578,51.6484375,51.6484375,51.6484375,51.6484375,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,31.0511627197266,31.0511627197266,31.0511627197266,31.0511627197266,42.6056823730469,42.6056823730469,42.6056823730469,42.6056823730469,54.6626815795898,54.6626815795898,54.6626815795898,54.6626815795898,63.370475769043,63.370475769043,63.370475769043,63.370475769043,40.1014556884766,40.1014556884766,40.1014556884766,40.1014556884766,40.1014556884766,33.7304916381836,33.7304916381836,33.7304916381836,33.7304916381836,49.136589050293,49.136589050293,49.136589050293,49.136589050293,63.8728561401367,63.8728561401367,63.8728561401367,63.8728561401367,63.8728561401367,25.859992980957,25.859992980957,25.859992980957,25.859992980957,41.4335479736328,41.4335479736328,41.4335479736328,41.4335479736328,57.0070495605469,57.0070495605469,57.0070495605469,57.0070495605469,62.1988220214844,62.1988220214844,62.1988220214844,62.1988220214844,62.1988220214844,27.5345230102539,27.5345230102539,27.5345230102539,27.5345230102539,37.2470626831055,37.2470626831055,37.2470626831055,37.2470626831055,50.3087539672852,50.3087539672852,50.3087539672852,50.3087539672852,59.8538360595703,59.8538360595703,59.8538360595703,59.8538360595703,63.7054672241211,63.7054672241211,63.7054672241211,63.7054672241211,63.7054672241211,29.0416488647461,29.0416488647461,29.0416488647461,29.0416488647461,44.6152038574219,44.6152038574219,44.6152038574219,44.6152038574219,59.518928527832,59.518928527832,59.518928527832,59.518928527832,54.8330535888672,54.8330535888672,54.8330535888672,54.8330535888672,54.8330535888672,32.0558929443359,32.0558929443359,32.0558929443359,32.0558929443359,47.1270751953125,47.1270751953125,47.1270751953125,47.1270751953125,60.5237350463867,60.5237350463867,60.5237350463867,60.5237350463867,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,28.8742599487305,28.8742599487305,28.8742599487305,28.8742599487305,43.1081008911133,43.1081008911133,43.1081008911133,43.1081008911133,56.6722183227539,56.6722183227539,56.6722183227539,56.6722183227539,63.7054901123047,63.7054901123047,63.7054901123047,63.7054901123047,63.7054901123047,31.3860778808594,31.3860778808594,31.3860778808594,31.3860778808594,45.9549407958984,45.9549407958984,45.9549407958984,45.9549407958984,61.026123046875,61.026123046875,61.026123046875,61.026123046875,32.233512878418,32.233512878418,32.233512878418,32.233512878418,32.233512878418,35.0701522827148,35.0701522827148,35.0701522827148,35.0701522827148,50.4762496948242,50.4762496948242,50.4762496948242,50.4762496948242,63.8729095458984,63.8729095458984,63.8729095458984,63.8729095458984,63.8729095458984,24.687629699707,24.687629699707,24.687629699707,24.687629699707,39.7588653564453,39.7588653564453,39.7588653564453,39.7588653564453,54.4951324462891,54.4951324462891,54.4951324462891,54.4951324462891,63.8727569580078,63.8727569580078,63.8727569580078,63.8727569580078,63.8727569580078,28.0368423461914,28.0368423461914,28.0368423461914,28.0368423461914,43.2754287719727,43.2754287719727,43.2754287719727,43.2754287719727,58.1791534423828,58.1791534423828,58.1791534423828,58.1791534423828,58.683235168457,58.683235168457,58.683235168457,58.683235168457,58.683235168457,31.8883743286133,31.8883743286133,31.8883743286133,31.8883743286133,46.4571838378906,46.4571838378906,46.4571838378906,46.4571838378906,62.0307388305664,62.0307388305664,62.0307388305664,62.0307388305664,33.0704040527344,33.0704040527344,33.0704040527344,33.0704040527344,33.0704040527344,35.4049911499023,35.4049911499023,35.4049911499023,35.4049911499023,39.0890045166016,39.0890045166016,39.0890045166016,39.0890045166016,47.4618835449219,47.4618835449219,47.4618835449219,47.4618835449219,58.1792221069336,58.1792221069336,58.1792221069336,58.1792221069336,63.8727798461914,63.8727798461914,63.8727798461914,63.8727798461914,63.8727798461914,29.5439300537109,29.5439300537109,29.5439300537109,29.5439300537109,40.5961837768555,40.5961837768555,40.5961837768555,40.5961837768555,51.3134155273438,51.3134155273438,51.3134155273438,51.3134155273438,61.3609237670898,61.3609237670898,61.3609237670898,61.3609237670898,51.4848785400391,51.4848785400391,51.4848785400391,51.4848785400391,51.4848785400391,32.0558013916016,32.0558013916016,32.0558013916016,32.0558013916016,46.792121887207,46.792121887207,46.792121887207,46.792121887207,61.1934204101562,61.1934204101562,61.1934204101562,61.1934204101562,31.2289810180664,31.2289810180664,31.2289810180664,31.2289810180664,31.2289810180664,35.9073333740234,35.9073333740234,35.9073333740234,35.9073333740234,51.1460266113281,51.1460266113281,51.1460266113281,51.1460266113281,63.7053985595703,63.7053985595703,63.7053985595703,63.7053985595703,63.7053985595703,31.0510711669922,31.0510711669922,31.0510711669922,31.0510711669922,45.9547958374023,45.9547958374023,45.9547958374023,45.9547958374023,61.3609466552734,61.3609466552734,61.3609466552734,61.3609466552734,27.5461044311523,27.5461044311523,27.5461044311523,27.5461044311523,27.5461044311523,34.567741394043,34.567741394043,34.567741394043,34.567741394043,49.8063278198242,49.8063278198242,49.8063278198242,49.8063278198242,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,27.1996154785156,27.1996154785156,27.1996154785156,27.1996154785156,42.4382553100586,42.4382553100586,42.4382553100586,42.4382553100586,57.6768951416016,57.6768951416016,57.6768951416016,57.6768951416016,57.1766586303711,57.1766586303711,57.1766586303711,57.1766586303711,57.1766586303711,32.3908081054688,32.3908081054688,32.3908081054688,32.3908081054688,46.9595642089844,46.9595642089844,46.9595642089844,46.9595642089844,61.5283737182617,61.5283737182617,61.5283737182617,61.5283737182617,30.8942108154297,30.8942108154297,30.8942108154297,30.8942108154297,30.8942108154297,35.572509765625,35.572509765625,35.572509765625,35.572509765625,49.8063507080078,49.8063507080078,49.8063507080078,49.8063507080078,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,26.1948394775391,26.1948394775391,26.1948394775391,26.1948394775391,41.2660217285156,41.2660217285156,41.2660217285156,41.2660217285156,56.0023422241211,56.0023422241211,56.0023422241211,56.0023422241211,63.7054443359375,63.7054443359375,63.7054443359375,63.7054443359375,63.7054443359375,30.8837127685547,30.8837127685547,30.8837127685547,30.8837127685547,46.1222991943359,46.1222991943359,46.1222991943359,46.1222991943359,61.3609390258789,61.3609390258789,61.3609390258789,61.3609390258789,31.061637878418,31.061637878418,31.061637878418,31.061637878418,31.061637878418,35.5724792480469,35.5724792480469,35.5724792480469,35.5724792480469,49.8064270019531,49.8064270019531,49.8064270019531,49.8064270019531,63.8728637695312,63.8728637695312,63.8728637695312,63.8728637695312,63.8728637695312,25.1901702880859,25.1901702880859,25.1901702880859,25.1901702880859,38.9216384887695,38.9216384887695,38.9216384887695,38.9216384887695,51.48095703125,51.48095703125,51.48095703125,51.48095703125,63.8728713989258,63.8728713989258,63.8728713989258,63.8728713989258,63.8728713989258,22.8457183837891,22.8457183837891,22.8457183837891,22.8457183837891,27.5345306396484,27.5345306396484,27.5345306396484,27.5345306396484,37.9169540405273,37.9169540405273,37.9169540405273,37.9169540405273,52.485710144043,52.485710144043,52.485710144043,52.485710144043,63.7054748535156,63.7054748535156,63.7054748535156,63.7054748535156,63.7054748535156,30.2138595581055,30.2138595581055,30.2138595581055,30.2138595581055,43.610466003418,43.610466003418,43.610466003418,43.610466003418,58.0118179321289,58.0118179321289,58.0118179321289,58.0118179321289,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,30.7162933349609,30.7162933349609,30.7162933349609,30.7162933349609,45.452507019043,45.452507019043,45.452507019043,45.452507019043,60.3562316894531,60.3562316894531,60.3562316894531,60.3562316894531,46.1280517578125,46.1280517578125,46.1280517578125,46.1280517578125,46.1280517578125,33.5630264282227,33.5630264282227,33.5630264282227,33.5630264282227,48.969123840332,48.969123840332,48.969123840332,48.969123840332,63.7054977416992,63.7054977416992,63.7054977416992,63.7054977416992,63.7054977416992,30.71630859375,30.71630859375,30.71630859375,30.71630859375,45.954948425293,45.954948425293,45.954948425293,45.954948425293,61.1935348510742,61.1935348510742,61.1935348510742,61.1935348510742,57.3441467285156,57.3441467285156,57.3441467285156,57.3441467285156,57.3441467285156,26.864631652832,26.864631652832,26.864631652832,26.864631652832,41.7683563232422,41.7683563232422,41.7683563232422,41.7683563232422,55.4998245239258,55.4998245239258,55.4998245239258,55.4998245239258,63.8727569580078,63.8727569580078,63.8727569580078,63.8727569580078,63.8727569580078,27.0320434570312,27.0320434570312,27.0320434570312,27.0320434570312,42.1032257080078,42.1032257080078,42.1032257080078,42.1032257080078,57.5093231201172,57.5093231201172,57.5093231201172,57.5093231201172,59.5202560424805,59.5202560424805,59.5202560424805,59.5202560424805,59.5202560424805,31.7208633422852,31.7208633422852,31.7208633422852,31.7208633422852,46.2896728515625,46.2896728515625,46.2896728515625,46.2896728515625,59.2073211669922,59.2073211669922,59.2073211669922,59.2073211669922,51.3408203125,51.3408203125,51.3408203125,51.3408203125,51.3408203125,33.342529296875,33.342529296875,33.342529296875,33.342529296875,45.7343597412109,45.7343597412109,45.7343597412109,45.7343597412109,50.255744934082,50.255744934082,50.255744934082,50.255744934082,62.9824676513672,62.9824676513672,62.9824676513672,62.9824676513672,23.4625396728516,23.4625396728516,23.4625396728516,23.4625396728516,38.0313491821289,38.0313491821289,38.0313491821289,38.0313491821289,52.7675628662109,52.7675628662109,52.7675628662109,52.7675628662109,63.9872741699219,63.9872741699219,63.9872741699219,63.9872741699219,63.9872741699219,29.4910202026367,29.4910202026367,29.4910202026367,29.4910202026367,44.2272872924805,44.2272872924805,44.2272872924805,44.2272872924805,58.7960968017578,58.7960968017578,58.7960968017578,58.7960968017578,57.4585189819336,57.4585189819336,57.4585189819336,57.4585189819336,57.4585189819336,32.3377532958984,32.3377532958984,32.3377532958984,32.3377532958984,47.0740737915039,47.0740737915039,47.0740737915039,47.0740737915039,62.4801177978516,62.4801177978516,62.4801177978516,62.4801177978516,28.1627960205078,28.1627960205078,28.1627960205078,28.1627960205078,28.1627960205078,36.1892852783203,36.1892852783203,36.1892852783203,36.1892852783203,51.2604675292969,51.2604675292969,51.2604675292969,51.2604675292969,63.9872970581055,63.9872970581055,63.9872970581055,63.9872970581055,63.9872970581055,29.658447265625,29.658447265625,29.658447265625,29.658447265625,44.7296829223633,44.7296829223633,44.7296829223633,44.7296829223633,59.6333541870117,59.6333541870117,59.6333541870117,59.6333541870117,45.7402496337891,45.7402496337891,45.7402496337891,45.7402496337891,45.7402496337891,33.3425216674805,33.3425216674805,33.3425216674805,33.3425216674805,48.4137573242188,48.4137573242188,48.4137573242188,48.4137573242188,63.4848861694336,63.4848861694336,63.4848861694336,63.4848861694336,23.4625854492188,23.4625854492188,23.4625854492188,23.4625854492188,38.5337677001953,38.5337677001953,38.5337677001953,38.5337677001953,53.4374389648438,53.4374389648438,53.4374389648438,53.4374389648438,63.9873199462891,63.9873199462891,63.9873199462891,63.9873199462891,63.9873199462891,27.1466598510742,27.1466598510742,27.1466598510742,27.1466598510742,42.5527572631836,42.5527572631836,42.5527572631836,42.5527572631836,57.1215667724609,57.1215667724609,57.1215667724609,57.1215667724609,60.9740524291992,60.9740524291992,60.9740524291992,60.9740524291992,60.9740524291992,30.4958190917969,30.4958190917969,30.4958190917969,30.4958190917969,45.3994903564453,45.3994903564453,45.3994903564453,45.3994903564453,60.3032684326172,60.3032684326172,60.3032684326172,60.3032684326172,40.3833465576172,40.3833465576172,40.3833465576172,40.3833465576172,40.3833465576172,34.0124359130859,34.0124359130859,34.0124359130859,34.0124359130859,49.0835647583008,49.0835647583008,49.0835647583008,49.0835647583008,63.8198318481445,63.8198318481445,63.8198318481445,63.8198318481445,23.4626159667969,23.4626159667969,23.4626159667969,23.4626159667969,37.8639144897461,37.8639144897461,37.8639144897461,37.8639144897461,53.1026077270508,53.1026077270508,53.1026077270508,53.1026077270508,63.8199462890625,63.8199462890625,63.8199462890625,63.8199462890625,63.8199462890625,31.1656723022461,31.1656723022461,31.1656723022461,31.1656723022461,46.0693969726562,46.0693969726562,46.0693969726562,46.0693969726562,60.8056106567383,60.8056106567383,60.8056106567383,60.8056106567383,44.4010696411133,44.4010696411133,44.4010696411133,44.4010696411133,44.4010696411133,33.5100326538086,33.5100326538086,33.5100326538086,33.5100326538086,48.0788955688477,48.0788955688477,48.0788955688477,48.0788955688477,55.2795181274414,55.2795181274414,55.2795181274414,55.2795181274414,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,23.4626388549805,23.4626388549805,23.4626388549805,23.4626388549805,38.5337677001953,38.5337677001953,38.5337677001953,38.5337677001953,53.1026306152344,53.1026306152344,53.1026306152344,53.1026306152344,63.9873733520508,63.9873733520508,63.9873733520508,63.9873733520508,63.9873733520508,27.6490325927734,27.6490325927734,27.6490325927734,27.6490325927734,42.5527572631836,42.5527572631836,42.5527572631836,42.5527572631836,54.6097030639648,54.6097030639648,54.6097030639648,54.6097030639648,63.8199768066406,63.8199768066406,63.8199768066406,63.8199768066406,63.8199768066406,30.8307876586914,30.8307876586914,30.8307876586914,30.8307876586914,46.2368850708008,46.2368850708008,46.2368850708008,46.2368850708008,61.3080139160156,61.3080139160156,61.3080139160156,61.3080139160156,34.5242538452148,34.5242538452148,34.5242538452148,34.5242538452148,34.5242538452148,35.3520965576172,35.3520965576172,35.3520965576172,35.3520965576172,50.5907363891602,50.5907363891602,50.5907363891602,50.5907363891602,63.8199920654297,63.8199920654297,63.8199920654297,63.8199920654297,63.8199920654297,30.998046875,30.998046875,30.998046875,30.998046875,46.0692825317383,46.0692825317383,46.0692825317383,46.0692825317383,61.8102416992188,61.8102416992188,61.8102416992188,61.8102416992188,37.8721923828125,37.8721923828125,37.8721923828125,37.8721923828125,37.8721923828125,34.6821746826172,34.6821746826172,34.6821746826172,34.6821746826172,49.753303527832,49.753303527832,49.753303527832,49.753303527832,63.9871978759766,63.9871978759766,63.9871978759766,63.9871978759766,23.4625244140625,23.4625244140625,23.4625244140625,23.4625244140625,37.5289611816406,37.5289611816406,37.5289611816406,37.5289611816406,52.4326858520508,52.4326858520508,52.4326858520508,52.4326858520508,63.8198547363281,63.8198547363281,63.8198547363281,63.8198547363281,63.8198547363281,30.3282928466797,30.3282928466797,30.3282928466797,30.3282928466797,44.3946762084961,44.3946762084961,44.3946762084961,44.3946762084961,58.7960815429688,58.7960815429688,58.7960815429688,58.7960815429688,50.762336730957,50.762336730957,50.762336730957,50.762336730957,50.762336730957,32.8401107788086,32.8401107788086,32.8401107788086,32.8401107788086,35.8544006347656,35.8544006347656,35.8544006347656,35.8544006347656,47.2414627075195,47.2414627075195,47.2414627075195,47.2414627075195,62.3126983642578,62.3126983642578,62.3126983642578,62.3126983642578,27.8279724121094,27.8279724121094,27.8279724121094,27.8279724121094,27.8279724121094,35.0171203613281,35.0171203613281,35.0171203613281,35.0171203613281,48.5811309814453,48.5811309814453,48.5811309814453,48.5811309814453,63.6523666381836,63.6523666381836,63.6523666381836,63.6523666381836,25.3169174194336,25.3169174194336,25.3169174194336,25.3169174194336,25.3169174194336,35.5195007324219,35.5195007324219,35.5195007324219,35.5195007324219,49.0835647583008,49.0835647583008,49.0835647583008,49.0835647583008,63.8198852539062,63.8198852539062,63.8198852539062,63.8198852539062,63.8198852539062,30.4957809448242,30.4957809448242,30.4957809448242,30.4957809448242,45.2319946289062,45.2319946289062,45.2319946289062,45.2319946289062,60.4706344604492,60.4706344604492,60.4706344604492,60.4706344604492,40.5507125854492,40.5507125854492,40.5507125854492,40.5507125854492,40.5507125854492,34.6821746826172,34.6821746826172,34.6821746826172,34.6821746826172,49.4184417724609,49.4184417724609,49.4184417724609,49.4184417724609,63.9873046875,63.9873046875,63.9873046875,63.9873046875,63.9873046875,24.2998657226562,24.2998657226562,24.2998657226562,24.2998657226562,39.8733673095703,39.8733673095703,39.8733673095703,39.8733673095703,54.9446029663086,54.9446029663086,54.9446029663086,54.9446029663086,63.8199081420898,63.8199081420898,63.8199081420898,63.8199081420898,63.8199081420898,31.1655807495117,31.1655807495117,31.1655807495117,31.1655807495117,46.2367630004883,46.2367630004883,46.2367630004883,46.2367630004883,61.3079986572266,61.3079986572266,61.3079986572266,61.3079986572266,34.6915893554688,34.6915893554688,34.6915893554688,34.6915893554688,34.6915893554688,34.8497085571289,34.8497085571289,34.8497085571289,34.8497085571289,50.4232635498047,50.4232635498047,50.4232635498047,50.4232635498047,63.9873275756836,63.9873275756836,63.9873275756836,63.9873275756836,63.9873275756836,25.3046340942383,25.3046340942383,25.3046340942383,25.3046340942383,40.5432205200195,40.5432205200195,40.5432205200195,40.5432205200195,54.6097106933594,54.6097106933594,54.6097106933594,54.6097106933594,63.8199310302734,63.8199310302734,63.8199310302734,63.8199310302734,63.8199310302734,30.8307418823242,30.8307418823242,30.8307418823242,30.8307418823242,45.9019241333008,45.9019241333008,45.9019241333008,45.9019241333008,60.4706802368164,60.4706802368164,60.4706802368164,60.4706802368164,43.5640335083008,43.5640335083008,43.5640335083008,43.5640335083008,43.5640335083008,33.5100708007812,33.5100708007812,33.5100708007812,33.5100708007812,48.7487106323242,48.7487106323242,48.7487106323242,48.7487106323242,63.9873504638672,63.9873504638672,63.9873504638672,63.9873504638672,63.9873504638672,23.4626235961914,23.4626235961914,23.4626235961914,23.4626235961914,38.8687210083008,38.8687210083008,38.8687210083008,38.8687210083008,54.1073608398438,54.1073608398438,54.1073608398438,54.1073608398438,63.9873580932617,63.9873580932617,63.9873580932617,63.9873580932617,63.9873580932617,29.1561889648438,29.1561889648438,29.1561889648438,29.1561889648438,44.2273712158203,44.2273712158203,44.2273712158203,44.2273712158203,57.6239776611328,57.6239776611328,57.6239776611328,57.6239776611328,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,29.4910583496094,29.4910583496094,29.4910583496094,29.4910583496094,37.5290756225586,37.5290756225586,37.5290756225586,37.5290756225586,45.9019012451172,45.9019012451172,45.9019012451172,45.9019012451172,58.1263046264648,58.1263046264648,58.1263046264648,58.1263046264648,57.2912063598633,57.2912063598633,57.2912063598633,57.2912063598633,57.2912063598633,31.6680145263672,31.6680145263672,31.6680145263672,31.6680145263672,46.2368240356445,46.2368240356445,46.2368240356445,46.2368240356445,60.97314453125,60.97314453125,60.97314453125,60.97314453125,39.8811798095703,39.8811798095703,39.8811798095703,39.8811798095703,39.8811798095703,33.0077362060547,33.0077362060547,33.0077362060547,33.0077362060547,47.2415771484375,47.2415771484375,47.2415771484375,47.2415771484375,62.3128128051758,62.3128128051758,62.3128128051758,62.3128128051758,31.5109786987305,31.5109786987305,31.5109786987305,31.5109786987305,31.5109786987305,35.1846389770508,35.1846389770508,35.1846389770508,35.1846389770508,49.0478591918945,49.0478591918945,49.0478591918945,49.0478591918945,62.1096038818359,62.1096038818359,62.1096038818359,62.1096038818359,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,63.9516372680664,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,27.1504592895508,27.1504592895508,27.1504592895508,27.1504592895508,39.7097778320312,39.7097778320312,39.7097778320312,39.7097778320312,53.2738952636719,53.2738952636719,53.2738952636719,53.2738952636719,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,30.8345336914062,30.8345336914062,30.8345336914062,30.8345336914062,45.9057159423828,45.9057159423828,45.9057159423828,45.9057159423828,59.8047485351562,59.8047485351562,59.8047485351562,59.8047485351562,47.585578918457,47.585578918457,47.585578918457,47.585578918457,47.585578918457,33.1790008544922,33.1790008544922,33.1790008544922,33.1790008544922,48.752555847168,48.752555847168,48.752555847168,48.752555847168,58.6324996948242,58.6324996948242,58.6324996948242,58.6324996948242,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,35.6998901367188,35.6998901367188,35.6998901367188,35.6998901367188,35.6998901367188,34.0162963867188,34.0162963867188,34.0162963867188,34.0162963867188,49.2548828125,49.2548828125,49.2548828125,49.2548828125,63.8237991333008,63.8237991333008,63.8237991333008,63.8237991333008,63.8237991333008,30.4996948242188,30.4996948242188,30.4996948242188,30.4996948242188,45.9057388305664,45.9057388305664,45.9057388305664,45.9057388305664,61.3118362426758,61.3118362426758,61.3118362426758,61.3118362426758,31.5148010253906,31.5148010253906,31.5148010253906,31.5148010253906,31.5148010253906,35.3559188842773,35.3559188842773,35.3559188842773,35.3559188842773,50.0921859741211,50.0921859741211,50.0921859741211,50.0921859741211,63.9912185668945,63.9912185668945,63.9912185668945,63.9912185668945,63.9912185668945,24.80615234375,24.80615234375,24.80615234375,24.80615234375,39.5424194335938,39.5424194335938,39.5424194335938,39.5424194335938,54.9485168457031,54.9485168457031,54.9485168457031,54.9485168457031,63.8238220214844,63.8238220214844,63.8238220214844,63.8238220214844,63.8238220214844,30.6671752929688,30.6671752929688,30.6671752929688,30.6671752929688,46.0732727050781,46.0732727050781,46.0732727050781,46.0732727050781,61.3119125366211,61.3119125366211,61.3119125366211,61.3119125366211,31.1800155639648,31.1800155639648,31.1800155639648,31.1800155639648,31.1800155639648,35.3559799194336,35.3559799194336,35.3559799194336,35.3559799194336,50.0922622680664,50.0922622680664,50.0922622680664,50.0922622680664,63.9912414550781,63.9912414550781,63.9912414550781,63.9912414550781,63.9912414550781,30.1647644042969,30.1647644042969,30.1647644042969,30.1647644042969,45.4034042358398,45.4034042358398,45.4034042358398,45.4034042358398,60.8095016479492,60.8095016479492,60.8095016479492,60.8095016479492,35.5325393676758,35.5325393676758,35.5325393676758,35.5325393676758,35.5325393676758,34.6861801147461,34.6861801147461,34.6861801147461,34.6861801147461,50.2596817016602,50.2596817016602,50.2596817016602,50.2596817016602,63.9912567138672,63.9912567138672,63.9912567138672,63.9912567138672,63.9912567138672,27.9878311157227,27.9878311157227,27.9878311157227,27.9878311157227,42.5566940307617,42.5566940307617,42.5566940307617,42.5566940307617,57.7953338623047,57.7953338623047,57.7953338623047,57.7953338623047,57.2950973510742,57.2950973510742,57.2950973510742,57.2950973510742,57.2950973510742,32.0068740844727,32.0068740844727,32.0068740844727,32.0068740844727,47.4129180908203,47.4129180908203,47.4129180908203,47.4129180908203,62.6515579223633,62.6515579223633,62.6515579223633,62.6515579223633,20.8009948730469,20.8009948730469,20.8009948730469,20.8009948730469,20.8009948730469,36.5281829833984,36.5281829833984,36.5281829833984,36.5281829833984,51.4319610595703,51.4319610595703,51.4319610595703,51.4319610595703,63.9912796020508,63.9912796020508,63.9912796020508,63.9912796020508,63.9912796020508,27.3180236816406,27.3180236816406,27.3180236816406,27.3180236816406,42.2217483520508,42.2217483520508,42.2217483520508,42.2217483520508,57.1254730224609,57.1254730224609,57.1254730224609,57.1254730224609,60.9780120849609,60.9780120849609,60.9780120849609,60.9780120849609,60.9780120849609,30.1648101806641,30.1648101806641,30.1648101806641,30.1648101806641,45.4035034179688,45.4035034179688,45.4035034179688,45.4035034179688,60.1397171020508,60.1397171020508,60.1397171020508,60.1397171020508,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,22.9641952514648,22.9641952514648,22.9641952514648,22.9641952514648,35.0210876464844,35.0210876464844,35.0210876464844,35.0210876464844,49.9248657226562,49.9248657226562,49.9248657226562,49.9248657226562,63.9913024902344,63.9913024902344,63.9913024902344,63.9913024902344,63.9913024902344,27.652961730957,27.652961730957,27.652961730957,27.652961730957,41.7193984985352,41.7193984985352,41.7193984985352,41.7193984985352,56.6231231689453,56.6231231689453,56.6231231689453,56.6231231689453,63.9913101196289,63.9913101196289,63.9913101196289,63.9913101196289,63.9913101196289,30.3322906494141,30.3322906494141,30.3322906494141,30.3322906494141,44.7336807250977,44.7336807250977,44.7336807250977,44.7336807250977,57.1255569458008,57.1255569458008,57.1255569458008,57.1255569458008,63.9913177490234,63.9913177490234,63.9913177490234,63.9913177490234,63.9913177490234,26.9831695556641,26.9831695556641,26.9831695556641,26.9831695556641,39.7099761962891,39.7099761962891,39.7099761962891,39.7099761962891,55.2834777832031,55.2834777832031,55.2834777832031,55.2834777832031,63.8239212036133,63.8239212036133,63.8239212036133,63.8239212036133,63.8239212036133,30.1648483276367,30.1648483276367,30.1648483276367,30.1648483276367,45.236083984375,45.236083984375,45.236083984375,45.236083984375,60.6421813964844,60.6421813964844,60.6421813964844,60.6421813964844,37.3740692138672,37.3740692138672,37.3740692138672,37.3740692138672,37.3740692138672,34.3511352539062,34.3511352539062,34.3511352539062,34.3511352539062,49.08740234375,49.08740234375,49.08740234375,49.08740234375,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,28.1552124023438,28.1552124023438,28.1552124023438,28.1552124023438,43.0589370727539,43.0589370727539,43.0589370727539,43.0589370727539,57.9627151489258,57.9627151489258,57.9627151489258,57.9627151489258,59.1364669799805,59.1364669799805,59.1364669799805,59.1364669799805,59.1364669799805,31.3369140625,31.3369140625,31.3369140625,31.3369140625,46.4080963134766,46.4080963134766,46.4080963134766,46.4080963134766,61.4792785644531,61.4792785644531,61.4792785644531,61.4792785644531,30.8451690673828,30.8451690673828,30.8451690673828,30.8451690673828,30.8451690673828,35.0209884643555,35.0209884643555,35.0209884643555,35.0209884643555,40.3796310424805,40.3796310424805,40.3796310424805,40.3796310424805,46.2406997680664,46.2406997680664,46.2406997680664,46.2406997680664,60.9769134521484,60.9769134521484,60.9769134521484,60.9769134521484,36.8717269897461,36.8717269897461,36.8717269897461,36.8717269897461,36.8717269897461,33.3464736938477,33.3464736938477,33.3464736938477,33.3464736938477,48.0827407836914,48.0827407836914,48.0827407836914,48.0827407836914,63.4888381958008,63.4888381958008,63.4888381958008,63.4888381958008,22.964111328125,22.964111328125,22.964111328125,22.964111328125,38.2026977539062,38.2026977539062,38.2026977539062,38.2026977539062,52.6040496826172,52.6040496826172,52.6040496826172,52.6040496826172,63.8238143920898,63.8238143920898,63.8238143920898,63.8238143920898,63.8238143920898,30.8346252441406,30.8346252441406,30.8346252441406,30.8346252441406,46.0732650756836,46.0732650756836,46.0732650756836,46.0732650756836,61.479362487793,61.479362487793,61.479362487793,61.479362487793,29.6733703613281,29.6733703613281,29.6733703613281,29.6733703613281,29.6733703613281,35.3559341430664,35.3559341430664,35.3559341430664,35.3559341430664,50.427116394043,50.427116394043,50.427116394043,50.427116394043,63.9912338256836,63.9912338256836,63.9912338256836,63.9912338256836,63.9912338256836,30.1648101806641,30.1648101806641,30.1648101806641,30.1648101806641,45.403450012207,45.403450012207,45.403450012207,45.403450012207,60.4745788574219,60.4745788574219,60.4745788574219,60.4745788574219,41.2242736816406,41.2242736816406,41.2242736816406,41.2242736816406,41.2242736816406,33.8488845825195,33.8488845825195,33.8488845825195,33.8488845825195,49.4223861694336,49.4223861694336,49.4223861694336,49.4223861694336,63.823844909668,63.823844909668,63.823844909668,63.823844909668,63.823844909668,30.834602355957,30.834602355957,30.834602355957,30.834602355957,46.2406997680664,46.2406997680664,46.2406997680664,46.2406997680664,61.4793395996094,61.4793395996094,61.4793395996094,61.4793395996094,34.5281219482422,34.5281219482422,34.5281219482422,34.5281219482422,34.5281219482422,34.6861343383789,34.6861343383789,34.6861343383789,34.6861343383789,50.0922317504883,50.0922317504883,50.0922317504883,50.0922317504883,63.9912643432617,63.9912643432617,63.9912643432617,63.9912643432617,63.9912643432617,24.8061981201172,24.8061981201172,24.8061981201172,24.8061981201172,40.2122955322266,40.2122955322266,40.2122955322266,40.2122955322266,54.2787322998047,54.2787322998047,54.2787322998047,54.2787322998047,63.8238677978516,63.8238677978516,63.8238677978516,63.8238677978516,63.8238677978516,30.8346252441406,30.8346252441406,30.8346252441406,30.8346252441406,45.2360305786133,45.2360305786133,45.2360305786133,45.2360305786133,60.3071594238281,60.3071594238281,60.3071594238281,60.3071594238281,37.2066116333008,37.2066116333008,37.2066116333008,37.2066116333008,37.2066116333008,34.0163803100586,34.0163803100586,34.0163803100586,34.0163803100586,48.5851364135742,48.5851364135742,48.5851364135742,48.5851364135742,63.6563720703125,63.6563720703125,63.6563720703125,63.6563720703125,22.9641876220703,22.9641876220703,22.9641876220703,22.9641876220703,38.5376892089844,38.5376892089844,38.5376892089844,38.5376892089844,53.9437866210938,53.9437866210938,53.9437866210938,53.9437866210938,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,26.9831237792969,26.9831237792969,26.9831237792969,26.9831237792969,42.2217636108398,42.2217636108398,42.2217636108398,42.2217636108398,46.7431182861328,46.7431182861328,46.7431182861328,46.7431182861328,54.9485931396484,54.9485931396484,54.9485931396484,54.9485931396484,63.679801940918,63.679801940918,63.679801940918,63.679801940918,63.679801940918,30.2793655395508,30.2793655395508,30.2793655395508,30.2793655395508,45.0155792236328,45.0155792236328,45.0155792236328,45.0155792236328,59.4169311523438,59.4169311523438,59.4169311523438,59.4169311523438,50.5460052490234,50.5460052490234,50.5460052490234,50.5460052490234,50.5460052490234,31.6190338134766,31.6190338134766,31.6190338134766,31.6190338134766,47.0250778198242,47.0250778198242,47.0250778198242,47.0250778198242,62.0962600708008,62.0962600708008,62.0962600708008,62.0962600708008,33.8055953979492,33.8055953979492,33.8055953979492,33.8055953979492,33.8055953979492,34.6332778930664,34.6332778930664,34.6332778930664,34.6332778930664,49.7044067382812,49.7044067382812,49.7044067382812,49.7044067382812,63.7709503173828,63.7709503173828,63.7709503173828,63.7709503173828,63.7709503173828,30.6143035888672,30.6143035888672,30.6143035888672,30.6143035888672,45.8529434204102,45.8529434204102,45.8529434204102,45.8529434204102,60.4216995239258,60.4216995239258,60.4216995239258,60.4216995239258,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,23.9157943725586,23.9157943725586,23.9157943725586,23.9157943725586,38.8195190429688,38.8195190429688,38.8195190429688,38.8195190429688,53.890754699707,53.890754699707,53.890754699707,53.890754699707,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,28.2696990966797,28.2696990966797,28.2696990966797,28.2696990966797,42.6710510253906,42.6710510253906,42.6710510253906,42.6710510253906,57.2399139404297,57.2399139404297,57.2399139404297,57.2399139404297,63.7708129882812,63.7708129882812,63.7708129882812,63.7708129882812,63.7708129882812,30.2791976928711,30.2791976928711,30.2791976928711,30.2791976928711,45.5178375244141,45.5178375244141,45.5178375244141,45.5178375244141,59.4168167114258,59.4168167114258,59.4168167114258,59.4168167114258,53.2243576049805,53.2243576049805,53.2243576049805,53.2243576049805,53.2243576049805,32.623664855957,32.623664855957,32.623664855957,32.623664855957,47.8623046875,47.8623046875,47.8623046875,47.8623046875,60.5890274047852,60.5890274047852,60.5890274047852,60.5890274047852,63.2684020996094,63.2684020996094,63.2684020996094,63.2684020996094,41.8408813476562,41.8408813476562,41.8408813476562,41.8408813476562,41.8408813476562,33.7958221435547,33.7958221435547,33.7958221435547,33.7958221435547,48.5320892333984,48.5320892333984,48.5320892333984,48.5320892333984,63.4358673095703,63.4358673095703,63.4358673095703,63.4358673095703,23.0785980224609,23.0785980224609,23.0785980224609,23.0785980224609,37.9823226928711,37.9823226928711,37.9823226928711,37.9823226928711,52.7185897827148,52.7185897827148,52.7185897827148,52.7185897827148,63.9382476806641,63.9382476806641,63.9382476806641,63.9382476806641,63.9382476806641,30.1117706298828,30.1117706298828,30.1117706298828,30.1117706298828,45.3504638671875,45.3504638671875,45.3504638671875,45.3504638671875,60.4215927124023,60.4215927124023,60.4215927124023,60.4215927124023,36.3165664672852,36.3165664672852,36.3165664672852,36.3165664672852,36.3165664672852,34.6331329345703,34.6331329345703,34.6331329345703,34.6331329345703,49.8717727661133,49.8717727661133,49.8717727661133,49.8717727661133,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,24.7531433105469,24.7531433105469,24.7531433105469,24.7531433105469,39.4894638061523,39.4894638061523,39.4894638061523,39.4894638061523,54.3931884765625,54.3931884765625,54.3931884765625,54.3931884765625,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,27.5999298095703,27.5999298095703,27.5999298095703,27.5999298095703,42.8385696411133,42.8385696411133,42.8385696411133,42.8385696411133,58.0772094726562,58.0772094726562,58.0772094726562,58.0772094726562,55.4006652832031,55.4006652832031,55.4006652832031,55.4006652832031,55.4006652832031,31.9538345336914,31.9538345336914,31.9538345336914,31.9538345336914,45.0155258178711,45.0155258178711,45.0155258178711,45.0155258178711,59.4169311523438,59.4169311523438,59.4169311523438,59.4169311523438,46.1934432983398,46.1934432983398,46.1934432983398,46.1934432983398,46.1934432983398,32.791130065918,32.791130065918,32.791130065918,32.791130065918,48.0297698974609,48.0297698974609,48.0297698974609,48.0297698974609,63.2684631347656,63.2684631347656,63.2684631347656,63.2684631347656,23.0786514282227,23.0786514282227,23.0786514282227,23.0786514282227,37.9823760986328,37.9823760986328,37.9823760986328,37.9823760986328,53.2209625244141,53.2209625244141,53.2209625244141,53.2209625244141,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,30.1118774414062,30.1118774414062,30.1118774414062,30.1118774414062,45.0156021118164,45.0156021118164,45.0156021118164,45.0156021118164,59.4169540405273,59.4169540405273,59.4169540405273,59.4169540405273,45.8586578369141,45.8586578369141,45.8586578369141,45.8586578369141,45.8586578369141,33.4609832763672,33.4609832763672,33.4609832763672,33.4609832763672,48.3647613525391,48.3647613525391,48.3647613525391,48.3647613525391,63.2684860229492,63.2684860229492,63.2684860229492,63.2684860229492,23.0786743164062,23.0786743164062,23.0786743164062,23.0786743164062,37.8148880004883,37.8148880004883,37.8148880004883,37.8148880004883,52.7186126708984,52.7186126708984,52.7186126708984,52.7186126708984,63.9383239746094,63.9383239746094,63.9383239746094,63.9383239746094,63.9383239746094,29.2745590209961,29.2745590209961,29.2745590209961,29.2745590209961,43.5085067749023,43.5085067749023,43.5085067749023,43.5085067749023,57.9098587036133,57.9098587036133,57.9098587036133,57.9098587036133,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,38.158088684082,38.158088684082,38.158088684082,38.158088684082,38.158088684082,33.6284637451172,33.6284637451172,33.6284637451172,33.6284637451172,48.0298156738281,48.0298156738281,48.0298156738281,48.0298156738281,59.7518463134766,59.7518463134766,59.7518463134766,59.7518463134766,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,24.5858001708984,24.5858001708984,24.5858001708984,24.5858001708984,31.7864379882812,31.7864379882812,31.7864379882812,31.7864379882812,34.8006744384766,34.8006744384766,34.8006744384766,34.8006744384766,46.522705078125,46.522705078125,46.522705078125,46.522705078125,61.2589721679688,61.2589721679688,61.2589721679688,61.2589721679688,40.1669540405273,40.1669540405273,40.1669540405273,40.1669540405273,40.1669540405273,33.9633941650391,33.9633941650391,33.9633941650391,33.9633941650391,47.6949691772461,47.6949691772461,47.6949691772461,47.6949691772461,62.9335556030273,62.9335556030273,62.9335556030273,62.9335556030273,24.2635650634766,24.2635650634766,24.2635650634766,24.2635650634766,24.2635650634766,36.307861328125,36.307861328125,36.307861328125,36.307861328125,51.7139053344727,51.7139053344727,51.7139053344727,51.7139053344727,63.938362121582,63.938362121582,63.938362121582,63.938362121582,63.938362121582,28.6046600341797,28.6046600341797,28.6046600341797,28.6046600341797,44.1781616210938,44.1781616210938,44.1781616210938,44.1781616210938,59.5842590332031,59.5842590332031,59.5842590332031,59.5842590332031,45.0215377807617,45.0215377807617,45.0215377807617,45.0215377807617,45.0215377807617,33.4609375,33.4609375,33.4609375,33.4609375,48.699577331543,48.699577331543,48.699577331543,48.699577331543,63.4358444213867,63.4358444213867,63.4358444213867,63.4358444213867,23.0785751342773,23.0785751342773,23.0785751342773,23.0785751342773,38.1497039794922,38.1497039794922,38.1497039794922,38.1497039794922,53.0534820556641,53.0534820556641,53.0534820556641,53.0534820556641,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,26.7625961303711,26.7625961303711,26.7625961303711,26.7625961303711,42.1687469482422,42.1687469482422,42.1687469482422,42.1687469482422,55.7328109741211,55.7328109741211,55.7328109741211,55.7328109741211,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,48.3696441650391,48.3696441650391,48.3696441650391,48.3696441650391,48.3696441650391,29.1070098876953,29.1070098876953,29.1070098876953,29.1070098876953,43.508415222168,43.508415222168,43.508415222168,43.508415222168,58.4121398925781,58.4121398925781,58.4121398925781,58.4121398925781,60.4227523803711,60.4227523803711,60.4227523803711,60.4227523803711,60.4227523803711,29.7768478393555,29.7768478393555,29.7768478393555,29.7768478393555,44.848030090332,44.848030090332,44.848030090332,44.848030090332,58.4121475219727,58.4121475219727,58.4121475219727,58.4121475219727,56.2376556396484,56.2376556396484,56.2376556396484,56.2376556396484,56.2376556396484,31.9538040161133,31.9538040161133,31.9538040161133,31.9538040161133,46.8575820922852,46.8575820922852,46.8575820922852,46.8575820922852,62.0961685180664,62.0961685180664,62.0961685180664,62.0961685180664,25.4352951049805,25.4352951049805,25.4352951049805,25.4352951049805,25.4352951049805,35.4704742431641,35.4704742431641,35.4704742431641,35.4704742431641,50.3741455078125,50.3741455078125,50.3741455078125,50.3741455078125,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,25.5904312133789,25.5904312133789,25.5904312133789,25.5904312133789,40.6616134643555,40.6616134643555,40.6616134643555,40.6616134643555,54.8955612182617,54.8955612182617,54.8955612182617,54.8955612182617,63.770866394043,63.770866394043,63.770866394043,63.770866394043,63.770866394043,30.6142196655273,30.6142196655273,30.6142196655273,30.6142196655273,45.182975769043,45.182975769043,45.182975769043,45.182975769043,60.5891265869141,60.5891265869141,60.5891265869141,60.5891265869141,44.8542022705078,44.8542022705078,44.8542022705078,44.8542022705078,44.8542022705078,33.2934951782227,33.2934951782227,33.2934951782227,33.2934951782227,48.3647308349609,48.3647308349609,48.3647308349609,48.3647308349609,62.5985717773438,62.5985717773438,62.5985717773438,62.5985717773438,26.9419631958008,26.9419631958008,26.9419631958008,26.9419631958008,26.9419631958008,35.3030471801758,35.3030471801758,35.3030471801758,35.3030471801758,50.541633605957,50.541633605957,50.541633605957,50.541633605957,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,30.9491577148438,30.9491577148438,30.9491577148438,30.9491577148438,45.8528289794922,45.8528289794922,45.8528289794922,45.8528289794922,60.9240646362305,60.9240646362305,60.9240646362305,60.9240646362305,33.1359329223633,33.1359329223633,33.1359329223633,33.1359329223633,33.1359329223633,34.968147277832,34.968147277832,34.968147277832,34.968147277832,48.2592163085938,48.2592163085938,48.2592163085938,48.2592163085938,62.9954833984375,62.9954833984375,62.9954833984375,62.9954833984375,23.3481292724609,23.3481292724609,23.3481292724609,23.3481292724609,38.5867691040039,38.5867691040039,38.5867691040039,38.5867691040039,53.6578979492188,53.6578979492188,53.6578979492188,53.6578979492188,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,30.7162170410156,30.7162170410156,30.7162170410156,30.7162170410156,45.285026550293,45.285026550293,45.285026550293,45.285026550293,59.853889465332,59.853889465332,59.853889465332,59.853889465332,46.7976455688477,46.7976455688477,46.7976455688477,46.7976455688477,46.7976455688477,32.5583114624023,32.5583114624023,32.5583114624023,32.5583114624023,47.7968978881836,47.7968978881836,47.7968978881836,47.7968978881836,63.202995300293,63.202995300293,63.202995300293,63.202995300293,47.6346740722656,47.6346740722656,47.6346740722656,47.6346740722656,47.6346740722656,23.3481521606445,23.3481521606445,23.3481521606445,23.3481521606445,34.5678100585938,34.5678100585938,34.5678100585938,34.5678100585938,49.8064498901367,49.8064498901367,49.8064498901367,49.8064498901367,63.8728866577148,63.8728866577148,63.8728866577148,63.8728866577148,63.8728866577148,24.1853942871094,24.1853942871094,24.1853942871094,24.1853942871094,38.4193420410156,38.4193420410156,38.4193420410156,38.4193420410156,52.6531829833984,52.6531829833984,52.6531829833984,52.6531829833984,63.8728942871094,63.8728942871094,63.8728942871094,63.8728942871094,63.8728942871094,30.5488433837891,30.5488433837891,30.5488433837891,30.5488433837891,45.9548873901367,45.9548873901367,45.9548873901367,45.9548873901367,60.0213241577148,60.0213241577148,60.0213241577148,60.0213241577148,47.9695053100586,47.9695053100586,47.9695053100586,47.9695053100586,47.9695053100586,33.5630874633789,33.5630874633789,33.5630874633789,33.5630874633789,48.9691314697266,48.9691314697266,48.9691314697266,48.9691314697266,63.5379409790039,63.5379409790039,63.5379409790039,63.5379409790039,20.668701171875,20.668701171875,20.668701171875,20.668701171875,20.668701171875,35.7398300170898,35.7398300170898,35.7398300170898,35.7398300170898,50.9785232543945,50.9785232543945,50.9785232543945,50.9785232543945,63.7053527832031,63.7053527832031,63.7053527832031,63.7053527832031,63.7053527832031,30.7161102294922,30.7161102294922,30.7161102294922,30.7161102294922,45.9547500610352,45.9547500610352,45.9547500610352,45.9547500610352,61.3609008789062,61.3609008789062,61.3609008789062,61.3609008789062,35.9162673950195,35.9162673950195,35.9162673950195,35.9162673950195,35.9162673950195,34.4002380371094,34.4002380371094,34.4002380371094,34.4002380371094,49.1365051269531,49.1365051269531,49.1365051269531,49.1365051269531,63.8727722167969,63.8727722167969,63.8727722167969,63.8727722167969,63.8727722167969,30.213752746582,30.213752746582,30.213752746582,30.213752746582,44.4477005004883,44.4477005004883,44.4477005004883,44.4477005004883,59.5188293457031,59.5188293457031,59.5188293457031,59.5188293457031,46.2953414916992,46.2953414916992,46.2953414916992,46.2953414916992,46.2953414916992,33.7304229736328,33.7304229736328,33.7304229736328,33.7304229736328,49.1365203857422,49.1365203857422,49.1365203857422,49.1365203857422,53.8252792358398,53.8252792358398,53.8252792358398,53.8252792358398,63.0354461669922,63.0354461669922,63.0354461669922,63.0354461669922,23.3480606079102,23.3480606079102,23.3480606079102,23.3480606079102,38.5867004394531,38.5867004394531,38.5867004394531,38.5867004394531,53.1554565429688,53.1554565429688,53.1554565429688,53.1554565429688,63.8727951049805,63.8727951049805,63.8727951049805,63.8727951049805,63.8727951049805,25.525016784668,25.525016784668,25.525016784668,25.525016784668,40.4286880493164,40.4286880493164,40.4286880493164,40.4286880493164,54.4951248168945,54.4951248168945,54.4951248168945,54.4951248168945,63.7053985595703,63.7053985595703,63.7053985595703,63.7053985595703,63.7053985595703,30.3812942504883,30.3812942504883,30.3812942504883,30.3812942504883,45.6198806762695,45.6198806762695,45.6198806762695,45.6198806762695,60.8585205078125,60.8585205078125,60.8585205078125,60.8585205078125,34.7444839477539,34.7444839477539,34.7444839477539,34.7444839477539,34.7444839477539,35.2375183105469,35.2375183105469,35.2375183105469,35.2375183105469,49.6388702392578,49.6388702392578,49.6388702392578,49.6388702392578,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,23.3480911254883,23.3480911254883,23.3480911254883,23.3480911254883,39.0890502929688,39.0890502929688,39.0890502929688,39.0890502929688,54.3276901245117,54.3276901245117,54.3276901245117,54.3276901245117,63.7054214477539,63.7054214477539,63.7054214477539,63.7054214477539,63.7054214477539,30.8836364746094,30.8836364746094,30.8836364746094,30.8836364746094,46.4571914672852,46.4571914672852,46.4571914672852,46.4571914672852,61.6958312988281,61.6958312988281,61.6958312988281,61.6958312988281,34.4096984863281,34.4096984863281,34.4096984863281,34.4096984863281,34.4096984863281,34.9026260375977,34.9026260375977,34.9026260375977,34.9026260375977,49.9738082885742,49.9738082885742,49.9738082885742,49.9738082885742,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,25.6924667358398,25.6924667358398,25.6924667358398,25.6924667358398,41.2660751342773,41.2660751342773,41.2660751342773,41.2660751342773,56.672119140625,56.672119140625,56.672119140625,56.672119140625,63.7054443359375,63.7054443359375,63.7054443359375,63.7054443359375,63.7054443359375,31.3860855102539,31.3860855102539,31.3860855102539,31.3860855102539,46.7921829223633,46.7921829223633,46.7921829223633,46.7921829223633,62.0307693481445,62.0307693481445,62.0307693481445,62.0307693481445,33.740104675293,33.740104675293,33.740104675293,33.740104675293,33.740104675293,34.7352447509766,34.7352447509766,34.7352447509766,34.7352447509766,50.3087463378906,50.3087463378906,50.3087463378906,50.3087463378906,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,31.386100769043,31.386100769043,31.386100769043,31.386100769043,46.2898254394531,46.2898254394531,46.2898254394531,46.2898254394531,60.6911239624023,60.6911239624023,60.6911239624023,60.6911239624023,44.6213912963867,44.6213912963867,44.6213912963867,44.6213912963867,44.6213912963867,33.7304611206055,33.7304611206055,33.7304611206055,33.7304611206055,49.1365585327148,49.1365585327148,49.1365585327148,49.1365585327148,63.8728790283203,63.8728790283203,63.8728790283203,63.8728790283203,63.8728790283203,27.7019958496094,27.7019958496094,27.7019958496094,27.7019958496094,42.1033477783203,42.1033477783203,42.1033477783203,42.1033477783203,56.8396148681641,56.8396148681641,56.8396148681641,56.8396148681641,63.8728332519531,63.8728332519531,63.8728332519531,63.8728332519531,59.0181655883789,59.0181655883789,59.0181655883789,59.0181655883789,59.0181655883789,28.7068023681641,28.7068023681641,28.7068023681641,28.7068023681641,44.1128463745117,44.1128463745117,44.1128463745117,44.1128463745117,58.6817092895508,58.6817092895508,58.6817092895508,58.6817092895508,59.8551940917969,59.8551940917969,59.8551940917969,59.8551940917969,59.8551940917969,31.218620300293,31.218620300293,31.218620300293,31.218620300293,45.1176528930664,45.1176528930664,45.1176528930664,45.1176528930664,59.686408996582,59.686408996582,59.686408996582,59.686408996582,45.625846862793,45.625846862793,45.625846862793,45.625846862793,45.625846862793,32.8932571411133,32.8932571411133,32.8932571411133,32.8932571411133,48.1318435668945,48.1318435668945,48.1318435668945,48.1318435668945,62.3657913208008,62.3657913208008,62.3657913208008,62.3657913208008,21.1848449707031,21.1848449707031,21.1848449707031,21.1848449707031,21.1848449707031,36.9120864868164,36.9120864868164,36.9120864868164,36.9120864868164,52.1506729125977,52.1506729125977,52.1506729125977,52.1506729125977,63.7053527832031,63.7053527832031,63.7053527832031,63.7053527832031,63.7053527832031,31.2184829711914,31.2184829711914,31.2184829711914,31.2184829711914,46.1222610473633,46.1222610473633,46.1222610473633,46.1222610473633,60.8584747314453,60.8584747314453,60.8584747314453,60.8584747314453,35.2466506958008,35.2466506958008,35.2466506958008,35.2466506958008,35.2466506958008,35.4049301147461,35.4049301147461,35.4049301147461,35.4049301147461,50.8110275268555,50.8110275268555,50.8110275268555,50.8110275268555,63.8727722167969,63.8727722167969,63.8727722167969,63.8727722167969,63.8727722167969,30.2138061523438,30.2138061523438,30.2138061523438,30.2138061523438,44.9500198364258,44.9500198364258,44.9500198364258,44.9500198364258,59.8537445068359,59.8537445068359,59.8537445068359,59.8537445068359,40.7710037231445,40.7710037231445,40.7710037231445,40.7710037231445,40.7710037231445,34.4002532958984,34.4002532958984,34.4002532958984,34.4002532958984,49.471435546875,49.471435546875,49.471435546875,49.471435546875,63.8727874755859,63.8727874755859,63.8727874755859,63.8727874755859,63.8727874755859,27.0320739746094,27.0320739746094,27.0320739746094,27.0320739746094,42.2707138061523,42.2707138061523,42.2707138061523,42.2707138061523,48.6341018676758,48.6341018676758,48.6341018676758,48.6341018676758,55.332405090332,55.332405090332,55.332405090332,55.332405090332,63.7053909301758,63.7053909301758,63.7053909301758,63.7053909301758,63.7053909301758,31.3859786987305,31.3859786987305,31.3859786987305,31.3859786987305,46.1222457885742,46.1222457885742,46.1222457885742,46.1222457885742,60.0212249755859,60.0212249755859,60.0212249755859,60.0212249755859,47.2997894287109,47.2997894287109,47.2997894287109,47.2997894287109,47.2997894287109,33.3955307006836,33.3955307006836,33.3955307006836,33.3955307006836,48.4667129516602,48.4667129516602,48.4667129516602,48.4667129516602,63.3704376220703,63.3704376220703,63.3704376220703,63.3704376220703,22.67822265625,22.67822265625,22.67822265625,22.67822265625,32.8931121826172,32.8931121826172,32.8931121826172,32.8931121826172,40.5961608886719,40.5961608886719,40.5961608886719,40.5961608886719,47.7968902587891,47.7968902587891,47.7968902587891,47.7968902587891,59.3514633178711,59.3514633178711,59.3514633178711,59.3514633178711,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,27.5344772338867,27.5344772338867,27.5344772338867,27.5344772338867,42.1032867431641,42.1032867431641,42.1032867431641,42.1032867431641,56.6721496582031,56.6721496582031,56.6721496582031,56.6721496582031,63.8728256225586,63.8728256225586,63.8728256225586,63.8728256225586,63.8728256225586,30.7395401000977,30.7395401000977,30.7395401000977,30.7395401000977,44.4711151123047,44.4711151123047,44.4711151123047,44.4711151123047,59.2073287963867,59.2073287963867,59.2073287963867,59.2073287963867,63.8961944580078,63.8961944580078,63.8961944580078,63.8961944580078,63.8961944580078,30.1608963012695,30.1608963012695,30.1608963012695,30.1608963012695,44.8971099853516,44.8971099853516,44.8971099853516,44.8971099853516,59.8008346557617,59.8008346557617,59.8008346557617,59.8008346557617,48.0839309692383,48.0839309692383,48.0839309692383,48.0839309692383,48.0839309692383,33.6774597167969,33.6774597167969,33.6774597167969,33.6774597167969,48.9160995483398,48.9160995483398,48.9160995483398,48.9160995483398,63.9872817993164,63.9872817993164,63.9872817993164,63.9872817993164,23.4626083374023,23.4626083374023,23.4626083374023,23.4626083374023,33.8449249267578,33.8449249267578,33.8449249267578,33.8449249267578,47.4089889526367,47.4089889526367,47.4089889526367,47.4089889526367,62.3127136230469,62.3127136230469,62.3127136230469,62.3127136230469,21.9688949584961,21.9688949584961,21.9688949584961,21.9688949584961,21.9688949584961,32.8402404785156,32.8402404785156,32.8402404785156,32.8402404785156,47.5764541625977,47.5764541625977,47.5764541625977,47.5764541625977,61.6428909301758,61.6428909301758,61.6428909301758,61.6428909301758,41.3877868652344,41.3877868652344,41.3877868652344,41.3877868652344,41.3877868652344,33.3426208496094,33.3426208496094,33.3426208496094,33.3426208496094,48.7487182617188,48.7487182617188,48.7487182617188,48.7487182617188,63.9873580932617,63.9873580932617,63.9873580932617,63.9873580932617,63.9873580932617,26.6442718505859,26.6442718505859,26.6442718505859,26.6442718505859,42.2178268432617,42.2178268432617,42.2178268432617,42.2178268432617,57.6239242553711,57.6239242553711,57.6239242553711,57.6239242553711,63.8199615478516,63.8199615478516,63.8199615478516,63.8199615478516,63.8199615478516,30.4958038330078,30.4958038330078,30.4958038330078,30.4958038330078,45.7344970703125,45.7344970703125,45.7344970703125,45.7344970703125,60.9730834960938,60.9730834960938,60.9730834960938,60.9730834960938,37.5375137329102,37.5375137329102,37.5375137329102,37.5375137329102,37.5375137329102,23.462646484375,23.462646484375,23.462646484375,23.462646484375,36.524284362793,36.524284362793,36.524284362793,36.524284362793,51.7629241943359,51.7629241943359,51.7629241943359,51.7629241943359,63.9873809814453,63.9873809814453,63.9873809814453,63.9873809814453,63.9873809814453,28.6538391113281,28.6538391113281,28.6538391113281,28.6538391113281,43.2225952148438,43.2225952148438,43.2225952148438,43.2225952148438,57.2890319824219,57.2890319824219,57.2890319824219,57.2890319824219,63.8199844360352,63.8199844360352,63.8199844360352,63.8199844360352,63.8199844360352,30.6633377075195,30.6633377075195,30.6633377075195,30.6633377075195,45.9019775390625,45.9019775390625,45.9019775390625,45.9019775390625,60.3032760620117,60.3032760620117,60.3032760620117,60.3032760620117,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,23.0022201538086,23.0022201538086,23.0022201538086,23.0022201538086,38.2408065795898,38.2408065795898,38.2408065795898,38.2408065795898,53.1445846557617,53.1445846557617,53.1445846557617,53.1445846557617,63.8618698120117,63.8618698120117,63.8618698120117,63.8618698120117,63.8618698120117,26.3513793945312,26.3513793945312,26.3513793945312,26.3513793945312,41.5900192260742,41.5900192260742,41.5900192260742,41.5900192260742,54.6516571044922,54.6516571044922,54.6516571044922,54.6516571044922,63.6944732666016,63.6944732666016,63.6944732666016,63.6944732666016,63.6944732666016,30.7052841186523,30.7052841186523,30.7052841186523,30.7052841186523,46.1113815307617,46.1113815307617,46.1113815307617,46.1113815307617,61.349967956543,61.349967956543,61.349967956543,61.349967956543,37.2446212768555,37.2446212768555,37.2446212768555,37.2446212768555,37.2446212768555,34.3893051147461,34.3893051147461,34.3893051147461,34.3893051147461,49.1256256103516,49.1256256103516,49.1256256103516,49.1256256103516,63.8618927001953,63.8618927001953,63.8618927001953,63.8618927001953,63.8618927001953,37.5794372558594,37.5794372558594,37.5794372558594,37.5794372558594,37.5794372558594,25.0116882324219,25.0116882324219,25.0116882324219,25.0116882324219,37.7384643554688,37.7384643554688,37.7384643554688,37.7384643554688,52.9771041870117,52.9771041870117,52.9771041870117,52.9771041870117,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,27.0211868286133,27.0211868286133,27.0211868286133,27.0211868286133,40.7527084350586,40.7527084350586,40.7527084350586,40.7527084350586,55.1541137695312,55.1541137695312,55.1541137695312,55.1541137695312,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,30.7052612304688,30.7052612304688,30.7052612304688,30.7052612304688,46.1114120483398,46.1114120483398,46.1114120483398,46.1114120483398,59.1730499267578,59.1730499267578,59.1730499267578,59.1730499267578,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,30.0354385375977,30.0354385375977,30.0354385375977,30.0354385375977,43.9344177246094,43.9344177246094,43.9344177246094,43.9344177246094,57.8333969116211,57.8333969116211,57.8333969116211,57.8333969116211,58.8397979736328,58.8397979736328,58.8397979736328,58.8397979736328,58.8397979736328,31.0402450561523,31.0402450561523,31.0402450561523,31.0402450561523,45.9439697265625,45.9439697265625,45.9439697265625,45.9439697265625,60.8476943969727,60.8476943969727,60.8476943969727,60.8476943969727,33.2269668579102,33.2269668579102,33.2269668579102,33.2269668579102,33.2269668579102,33.7195205688477,33.7195205688477,33.7195205688477,33.7195205688477,48.9581604003906,48.9581604003906,48.9581604003906,48.9581604003906,63.8619384765625,63.8619384765625,63.8619384765625,63.8619384765625,63.8619384765625,30.3703765869141,30.3703765869141,30.3703765869141,30.3703765869141,45.4415588378906,45.4415588378906,45.4415588378906,45.4415588378906,59.3405914306641,59.3405914306641,59.3405914306641,59.3405914306641,45.9496994018555,45.9496994018555,45.9496994018555,45.9496994018555,45.9496994018555,33.5520782470703,33.5520782470703,33.5520782470703,33.5520782470703,47.7860260009766,47.7860260009766,47.7860260009766,47.7860260009766,62.1873779296875,62.1873779296875,62.1873779296875,62.1873779296875,23.0153350830078,23.0153350830078,23.0153350830078,23.0153350830078,23.0153350830078,36.2314071655273,36.2314071655273,36.2314071655273,36.2314071655273,51.3026428222656,51.3026428222656,51.3026428222656,51.3026428222656,63.8619613647461,63.8619613647461,63.8619613647461,63.8619613647461,63.8619613647461,28.1935043334961,28.1935043334961,28.1935043334961,28.1935043334961,43.9344635009766,43.9344635009766,43.9344635009766,43.9344635009766,57.8334426879883,57.8334426879883,57.8334426879883,57.8334426879883,59.5094604492188,59.5094604492188,59.5094604492188,59.5094604492188,59.5094604492188,31.5426635742188,31.5426635742188,31.5426635742188,31.5426635742188,45.943962097168,45.943962097168,45.943962097168,45.943962097168,61.0151443481445,61.0151443481445,61.0151443481445,61.0151443481445,32.892204284668,32.892204284668,32.892204284668,32.892204284668,32.892204284668,35.2267379760742,35.2267379760742,35.2267379760742,35.2267379760742,50.4653778076172,50.4653778076172,50.4653778076172,50.4653778076172,63.694580078125,63.694580078125,63.694580078125,63.694580078125,63.694580078125,30.8728485107422,30.8728485107422,30.8728485107422,30.8728485107422,46.4463500976562,46.4463500976562,46.4463500976562,46.4463500976562,61.6849899291992,61.6849899291992,61.6849899291992,61.6849899291992,30.213752746582,30.213752746582,30.213752746582,30.213752746582,30.213752746582,23.8395843505859,23.8395843505859,23.8395843505859,23.8395843505859,34.3894119262695,34.3894119262695,34.3894119262695,34.3894119262695,49.6280517578125,49.6280517578125,49.6280517578125,49.6280517578125,63.6945419311523,63.6945419311523,63.6945419311523,63.6945419311523,23.0023574829102,23.0023574829102,23.0023574829102,23.0023574829102,37.0687408447266,37.0687408447266,37.0687408447266,37.0687408447266,51.3026885986328,51.3026885986328,51.3026885986328,51.3026885986328,63.8620071411133,63.8620071411133,63.8620071411133,63.8620071411133,63.8620071411133,24.8443984985352,24.8443984985352,24.8443984985352,24.8443984985352,39.91552734375,39.91552734375,39.91552734375,39.91552734375,54.8193054199219,54.8193054199219,54.8193054199219,54.8193054199219,63.8620147705078,63.8620147705078,63.8620147705078,63.8620147705078,63.8620147705078,30.2030487060547,30.2030487060547,30.2030487060547,30.2030487060547,45.7765502929688,45.7765502929688,45.7765502929688,45.7765502929688,60.6803283691406,60.6803283691406,60.6803283691406,60.6803283691406,36.4077377319336,36.4077377319336,36.4077377319336,36.4077377319336,36.4077377319336,34.2218246459961,34.2218246459961,34.2218246459961,34.2218246459961,49.6279220581055,49.6279220581055,49.6279220581055,49.6279220581055,63.694465637207,63.694465637207,63.694465637207,63.694465637207,63.694465637207,31.0401916503906,31.0401916503906,31.0401916503906,31.0401916503906,45.9439163208008,45.9439163208008,45.9439163208008,45.9439163208008,61.0150985717773,61.0150985717773,61.0150985717773,61.0150985717773,33.5617218017578,33.5617218017578,33.5617218017578,33.5617218017578,33.5617218017578,34.2218399047852,34.2218399047852,34.2218399047852,34.2218399047852,49.2930755615234,49.2930755615234,49.2930755615234,49.2930755615234,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,31.040153503418,31.040153503418,31.040153503418,31.040153503418,46.2787933349609,46.2787933349609,46.2787933349609,46.2787933349609,60.6801452636719,60.6801452636719,60.6801452636719,60.6801452636719,36.4076080322266,36.4076080322266,36.4076080322266,36.4076080322266,36.4076080322266,33.7195358276367,33.7195358276367,33.7195358276367,33.7195358276367,48.4557495117188,48.4557495117188,48.4557495117188,48.4557495117188,57.4984588623047,57.4984588623047,57.4984588623047,57.4984588623047,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,23.0022583007812,23.0022583007812,23.0022583007812,23.0022583007812,38.575813293457,38.575813293457,38.575813293457,38.575813293457,53.4795379638672,53.4795379638672,53.4795379638672,53.4795379638672,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,28.6958236694336,28.6958236694336,28.6958236694336,28.6958236694336,43.9344635009766,43.9344635009766,43.9344635009766,43.9344635009766,56.4580230712891,56.4580230712891,56.4580230712891,56.4580230712891,63.9936141967773,63.9936141967773,63.9936141967773,63.9936141967773,63.9936141967773,29.2977981567383,29.2977981567383,29.2977981567383,29.2977981567383,38.675422668457,38.675422668457,38.675422668457,38.675422668457,42.0245742797852,42.0245742797852,42.0245742797852,42.0245742797852,48.555419921875,48.555419921875,48.555419921875,48.555419921875,62.4543991088867,62.4543991088867,62.4543991088867,62.4543991088867,63.7941665649414,63.7941665649414,63.7941665649414,63.7941665649414,63.7941665649414,30.6375198364258,30.6375198364258,30.6375198364258,30.6375198364258,45.5412445068359,45.5412445068359,45.5412445068359,45.5412445068359,60.6124267578125,60.6124267578125,60.6124267578125,60.6124267578125,59.7764739990234,59.7764739990234,59.7764739990234,59.7764739990234,59.7764739990234,30.8049850463867,30.8049850463867,30.8049850463867,30.8049850463867,45.7086563110352,45.7086563110352,45.7086563110352,45.7086563110352,60.9473495483398,60.9473495483398,60.9473495483398,60.9473495483398,54.2521438598633,54.2521438598633,54.2521438598633,54.2521438598633,54.2521438598633,32.64697265625,32.64697265625,32.64697265625,32.64697265625,47.7181549072266,47.7181549072266,47.7181549072266,47.7181549072266,63.1242523193359,63.1242523193359,63.1242523193359,63.1242523193359,36.1725006103516,36.1725006103516,36.1725006103516,36.1725006103516,36.1725006103516,35.1588439941406,35.1588439941406,35.1588439941406,35.1588439941406,49.5601959228516,49.5601959228516,49.5601959228516,49.5601959228516,63.9616012573242,63.9616012573242,63.9616012573242,63.9616012573242,63.9616012573242,25.2789077758789,25.2789077758789,25.2789077758789,25.2789077758789,38.8429718017578,38.8429718017578,38.8429718017578,38.8429718017578,53.0768127441406,53.0768127441406,53.0768127441406,53.0768127441406,63.7942047119141,63.7942047119141,63.7942047119141,63.7942047119141,63.7942047119141,30.3025894165039,30.3025894165039,30.3025894165039,30.3025894165039,45.3738250732422,45.3738250732422,45.3738250732422,45.3738250732422,60.2774963378906,60.2774963378906,60.2774963378906,60.2774963378906,59.6091079711914,59.6091079711914,59.6091079711914,59.6091079711914,59.6091079711914,31.1398849487305,31.1398849487305,31.1398849487305,31.1398849487305,46.5460357666016,46.5460357666016,46.5460357666016,46.5460357666016,61.4497604370117,61.4497604370117,61.4497604370117,61.4497604370117,52.7455444335938,52.7455444335938,52.7455444335938,52.7455444335938,52.7455444335938,32.9819259643555,32.9819259643555,32.9819259643555,32.9819259643555,48.0531616210938,48.0531616210938,48.0531616210938,48.0531616210938,63.2918014526367,63.2918014526367,63.2918014526367,63.2918014526367,39.0184097290039,39.0184097290039,39.0184097290039,39.0184097290039,39.0184097290039,34.6565093994141,34.6565093994141,34.6565093994141,34.6565093994141,49.7277450561523,49.7277450561523,49.7277450561523,49.7277450561523,62.2870635986328,62.2870635986328,62.2870635986328,62.2870635986328,63.9616394042969,63.9616394042969,63.9616394042969,63.9616394042969,63.9616394042969,55.0892181396484,55.0892181396484,55.0892181396484,55.0892181396484,55.0892181396484,31.642333984375,31.642333984375,31.642333984375,31.642333984375,45.8762283325195,45.8762283325195,45.8762283325195,45.8762283325195,60.779899597168,60.779899597168,60.779899597168,60.779899597168,60.446159362793,60.446159362793,60.446159362793,60.446159362793,60.446159362793,29.9677124023438,29.9677124023438,29.9677124023438,29.9677124023438,43.364372253418,43.364372253418,43.364372253418,43.364372253418,58.2680969238281,58.2680969238281,58.2680969238281,58.2680969238281,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,30.6376037597656,30.6376037597656,30.6376037597656,30.6376037597656,45.8761901855469,45.8761901855469,45.8761901855469,45.8761901855469,60.9474258422852,60.9474258422852,60.9474258422852,60.9474258422852,53.2477951049805,53.2477951049805,53.2477951049805,53.2477951049805,53.2477951049805,32.8145065307617,32.8145065307617,32.8145065307617,32.8145065307617,47.8857421875,47.8857421875,47.8857421875,47.8857421875,63.4592437744141,63.4592437744141,63.4592437744141,63.4592437744141,29.3090057373047,29.3090057373047,29.3090057373047,29.3090057373047,29.3090057373047,32.8143539428711,32.8143539428711,32.8143539428711,32.8143539428711,48.0530471801758,48.0530471801758,48.0530471801758,48.0530471801758,63.1242294311523,63.1242294311523,63.1242294311523,63.1242294311523,38.5160827636719,38.5160827636719,38.5160827636719,38.5160827636719,38.5160827636719,34.1540756225586,34.1540756225586,34.1540756225586,34.1540756225586,49.2252578735352,49.2252578735352,49.2252578735352,49.2252578735352,63.9615249633789,63.9615249633789,63.9615249633789,63.9615249633789,63.9615249633789,25.2788314819336,25.2788314819336,25.2788314819336,25.2788314819336,40.684928894043,40.684928894043,40.684928894043,40.684928894043,56.0910263061523,56.0910263061523,56.0910263061523,56.0910263061523,63.9615325927734,63.9615325927734,63.9615325927734,63.9615325927734,63.9615325927734,31.4747161865234,31.4747161865234,31.4747161865234,31.4747161865234,46.0435256958008,46.0435256958008,46.0435256958008,46.0435256958008,60.9472503662109,60.9472503662109,60.9472503662109,60.9472503662109,51.4062271118164,51.4062271118164,51.4062271118164,51.4062271118164,51.4062271118164,27.6231994628906,27.6231994628906,27.6231994628906,27.6231994628906,30.8048934936523,30.8048934936523,30.8048934936523,30.8048934936523,45.7086715698242,45.7086715698242,45.7086715698242,45.7086715698242,59.7750549316406,59.7750549316406,59.7750549316406,59.7750549316406,63.7941436767578,63.7941436767578,63.7941436767578,63.7941436767578,63.7941436767578,31.3072738647461,31.3072738647461,31.3072738647461,31.3072738647461,45.0388488769531,45.0388488769531,45.0388488769531,45.0388488769531,59.7751159667969,59.7751159667969,59.7751159667969,59.7751159667969,59.6090469360352,59.6090469360352,59.6090469360352,59.6090469360352,59.6090469360352,30.9724197387695,30.9724197387695,30.9724197387695,30.9724197387695,45.7086868286133,45.7086868286133,45.7086868286133,45.7086868286133,60.1100387573242,60.1100387573242,60.1100387573242,60.1100387573242,57.6002044677734,57.6002044677734,57.6002044677734,57.6002044677734,57.6002044677734,32.3120880126953,32.3120880126953,32.3120880126953,32.3120880126953,46.5459823608398,46.5459823608398,46.5459823608398,46.5459823608398,61.1147918701172,61.1147918701172,61.1147918701172,61.1147918701172,48.7277908325195,48.7277908325195,48.7277908325195,48.7277908325195,48.7277908325195,33.3167877197266,33.3167877197266,33.3167877197266,33.3167877197266,48.5554275512695,48.5554275512695,48.5554275512695,48.5554275512695,63.7941207885742,63.7941207885742,63.7941207885742,63.7941207885742,26.2956390380859,26.2956390380859,26.2956390380859,26.2956390380859,26.2956390380859,35.8287124633789,35.8287124633789,35.8287124633789,35.8287124633789,50.3975219726562,50.3975219726562,50.3975219726562,50.3975219726562,63.9615859985352,63.9615859985352,63.9615859985352,63.9615859985352,63.9615859985352,24.4415512084961,24.4415512084961,24.4415512084961,24.4415512084961,39.345329284668,39.345329284668,39.345329284668,39.345329284668,54.7513732910156,54.7513732910156,54.7513732910156,54.7513732910156,63.9615936279297,63.9615936279297,63.9615936279297,63.9615936279297,63.9615936279297,30.6375427246094,30.6375427246094,30.6375427246094,30.6375427246094,45.0388946533203,45.0388946533203,45.0388946533203,45.0388946533203,60.2774810791016,60.2774810791016,60.2774810791016,60.2774810791016,63.7941970825195,63.7941970825195,63.7941970825195,63.7941970825195,63.7941970825195,31.3073806762695,31.3073806762695,31.3073806762695,31.3073806762695,46.7134780883789,46.7134780883789,46.7134780883789,46.7134780883789,61.4496917724609,61.4496917724609,61.4496917724609,61.4496917724609,47.5559997558594,47.5559997558594,47.5559997558594,47.5559997558594,47.5559997558594,32.8145065307617,32.8145065307617,32.8145065307617,32.8145065307617,48.2206039428711,48.2206039428711,48.2206039428711,48.2206039428711,63.6266479492188,63.6266479492188,63.6266479492188,63.6266479492188,37.5117568969727,37.5117568969727,37.5117568969727,37.5117568969727,37.5117568969727,33.9867172241211,33.9867172241211,33.9867172241211,33.9867172241211,49.5602722167969,49.5602722167969,49.5602722167969,49.5602722167969,63.9616241455078,63.9616241455078,63.9616241455078,63.9616241455078,63.9616241455078,24.7765579223633,24.7765579223633,24.7765579223633,24.7765579223633,40.1826553344727,40.1826553344727,40.1826553344727,40.1826553344727,55.7561569213867,55.7561569213867,55.7561569213867,55.7561569213867,63.9616317749023,63.9616317749023,63.9616317749023,63.9616317749023,63.9616317749023,29.6328353881836,29.6328353881836,29.6328353881836,29.6328353881836,44.3691024780273,44.3691024780273,44.3691024780273,44.3691024780273,59.9426574707031,59.9426574707031,59.9426574707031,59.9426574707031,63.9616394042969,63.9616394042969,63.9616394042969,63.9616394042969,63.9616394042969,49.0626678466797,49.0626678466797,49.0626678466797,49.0626678466797,49.0626678466797,31.3074188232422,31.3074188232422,31.3074188232422,31.3074188232422,45.7087707519531,45.7087707519531,45.7087707519531,45.7087707519531,60.1101226806641,60.1101226806641,60.1101226806641,60.1101226806641,59.2743301391602,59.2743301391602,59.2743301391602,59.2743301391602,59.2743301391602,31.1399154663086,31.1399154663086,31.1399154663086,31.1399154663086,45.7087249755859,45.7087249755859,45.7087249755859,45.7087249755859,60.6124496459961,60.6124496459961,60.6124496459961,60.6124496459961,63.9616546630859,63.9616546630859,63.9616546630859,63.9616546630859,63.9616546630859,21.762321472168,21.762321472168,21.762321472168,21.762321472168,32.3121795654297,32.3121795654297,32.3121795654297,32.3121795654297,42.6944961547852,42.6944961547852,42.6944961547852,42.6944961547852,54.0816116333008,54.0816116333008,54.0816116333008,54.0816116333008,63.9616622924805,63.9616622924805,63.9616622924805,63.9616622924805,63.9616622924805,24.6091384887695,24.6091384887695,24.6091384887695,24.6091384887695,39.1779479980469,39.1779479980469,39.1779479980469,39.1779479980469,53.0769271850586,53.0769271850586,53.0769271850586,53.0769271850586,63.961669921875,63.961669921875,63.961669921875,63.961669921875,63.961669921875,27.6232223510742,27.6232223510742,27.6232223510742,27.6232223510742,41.6896591186523,41.6896591186523,41.6896591186523,41.6896591186523,53.7466049194336,53.7466049194336,53.7466049194336,53.7466049194336,63.9615173339844,63.9615173339844,63.9615173339844,63.9615173339844,63.9615173339844,30.3024978637695,30.3024978637695,30.3024978637695,30.3024978637695,44.3689346313477,44.3689346313477,44.3689346313477,44.3689346313477,58.937744140625,58.937744140625,58.937744140625,58.937744140625,63.7941207885742,63.7941207885742,63.7941207885742,63.7941207885742,63.7941207885742,31.3072509765625,31.3072509765625,31.3072509765625,31.3072509765625,46.7133483886719,46.7133483886719,46.7133483886719,46.7133483886719,59.6075820922852,59.6075820922852,59.6075820922852,59.6075820922852,63.9615325927734,63.9615325927734,63.9615325927734,63.9615325927734,63.9615325927734,25.4462966918945,25.4462966918945,25.4462966918945,25.4462966918945,40.3733825683594,40.3733825683594,40.3733825683594,40.3733825683594,54.7746810913086,54.7746810913086,54.7746810913086,54.7746810913086,57.2865982055664,57.2865982055664,57.2865982055664,57.2865982055664,63.817497253418,63.817497253418,63.817497253418,63.817497253418,63.817497253418,30.2496032714844,30.2496032714844,30.2496032714844,30.2496032714844,45.1532745361328,45.1532745361328,45.1532745361328,45.1532745361328,59.8895950317383,59.8895950317383,59.8895950317383,59.8895950317383,60.3930892944336,60.3930892944336,60.3930892944336,60.3930892944336,60.3930892944336,30.4170150756836,30.4170150756836,30.4170150756836,30.4170150756836,45.1533355712891,45.1533355712891,45.1533355712891,45.1533355712891,60.5593795776367,60.5593795776367,60.5593795776367,60.5593795776367,58.0494384765625,58.0494384765625,58.0494384765625,58.0494384765625,58.0494384765625,32.0915985107422,32.0915985107422,32.0915985107422,32.0915985107422,46.3255462646484,46.3255462646484,46.3255462646484,46.3255462646484,61.8990478515625,61.8990478515625,61.8990478515625,61.8990478515625,46.1637496948242,46.1637496948242,46.1637496948242,46.1637496948242,46.1637496948242,33.431266784668,33.431266784668,33.431266784668,33.431266784668,48.6699600219727,48.6699600219727,48.6699600219727,48.6699600219727,63.9085998535156,63.9085998535156,63.9085998535156,63.9085998535156,63.9085998535156,24.8909378051758,24.8909378051758,24.8909378051758,24.8909378051758,39.4597473144531,39.4597473144531,39.4597473144531,39.4597473144531,54.3634719848633,54.3634719848633,54.3634719848633,54.3634719848633,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,29.2448425292969,29.2448425292969,29.2448425292969,29.2448425292969,42.473991394043,42.473991394043,42.473991394043,42.473991394043,57.7126312255859,57.7126312255859,57.7126312255859,57.7126312255859,63.7412109375,63.7412109375,63.7412109375,63.7412109375,63.7412109375,30.0821380615234,30.0821380615234,30.0821380615234,30.0821380615234,45.1533203125,45.1533203125,45.1533203125,45.1533203125,60.0570983886719,60.0570983886719,60.0570983886719,60.0570983886719,59.8909225463867,59.8909225463867,59.8909225463867,59.8909225463867,59.8909225463867,31.5892639160156,31.5892639160156,31.5892639160156,31.5892639160156,46.6604995727539,46.6604995727539,46.6604995727539,46.6604995727539,61.5642242431641,61.5642242431641,61.5642242431641,61.5642242431641,50.0140838623047,50.0140838623047,50.0140838623047,50.0140838623047,50.0140838623047,32.5940704345703,32.5940704345703,32.5940704345703,32.5940704345703,47.3302841186523,47.3302841186523,47.3302841186523,47.3302841186523,62.0666046142578,62.0666046142578,62.0666046142578,62.0666046142578,47.3356246948242,47.3356246948242,47.3356246948242,47.3356246948242,47.3356246948242,33.7662811279297,33.7662811279297,33.7662811279297,33.7662811279297,47.8326644897461,47.8326644897461,47.8326644897461,47.8326644897461,62.0665588378906,62.0665588378906,62.0665588378906,62.0665588378906,44.9919738769531,44.9919738769531,44.9919738769531,44.9919738769531,44.9919738769531,33.4313201904297,33.4313201904297,33.4313201904297,33.4313201904297,47.4977569580078,47.4977569580078,47.4977569580078,47.4977569580078,62.2340774536133,62.2340774536133,62.2340774536133,62.2340774536133,42.3135147094727,42.3135147094727,42.3135147094727,42.3135147094727,42.3135147094727,33.2639236450195,33.2639236450195,33.2639236450195,33.2639236450195,47.4977645874023,47.4977645874023,47.4977645874023,47.4977645874023,60.8943710327148,60.8943710327148,60.8943710327148,60.8943710327148,58.2169189453125,58.2169189453125,58.2169189453125,58.2169189453125,58.2169189453125,29.7472686767578,29.7472686767578,29.7472686767578,29.7472686767578,32.4265899658203,32.4265899658203,32.4265899658203,32.4265899658203,43.4787902832031,43.4787902832031,43.4787902832031,43.4787902832031,57.0429077148438,57.0429077148438,57.0429077148438,57.0429077148438,63.7412643432617,63.7412643432617,63.7412643432617,63.7412643432617,63.7412643432617,30.417106628418,30.417106628418,30.417106628418,30.417106628418,44.3160858154297,44.3160858154297,44.3160858154297,44.3160858154297,57.3777770996094,57.3777770996094,57.3777770996094,57.3777770996094,63.9086761474609,63.9086761474609,63.9086761474609,63.9086761474609,63.9086761474609,26.9005584716797,26.9005584716797,26.9005584716797,26.9005584716797,41.8042831420898,41.8042831420898,41.8042831420898,41.8042831420898,56.3730392456055,56.3730392456055,56.3730392456055,56.3730392456055,63.9086837768555,63.9086837768555,63.9086837768555,63.9086837768555,63.9086837768555,25.058479309082,25.058479309082,25.058479309082,25.058479309082,36.4455947875977,36.4455947875977,36.4455947875977,36.4455947875977,48.1676254272461,48.1676254272461,48.1676254272461,48.1676254272461,60.0571136474609,60.0571136474609,60.0571136474609,60.0571136474609,63.7412872314453,63.7412872314453,63.7412872314453,63.7412872314453,63.7412872314453,30.7520980834961,30.7520980834961,30.7520980834961,30.7520980834961,45.9906845092773,45.9906845092773,45.9906845092773,45.9906845092773,60.39208984375,60.39208984375,60.39208984375,60.39208984375,56.8777236938477,56.8777236938477,56.8777236938477,56.8777236938477,56.8777236938477,29.7471466064453,29.7471466064453,29.7471466064453,29.7471466064453,44.98583984375,44.98583984375,44.98583984375,44.98583984375,60.3918838500977,60.3918838500977,60.3918838500977,60.3918838500977,55.7057418823242,55.7057418823242,55.7057418823242,55.7057418823242,55.7057418823242,32.0916137695312,32.0916137695312,32.0916137695312,32.0916137695312,47.6651153564453,47.6651153564453,47.6651153564453,47.6651153564453,61.7316055297852,61.7316055297852,61.7316055297852,61.7316055297852,46.1637115478516,46.1637115478516,46.1637115478516,46.1637115478516,46.1637115478516,33.7661972045898,33.7661972045898,33.7661972045898,33.7661972045898,48.5024642944336,48.5024642944336,48.5024642944336,48.5024642944336,63.2387313842773,63.2387313842773,63.2387313842773,63.2387313842773,31.2647476196289,31.2647476196289,31.2647476196289,31.2647476196289,31.2647476196289,29.4122543334961,29.4122543334961,29.4122543334961,29.4122543334961,34.2685241699219,34.2685241699219,34.2685241699219,34.2685241699219,48.5024719238281,48.5024719238281,48.5024719238281,48.5024719238281,63.0712280273438,63.0712280273438,63.0712280273438,63.0712280273438,45.3267059326172,45.3267059326172,45.3267059326172,45.3267059326172,45.3267059326172,32.7614135742188,32.7614135742188,32.7614135742188,32.7614135742188,47.6651382446289,47.6651382446289,47.6651382446289,47.6651382446289,61.3967132568359,61.3967132568359,61.3967132568359,61.3967132568359,56.8776016235352,56.8776016235352,56.8776016235352,56.8776016235352,56.8776016235352,32.2590484619141,32.2590484619141,32.2590484619141,32.2590484619141,47.3302841186523,47.3302841186523,47.3302841186523,47.3302841186523,62.5688705444336,62.5688705444336,62.5688705444336,62.5688705444336,47.8377838134766,47.8377838134766,47.8377838134766,47.8377838134766,47.8377838134766,33.4313125610352,33.4313125610352,33.4313125610352,33.4313125610352,48.6698989868164,48.6698989868164,48.6698989868164,48.6698989868164,63.2387084960938,63.2387084960938,63.2387084960938,63.2387084960938,32.6040115356445,32.6040115356445,32.6040115356445,32.6040115356445,32.6040115356445,35.2733535766602,35.2733535766602,35.2733535766602,35.2733535766602,49.8421630859375,49.8421630859375,49.8421630859375,49.8421630859375,63.9085998535156,63.9085998535156,63.9085998535156,63.9085998535156,63.9085998535156,24.3886184692383,24.3886184692383,24.3886184692383,24.3886184692383,39.7947158813477,39.7947158813477,39.7947158813477,39.7947158813477,55.200813293457,55.200813293457,55.200813293457,55.200813293457,63.7412033081055,63.7412033081055,63.7412033081055,63.7412033081055,63.7412033081055,31.2543869018555,31.2543869018555,31.2543869018555,31.2543869018555,46.4930267333984,46.4930267333984,46.4930267333984,46.4930267333984,60.8943786621094,60.8943786621094,60.8943786621094,60.8943786621094,55.8732147216797,55.8732147216797,55.8732147216797,55.8732147216797,55.8732147216797,32.5940017700195,32.5940017700195,32.5940017700195,32.5940017700195,47.6652374267578,47.6652374267578,47.6652374267578,47.6652374267578,62.2340469360352,62.2340469360352,62.2340469360352,62.2340469360352,40.8068466186523,40.8068466186523,40.8068466186523,40.8068466186523,40.8068466186523,34.2686386108398,34.2686386108398,34.2686386108398,34.2686386108398,49.1723098754883,49.1723098754883,49.1723098754883,49.1723098754883,63.9086303710938,63.9086303710938,63.9086303710938,63.9086303710938,63.9086303710938,26.565544128418,26.565544128418,26.565544128418,26.565544128418,40.2970657348633,40.2970657348633,40.2970657348633,40.2970657348633,54.8659286499023,54.8659286499023,54.8659286499023,54.8659286499023,63.7412338256836,63.7412338256836,63.7412338256836,63.7412338256836,63.7412338256836,30.4171295166016,30.4171295166016,30.4171295166016,30.4171295166016,45.6557159423828,45.6557159423828,45.6557159423828,45.6557159423828,60.0570678710938,60.0570678710938,60.0570678710938,60.0570678710938,59.2213287353516,59.2213287353516,59.2213287353516,59.2213287353516,59.2213287353516,31.924201965332,31.924201965332,31.924201965332,31.924201965332,46.325553894043,46.325553894043,46.325553894043,46.325553894043,61.3967361450195,61.3967361450195,61.3967361450195,61.3967361450195,46.3312149047852,46.3312149047852,46.3312149047852,46.3312149047852,46.3312149047852,32.928955078125,32.928955078125,32.928955078125,32.928955078125,47.1628494262695,47.1628494262695,47.1628494262695,47.1628494262695,61.7317123413086,61.7317123413086,61.7317123413086,61.7317123413086,63.9086608886719,63.9086608886719,63.9086608886719,63.9086608886719,63.9086608886719,23.3839340209961,23.3839340209961,23.3839340209961,23.3839340209961,36.4456253051758,36.4456253051758,36.4456253051758,36.4456253051758,51.3493499755859,51.3493499755859,51.3493499755859,51.3493499755859,63.9086685180664,63.9086685180664,63.9086685180664,63.9086685180664,63.9086685180664,27.0679550170898,27.0679550170898,27.0679550170898,27.0679550170898,41.3019027709961,41.3019027709961,41.3019027709961,41.3019027709961,56.0381164550781,56.0381164550781,56.0381164550781,56.0381164550781,63.7412719726562,63.7412719726562,63.7412719726562,63.7412719726562,63.7412719726562,30.5845718383789,30.5845718383789,30.5845718383789,30.5845718383789,44.3160934448242,44.3160934448242,44.3160934448242,44.3160934448242,59.3872756958008,59.3872756958008,59.3872756958008,59.3872756958008,60.393196105957,60.393196105957,60.393196105957,60.393196105957,60.393196105957,31.0869522094727,31.0869522094727,31.0869522094727,31.0869522094727,45.8232727050781,45.8232727050781,45.8232727050781,45.8232727050781,59.8897094726562,59.8897094726562,59.8897094726562,59.8897094726562,58.7191619873047,58.7191619873047,58.7191619873047,58.7191619873047,58.7191619873047,32.259162902832,32.259162902832,32.259162902832,32.259162902832,47.6652603149414,47.6652603149414,47.6652603149414,47.6652603149414,61.5642395019531,61.5642395019531,61.5642395019531,61.5642395019531,56.710319519043,56.710319519043,56.710319519043,56.710319519043,56.710319519043,30.3114929199219,30.3114929199219,30.3114929199219,30.3114929199219,45.7175903320312,45.7175903320312,45.7175903320312,45.7175903320312,60.9561767578125,60.9561767578125,60.9561767578125,60.9561767578125,55.4727020263672,55.4727020263672,55.4727020263672,55.4727020263672,55.4727020263672,32.6959915161133,32.6959915161133,32.6959915161133,32.6959915161133,48.1020889282227,48.1020889282227,48.1020889282227,48.1020889282227,62.6708450317383,62.6708450317383,62.6708450317383,62.6708450317383,39.4020919799805,39.4020919799805,39.4020919799805,39.4020919799805,39.4020919799805,33.8681488037109,33.8681488037109,33.8681488037109,33.8681488037109,47.9345855712891,47.9345855712891,47.9345855712891,47.9345855712891,62.6709060668945,62.6709060668945,62.6709060668945,62.6709060668945,37.3932495117188,37.3932495117188,37.3932495117188,37.3932495117188,37.3932495117188,34.5379867553711,34.5379867553711,34.5379867553711,34.5379867553711,37.384765625,37.384765625,37.384765625,37.384765625,48.7719345092773,48.7719345092773,48.7719345092773,48.7719345092773,63.8431167602539,63.8431167602539,63.8431167602539,63.8431167602539,63.8431167602539,22.9964981079102,22.9964981079102,22.9964981079102,22.9964981079102,22.9964981079102,35.7101974487305,35.7101974487305,35.7101974487305,35.7101974487305,48.9393997192383,48.9393997192383,48.9393997192383,48.9393997192383,63.8430709838867,63.8430709838867,63.8430709838867,63.8430709838867,37.5606689453125,37.5606689453125,37.5606689453125,37.5606689453125,37.5606689453125,34.8729705810547,34.8729705810547,34.8729705810547,34.8729705810547,49.7766952514648,49.7766952514648,49.7766952514648,49.7766952514648,63.843132019043,63.843132019043,63.843132019043,63.843132019043,63.843132019043,23.6533203125,23.6533203125,23.6533203125,23.6533203125,38.0546722412109,38.0546722412109,38.0546722412109,38.0546722412109,52.6234817504883,52.6234817504883,52.6234817504883,52.6234817504883,63.6757354736328,63.6757354736328,63.6757354736328,63.6757354736328,63.6757354736328,31.0214080810547,31.0214080810547,31.0214080810547,31.0214080810547,46.092643737793,46.092643737793,46.092643737793,46.092643737793,61.4986877441406,61.4986877441406,61.4986877441406,61.4986877441406,47.6049423217773,47.6049423217773,47.6049423217773,47.6049423217773,47.6049423217773,33.8682479858398,33.8682479858398,33.8682479858398,33.8682479858398,48.6044616699219,48.6044616699219,48.6044616699219,48.6044616699219,63.5082397460938,63.5082397460938,63.5082397460938,63.5082397460938,29.6927032470703,29.6927032470703,29.6927032470703,29.6927032470703,29.6927032470703,36.2126083374023,36.2126083374023,36.2126083374023,36.2126083374023,51.2838439941406,51.2838439941406,51.2838439941406,51.2838439941406,63.8431625366211,63.8431625366211,63.8431625366211,63.8431625366211,63.8431625366211,24.825553894043,24.825553894043,24.825553894043,24.825553894043,40.399055480957,40.399055480957,40.399055480957,40.399055480957,55.6377487182617,55.6377487182617,55.6377487182617,55.6377487182617,63.6757659912109,63.6757659912109,63.6757659912109,63.6757659912109,63.6757659912109,31.5238647460938,31.5238647460938,31.5238647460938,31.5238647460938,46.762451171875,46.762451171875,46.762451171875,46.762451171875,61.6661758422852,61.6661758422852,61.6661758422852,61.6661758422852,48.7768020629883,48.7768020629883,48.7768020629883,48.7768020629883,48.7768020629883,33.0309371948242,33.0309371948242,33.0309371948242,33.0309371948242,48.4370346069336,48.4370346069336,48.4370346069336,48.4370346069336,63.6756744384766,63.6756744384766,63.6756744384766,63.6756744384766,27.5164794921875,27.5164794921875,27.5164794921875,27.5164794921875,27.5164794921875,35.0404891967773,35.0404891967773,35.0404891967773,35.0404891967773,49.4418411254883,49.4418411254883,49.4418411254883,49.4418411254883,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,29.5143966674805,29.5143966674805,29.5143966674805,29.5143966674805,45.0878982543945,45.0878982543945,45.0878982543945,45.0878982543945,60.4939956665039,60.4939956665039,60.4939956665039,60.4939956665039,57.6492462158203,57.6492462158203,57.6492462158203,57.6492462158203,57.6492462158203,32.6960983276367,32.6960983276367,32.6960983276367,32.6960983276367,47.7672805786133,47.7672805786133,47.7672805786133,47.7672805786133,62.6709518432617,62.6709518432617,62.6709518432617,62.6709518432617,42.7502822875977,42.7502822875977,42.7502822875977,42.7502822875977,42.7502822875977,25.8302917480469,25.8302917480469,25.8302917480469,25.8302917480469,35.0405120849609,35.0405120849609,35.0405120849609,35.0405120849609,47.2649154663086,47.2649154663086,47.2649154663086,47.2649154663086,62.5035018920898,62.5035018920898,62.5035018920898,62.5035018920898,43.4199066162109,43.4199066162109,43.4199066162109,43.4199066162109,43.4199066162109,33.7008590698242,33.7008590698242,33.7008590698242,33.7008590698242,48.1022109985352,48.1022109985352,48.1022109985352,48.1022109985352,62.8384246826172,62.8384246826172,62.8384246826172,62.8384246826172,46.7679977416992,46.7679977416992,46.7679977416992,46.7679977416992,46.7679977416992,33.3659515380859,33.3659515380859,33.3659515380859,33.3659515380859,48.7719955444336,48.7719955444336,48.7719955444336,48.7719955444336,63.6757736206055,63.6757736206055,63.6757736206055,63.6757736206055,34.2126922607422,34.2126922607422,34.2126922607422,34.2126922607422,34.2126922607422,35.8777694702148,35.8777694702148,35.8777694702148,35.8777694702148,50.1116638183594,50.1116638183594,50.1116638183594,50.1116638183594,63.8432388305664,63.8432388305664,63.8432388305664,63.8432388305664,63.8432388305664,30.8541030883789,30.8541030883789,30.8541030883789,30.8541030883789,45.5903167724609,45.5903167724609,45.5903167724609,45.5903167724609,60.6615524291992,60.6615524291992,60.6615524291992,60.6615524291992,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,49.9292831420898,49.9292831420898,49.9292831420898,49.9292831420898,49.9292831420898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,28.3227157592773,28.3227157592773,28.3227157592773,28.3227157592773,43.8962173461914,43.8962173461914,43.8962173461914,43.8962173461914,59.1349105834961,59.1349105834961,59.1349105834961,59.1349105834961,46.7485504150391,46.7485504150391,46.7485504150391,46.7485504150391,46.7485504150391,32.8440780639648,32.8440780639648,32.8440780639648,32.8440780639648,47.5803451538086,47.5803451538086,47.5803451538086,47.5803451538086,62.6514739990234,62.6514739990234,62.6514739990234,62.6514739990234,63.8237838745117,63.8237838745117,63.8237838745117,63.8237838745117,63.8237838745117,22.9640884399414,22.9640884399414,22.9640884399414,22.9640884399414,38.0352172851562,38.0352172851562,38.0352172851562,38.0352172851562,53.1064529418945,53.1064529418945,53.1064529418945,53.1064529418945,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,28.1552810668945,28.1552810668945,28.1552810668945,28.1552810668945,42.8914947509766,42.8914947509766,42.8914947509766,42.8914947509766,57.627815246582,57.627815246582,57.627815246582,57.627815246582,60.1409072875977,60.1409072875977,60.1409072875977,60.1409072875977,60.1409072875977,30.4996948242188,30.4996948242188,30.4996948242188,30.4996948242188,45.73828125,45.73828125,45.73828125,45.73828125,59.8047714233398,59.8047714233398,59.8047714233398,59.8047714233398,50.2640686035156,50.2640686035156,50.2640686035156,50.2640686035156,50.2640686035156,32.844108581543,32.844108581543,32.844108581543,32.844108581543,48.4176635742188,48.4176635742188,48.4176635742188,48.4176635742188,63.8237609863281,63.8237609863281,63.8237609863281,63.8237609863281,22.9641189575195,22.9641189575195,22.9641189575195,22.9641189575195,38.3702163696289,38.3702163696289,38.3702163696289,38.3702163696289,53.2739410400391,53.2739410400391,53.2739410400391,53.2739410400391,63.8238220214844,63.8238220214844,63.8238220214844,63.8238220214844,63.8238220214844,30.4997177124023,30.4997177124023,30.4997177124023,30.4997177124023,45.4033889770508,45.4033889770508,45.4033889770508,45.4033889770508,60.9769439697266,60.9769439697266,60.9769439697266,60.9769439697266,35.1977157592773,35.1977157592773,35.1977157592773,35.1977157592773,35.1977157592773,34.6861114501953,34.6861114501953,34.6861114501953,34.6861114501953,49.7572937011719,49.7572937011719,49.7572937011719,49.7572937011719,63.8237838745117,63.8237838745117,63.8237838745117,63.8237838745117,22.9641418457031,22.9641418457031,22.9641418457031,22.9641418457031,38.2027282714844,38.2027282714844,38.2027282714844,38.2027282714844,52.604133605957,52.604133605957,52.604133605957,52.604133605957,63.823844909668,63.823844909668,63.823844909668,63.823844909668,63.823844909668,31.0020599365234,31.0020599365234,31.0020599365234,31.0020599365234,45.7383804321289,45.7383804321289,45.7383804321289,45.7383804321289,61.1444244384766,61.1444244384766,61.1444244384766,61.1444244384766,44.5723724365234,44.5723724365234,44.5723724365234,44.5723724365234,44.5723724365234,33.5139312744141,33.5139312744141,33.5139312744141,33.5139312744141,48.752571105957,48.752571105957,48.752571105957,48.752571105957,62.3166351318359,62.3166351318359,62.3166351318359,62.3166351318359,28.3341751098633,28.3341751098633,28.3341751098633,28.3341751098633,28.3341751098633,35.5234832763672,35.5234832763672,35.5234832763672,35.5234832763672,51.0969848632812,51.0969848632812,51.0969848632812,51.0969848632812,63.9912719726562,63.9912719726562,63.9912719726562,63.9912719726562,63.9912719726562,25.6434936523438,25.6434936523438,25.6434936523438,25.6434936523438,40.2122497558594,40.2122497558594,40.2122497558594,40.2122497558594,55.2834854125977,55.2834854125977,55.2834854125977,55.2834854125977,63.8238754272461,63.8238754272461,63.8238754272461,63.8238754272461,63.8238754272461,29.9973983764648,29.9973983764648,29.9973983764648,29.9973983764648,44.9010696411133,44.9010696411133,44.9010696411133,44.9010696411133,59.3024215698242,59.3024215698242,59.3024215698242,59.3024215698242,63.9912872314453,63.9912872314453,63.9912872314453,63.9912872314453,63.9912872314453,30.6778564453125,30.6778564453125,30.6778564453125,30.6778564453125,30.6778564453125,33.0116424560547,33.0116424560547,33.0116424560547,33.0116424560547,48.4177398681641,48.4177398681641,48.4177398681641,48.4177398681641,63.1539535522461,63.1539535522461,63.1539535522461,63.1539535522461,23.4794845581055,23.4794845581055,23.4794845581055,23.4794845581055,23.4794845581055,35.8583755493164,35.8583755493164,35.8583755493164,35.8583755493164,49.7574081420898,49.7574081420898,49.7574081420898,49.7574081420898,63.9912490844727,63.9912490844727,63.9912490844727,63.9912490844727,22.9642028808594,22.9642028808594,22.9642028808594,22.9642028808594,36.5282135009766,36.5282135009766,36.5282135009766,36.5282135009766,47.7478713989258,47.7478713989258,47.7478713989258,47.7478713989258,62.1726379394531,62.1726379394531,62.1726379394531,62.1726379394531,24.2635345458984,24.2635345458984,24.2635345458984,24.2635345458984,24.2635345458984,35.9729309082031,35.9729309082031,35.9729309082031,35.9729309082031,50.7091445922852,50.7091445922852,50.7091445922852,50.7091445922852,63.938346862793,63.938346862793,63.938346862793,63.938346862793,63.938346862793,24.7532272338867,24.7532272338867,24.7532272338867,24.7532272338867,36.9776840209961,36.9776840209961,36.9776840209961,36.9776840209961,46.1877975463867,46.1877975463867,46.1877975463867,46.1877975463867,52.0488128662109,52.0488128662109,52.0488128662109,52.0488128662109,56.737678527832,56.737678527832,56.737678527832,56.737678527832,63.7709503173828,63.7709503173828,63.7709503173828,63.7709503173828,63.7709503173828,30.4468460083008,30.4468460083008,30.4468460083008,30.4468460083008,45.5179748535156,45.5179748535156,45.5179748535156,45.5179748535156,60.4216995239258,60.4216995239258,60.4216995239258,60.4216995239258,48.3697738647461,48.3697738647461,48.3697738647461,48.3697738647461,48.3697738647461,32.7910461425781,32.7910461425781,32.7910461425781,32.7910461425781,48.0297393798828,48.0297393798828,48.0297393798828,48.0297393798828,63.4357833862305,63.4357833862305,63.4357833862305,63.4357833862305,23.0785675048828,23.0785675048828,23.0785675048828,23.0785675048828,37.6473770141602,37.6473770141602,37.6473770141602,37.6473770141602,52.718505859375,52.718505859375,52.718505859375,52.718505859375,63.9382171630859,63.9382171630859,63.9382171630859,63.9382171630859,63.9382171630859,24.0832672119141,24.0832672119141,24.0832672119141,24.0832672119141,29.9442825317383,29.9442825317383,29.9442825317383,29.9442825317383,42.3361434936523,42.3361434936523,42.3361434936523,42.3361434936523,56.7374954223633,56.7374954223633,56.7374954223633,56.7374954223633,63.7708206176758,63.7708206176758,63.7708206176758,63.7708206176758,63.7708206176758,30.1117477416992,30.1117477416992,30.1117477416992,30.1117477416992,44.5130996704102,44.5130996704102,44.5130996704102,44.5130996704102,59.416877746582,59.416877746582,59.416877746582,59.416877746582,54.2287902832031,54.2287902832031,54.2287902832031,54.2287902832031,54.2287902832031,32.288703918457,32.288703918457,32.288703918457,32.288703918457,47.6948013305664,47.6948013305664,47.6948013305664,47.6948013305664,63.1008987426758,63.1008987426758,63.1008987426758,63.1008987426758,23.9286422729492,23.9286422729492,23.9286422729492,23.9286422729492,23.9286422729492,36.1402359008789,36.1402359008789,36.1402359008789,36.1402359008789,51.0439605712891,51.0439605712891,51.0439605712891,51.0439605712891,63.7708435058594,63.7708435058594,63.7708435058594,63.7708435058594,63.7708435058594,30.1117706298828,30.1117706298828,30.1117706298828,30.1117706298828,45.182991027832,45.182991027832,45.182991027832,45.182991027832,59.4168472290039,59.4168472290039,59.4168472290039,59.4168472290039,53.0569839477539,53.0569839477539,53.0569839477539,53.0569839477539,53.0569839477539,31.9538116455078,31.9538116455078,31.9538116455078,31.9538116455078,47.1924514770508,47.1924514770508,47.1924514770508,47.1924514770508,61.7612609863281,61.7612609863281,61.7612609863281,61.7612609863281,30.4574279785156,30.4574279785156,30.4574279785156,30.4574279785156,30.4574279785156,35.4704284667969,35.4704284667969,35.4704284667969,35.4704284667969,49.8718338012695,49.8718338012695,49.8718338012695,49.8718338012695,63.770866394043,63.770866394043,63.770866394043,63.770866394043,63.770866394043,30.781623840332,30.781623840332,30.781623840332,30.781623840332,45.6854019165039,45.6854019165039,45.6854019165039,45.6854019165039,60.7565307617188,60.7565307617188,60.7565307617188,60.7565307617188,41.8409271240234,41.8409271240234,41.8409271240234,41.8409271240234,41.8409271240234,33.96337890625,33.96337890625,33.96337890625,33.96337890625,48.6996459960938,48.6996459960938,48.6996459960938,48.6996459960938,62.7660293579102,62.7660293579102,62.7660293579102,62.7660293579102,21.9198379516602,21.9198379516602,21.9198379516602,21.9198379516602,21.9198379516602,35.8054046630859,35.8054046630859,35.8054046630859,35.8054046630859,51.044059753418,51.044059753418,51.044059753418,51.044059753418,63.9382934570312,63.9382934570312,63.9382934570312,63.9382934570312,63.9382934570312,25.7579193115234,25.7579193115234,25.7579193115234,25.7579193115234,41.1640167236328,41.1640167236328,41.1640167236328,41.1640167236328,56.5701141357422,56.5701141357422,56.5701141357422,56.5701141357422,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,29.609504699707,29.609504699707,29.609504699707,29.609504699707,43.8433456420898,43.8433456420898,43.8433456420898,43.8433456420898,59.0819854736328,59.0819854736328,59.0819854736328,59.0819854736328,52.2200164794922,52.2200164794922,52.2200164794922,52.2200164794922,52.2200164794922,32.6236953735352,32.6236953735352,32.6236953735352,32.6236953735352,47.6948776245117,47.6948776245117,47.6948776245117,47.6948776245117,62.0962295532227,62.0962295532227,62.0962295532227,62.0962295532227,28.4486312866211,28.4486312866211,28.4486312866211,28.4486312866211,28.4486312866211,27.0976028442383,27.0976028442383,27.0976028442383,27.0976028442383,36.6427383422852,36.6427383422852,36.6427383422852,36.6427383422852,48.8671417236328,48.8671417236328,48.8671417236328,48.8671417236328,63.268440246582,63.268440246582,63.268440246582,63.268440246582,23.0786819458008,23.0786819458008,23.0786819458008,23.0786819458008,37.8149490356445,37.8149490356445,37.8149490356445,37.8149490356445,52.3837051391602,52.3837051391602,52.3837051391602,52.3837051391602,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,27.0976181030273,27.0976181030273,27.0976181030273,27.0976181030273,42.1688537597656,42.1688537597656,42.1688537597656,42.1688537597656,57.4074935913086,57.4074935913086,57.4074935913086,57.4074935913086,59.7532348632812,59.7532348632812,59.7532348632812,59.7532348632812,59.7532348632812,30.4468307495117,30.4468307495117,30.4468307495117,30.4468307495117,45.0155868530273,45.0155868530273,45.0155868530273,45.0155868530273,60.2542266845703,60.2542266845703,60.2542266845703,60.2542266845703,40.8365707397461,40.8365707397461,40.8365707397461,40.8365707397461,40.8365707397461,33.9634475708008,33.9634475708008,33.9634475708008,33.9634475708008,49.202033996582,49.202033996582,49.202033996582,49.202033996582,63.4359283447266,63.4359283447266,63.4359283447266,63.4359283447266,23.0787124633789,23.0787124633789,23.0787124633789,23.0787124633789,38.3173522949219,38.3173522949219,38.3173522949219,38.3173522949219,53.3885345458984,53.3885345458984,53.3885345458984,53.3885345458984,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,27.7673187255859,27.7673187255859,27.7673187255859,27.7673187255859,42.8385009765625,42.8385009765625,42.8385009765625,42.8385009765625,57.574821472168,57.574821472168,57.574821472168,57.574821472168,59.2508926391602,59.2508926391602,59.2508926391602,59.2508926391602,59.2508926391602,31.2839889526367,31.2839889526367,31.2839889526367,31.2839889526367,46.3551177978516,46.3551177978516,46.3551177978516,46.3551177978516,60.9239273071289,60.9239273071289,60.9239273071289,60.9239273071289,41.8408660888672,41.8408660888672,41.8408660888672,41.8408660888672,41.8408660888672,33.963264465332,33.963264465332,33.963264465332,33.963264465332,49.2019577026367,49.2019577026367,49.2019577026367,49.2019577026367,58.0771560668945,58.0771560668945,58.0771560668945,58.0771560668945,62.09619140625,62.09619140625,62.09619140625,62.09619140625,26.9419021606445,26.9419021606445,26.9419021606445,26.9419021606445,26.9419021606445,35.3029327392578,35.3029327392578,35.3029327392578,35.3029327392578,49.5368804931641,49.5368804931641,49.5368804931641,49.5368804931641,63.7708282470703,63.7708282470703,63.7708282470703,63.7708282470703,63.7708282470703,30.1118087768555,30.1118087768555,30.1118087768555,30.1118087768555,45.3503952026367,45.3503952026367,45.3503952026367,45.3503952026367,60.5890350341797,60.5890350341797,60.5890350341797,60.5890350341797,39.9994430541992,39.9994430541992,39.9994430541992,39.9994430541992,39.9994430541992,33.9633407592773,33.9633407592773,33.9633407592773,33.9633407592773,47.6948089599609,47.6948089599609,47.6948089599609,47.6948089599609,62.7659912109375,62.7659912109375,62.7659912109375,62.7659912109375,23.9286499023438,23.9286499023438,23.9286499023438,23.9286499023438,23.9286499023438,35.9728393554688,35.9728393554688,35.9728393554688,35.9728393554688,50.7090530395508,50.7090530395508,50.7090530395508,50.7090530395508,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,26.4277648925781,26.4277648925781,26.4277648925781,26.4277648925781,42.0012664794922,42.0012664794922,42.0012664794922,42.0012664794922,55.5653305053711,55.5653305053711,55.5653305053711,55.5653305053711,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,30.4467010498047,30.4467010498047,30.4467010498047,30.4467010498047,45.5178833007812,45.5178833007812,45.5178833007812,45.5178833007812,60.4216079711914,60.4216079711914,60.4216079711914,60.4216079711914,52.2199783325195,52.2199783325195,52.2199783325195,52.2199783325195,52.2199783325195,32.2887954711914,32.2887954711914,32.2887954711914,32.2887954711914,47.5273818969727,47.5273818969727,47.5273818969727,47.5273818969727,61.0914459228516,61.0914459228516,61.0914459228516,61.0914459228516,49.2067108154297,49.2067108154297,49.2067108154297,49.2067108154297,49.2067108154297,30.7816848754883,30.7816848754883,30.7816848754883,30.7816848754883,43.340950012207,43.340950012207,43.340950012207,43.340950012207,58.7470474243164,58.7470474243164,58.7470474243164,58.7470474243164,50.8807601928711,50.8807601928711,50.8807601928711,50.8807601928711,50.8807601928711,32.9585876464844,32.9585876464844,32.9585876464844,32.9585876464844,48.0298233032227,48.0298233032227,48.0298233032227,48.0298233032227,63.2684631347656,63.2684631347656,63.2684631347656,63.2684631347656,23.0786514282227,23.0786514282227,23.0786514282227,23.0786514282227,37.8148651123047,37.8148651123047,37.8148651123047,37.8148651123047,52.5511322021484,52.5511322021484,52.5511322021484,52.5511322021484,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,31.1166229248047,31.1166229248047,31.1166229248047,31.1166229248047,45.3504638671875,45.3504638671875,45.3504638671875,45.3504638671875,59.2494964599609,59.2494964599609,59.2494964599609,59.2494964599609,55.5680999755859,55.5680999755859,55.5680999755859,55.5680999755859,55.5680999755859,32.1213226318359,32.1213226318359,32.1213226318359,32.1213226318359,44.4774780273438,44.4774780273438,44.4774780273438,44.4774780273438,59.716064453125,59.716064453125,59.716064453125,59.716064453125,63.7351531982422,63.7351531982422,63.7351531982422,63.7351531982422,63.7351531982422,27.6996765136719,27.6996765136719,27.6996765136719,27.6996765136719,32.8908081054688,32.8908081054688,32.8908081054688,32.8908081054688,35.7375869750977,35.7375869750977,35.7375869750977,35.7375869750977,39.589111328125,39.589111328125,39.589111328125,39.589111328125,51.8135147094727,51.8135147094727,51.8135147094727,51.8135147094727,63.8705139160156,63.8705139160156,63.8705139160156,63.8705139160156,63.8705139160156,23.3457870483398,23.3457870483398,23.3457870483398,23.3457870483398,37.7470855712891,37.7470855712891,37.7470855712891,37.7470855712891,51.6461181640625,51.6461181640625,51.6461181640625,51.6461181640625,63.8705215454102,63.8705215454102,63.8705215454102,63.8705215454102,63.8705215454102,24.1830291748047,24.1830291748047,24.1830291748047,24.1830291748047,37.91455078125,37.91455078125,37.91455078125,37.91455078125,53.1532440185547,53.1532440185547,53.1532440185547,53.1532440185547,63.703125,63.703125,63.703125,63.703125,63.703125,30.7138824462891,30.7138824462891,30.7138824462891,30.7138824462891,44.9478302001953,44.9478302001953,44.9478302001953,44.9478302001953,60.1864166259766,60.1864166259766,60.1864166259766,60.1864166259766,56.1699447631836,56.1699447631836,56.1699447631836,56.1699447631836,56.1699447631836,32.5559768676758,32.5559768676758,32.5559768676758,32.5559768676758,47.9620742797852,47.9620742797852,47.9620742797852,47.9620742797852,63.5355758666992,63.5355758666992,63.5355758666992,63.5355758666992,30.3897094726562,30.3897094726562,30.3897094726562,30.3897094726562,30.3897094726562,35.5702209472656,35.5702209472656,35.5702209472656,35.5702209472656,50.4739456176758,50.4739456176758,50.4739456176758,50.4739456176758,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,26.6948165893555,26.6948165893555,26.6948165893555,26.6948165893555,41.5985412597656,41.5985412597656,41.5985412597656,41.5985412597656,56.3347549438477,56.3347549438477,56.3347549438477,56.3347549438477,63.702995300293,63.702995300293,63.702995300293,63.702995300293,63.702995300293,31.2161254882812,31.2161254882812,31.2161254882812,31.2161254882812,46.2873611450195,46.2873611450195,46.2873611450195,46.2873611450195,61.3584899902344,61.3584899902344,61.3584899902344,61.3584899902344,47.2973937988281,47.2973937988281,47.2973937988281,47.2973937988281,47.2973937988281,33.5605926513672,33.5605926513672,33.5605926513672,33.5605926513672,48.799201965332,48.799201965332,48.799201965332,48.799201965332,54.8277053833008,54.8277053833008,54.8277053833008,54.8277053833008,61.6934661865234,61.6934661865234,61.6934661865234,61.6934661865234,50.1432723999023,50.1432723999023,50.1432723999023,50.1432723999023,50.1432723999023,33.2256317138672,33.2256317138672,33.2256317138672,33.2256317138672,47.7944412231445,47.7944412231445,47.7944412231445,47.7944412231445,62.53076171875,62.53076171875,62.53076171875,62.53076171875,43.1123046875,43.1123046875,43.1123046875,43.1123046875,43.1123046875,33.2256393432617,33.2256393432617,33.2256393432617,33.2256393432617,47.1246185302734,47.1246185302734,47.1246185302734,47.1246185302734,61.0236511230469,61.0236511230469,61.0236511230469,61.0236511230469,55.165412902832,55.165412902832,55.165412902832,55.165412902832,55.165412902832,32.5558166503906,32.5558166503906,32.5558166503906,32.5558166503906,47.124626159668,47.124626159668,47.124626159668,47.124626159668,62.0284042358398,62.0284042358398,62.0284042358398,62.0284042358398,40.7686614990234,40.7686614990234,40.7686614990234,40.7686614990234,40.7686614990234,34.5653686523438,34.5653686523438,34.5653686523438,34.5653686523438,49.9714660644531,49.9714660644531,49.9714660644531,49.9714660644531,63.8704452514648,63.8704452514648,63.8704452514648,63.8704452514648,63.8704452514648,23.3457183837891,23.3457183837891,23.3457183837891,23.3457183837891,38.2494430541992,38.2494430541992,38.2494430541992,38.2494430541992,52.6507949829102,52.6507949829102,52.6507949829102,52.6507949829102,63.8704528808594,63.8704528808594,63.8704528808594,63.8704528808594,63.8704528808594,28.7043685913086,28.7043685913086,28.7043685913086,28.7043685913086,44.2778701782227,44.2778701782227,44.2778701782227,44.2778701782227,59.3490524291992,59.3490524291992,59.3490524291992,59.3490524291992,63.7030563354492,63.7030563354492,63.7030563354492,63.7030563354492,63.7030563354492,28.3694076538086,28.3694076538086,28.3694076538086,28.3694076538086,43.6080474853516,43.6080474853516,43.6080474853516,43.6080474853516,59.1816558837891,59.1816558837891,59.1816558837891,59.1816558837891,63.7030639648438,63.7030639648438,63.7030639648438,63.7030639648438,63.7030639648438,30.7138214111328,30.7138214111328,30.7138214111328,30.7138214111328,45.4500885009766,45.4500885009766,45.4500885009766,45.4500885009766,61.1911010742188,61.1911010742188,61.1911010742188,61.1911010742188,50.8129501342773,50.8129501342773,50.8129501342773,50.8129501342773,50.8129501342773,33.058235168457,33.058235168457,33.058235168457,33.058235168457,47.6270980834961,47.6270980834961,47.6270980834961,47.6270980834961,61.8609924316406,61.8609924316406,61.8609924316406,61.8609924316406,46.46044921875,46.46044921875,46.46044921875,46.46044921875,46.46044921875,33.8955307006836,33.8955307006836,33.8955307006836,33.8955307006836,48.7993087768555,48.7993087768555,48.7993087768555,48.7993087768555,63.870491027832,63.870491027832,63.870491027832,63.870491027832,63.870491027832,26.8623733520508,26.8623733520508,26.8623733520508,26.8623733520508,42.100959777832,42.100959777832,42.100959777832,42.100959777832,56.1674499511719,56.1674499511719,56.1674499511719,56.1674499511719,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,31.0488204956055,31.0488204956055,31.0488204956055,31.0488204956055,46.6223754882812,46.6223754882812,46.6223754882812,46.6223754882812,60.521354675293,60.521354675293,60.521354675293,60.521354675293,57.0069351196289,57.0069351196289,57.0069351196289,57.0069351196289,57.0069351196289,32.0535202026367,32.0535202026367,32.0535202026367,32.0535202026367,39.7566223144531,39.7566223144531,39.7566223144531,39.7566223144531,48.6318206787109,48.6318206787109,48.6318206787109,48.6318206787109,62.1958847045898,62.1958847045898,62.1958847045898,62.1958847045898,40.09912109375,40.09912109375,40.09912109375,40.09912109375,40.09912109375,34.0630187988281,34.0630187988281,34.0630187988281,34.0630187988281,47.9620513916016,47.9620513916016,47.9620513916016,47.9620513916016,62.3634033203125,62.3634033203125,62.3634033203125,62.3634033203125,40.4339370727539,40.4339370727539,40.4339370727539,40.4339370727539,40.4339370727539,33.5606536865234,33.5606536865234,33.5606536865234,33.5606536865234,47.2922286987305,47.2922286987305,47.2922286987305,47.2922286987305,61.8609848022461,61.8609848022461,61.8609848022461,61.8609848022461,57.0069580078125,57.0069580078125,57.0069580078125,57.0069580078125,57.0069580078125,32.0535430908203,32.0535430908203,32.0535430908203,32.0535430908203,46.9573211669922,46.9573211669922,46.9573211669922,46.9573211669922,62.1959609985352,62.1959609985352,62.1959609985352,62.1959609985352,43.2798233032227,43.2798233032227,43.2798233032227,43.2798233032227,43.2798233032227,33.3932647705078,33.3932647705078,33.3932647705078,33.3932647705078,48.4643936157227,48.4643936157227,48.4643936157227,48.4643936157227,63.5356292724609,63.5356292724609,63.5356292724609,63.5356292724609,29.5526885986328,29.5526885986328,29.5526885986328,29.5526885986328,29.5526885986328,36.0725402832031,36.0725402832031,36.0725402832031,36.0725402832031,51.1437759399414,51.1437759399414,51.1437759399414,51.1437759399414,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,23.3456649780273,23.3456649780273,23.3456649780273,23.3456649780273,38.5843048095703,38.5843048095703,38.5843048095703,38.5843048095703,52.9856567382812,52.9856567382812,52.9856567382812,52.9856567382812,63.702995300293,63.702995300293,63.702995300293,63.702995300293,63.702995300293,30.3788375854492,30.3788375854492,30.3788375854492,30.3788375854492,45.6175308227539,45.6175308227539,45.6175308227539,45.6175308227539,60.8561172485352,60.8561172485352,60.8561172485352,60.8561172485352,54.1609649658203,54.1609649658203,54.1609649658203,54.1609649658203,54.1609649658203,32.3883361816406,32.3883361816406,32.3883361816406,32.3883361816406,47.4595718383789,47.4595718383789,47.4595718383789,47.4595718383789,58.3442611694336,58.3442611694336,58.3442611694336,58.3442611694336,62.5307006835938,62.5307006835938,62.5307006835938,62.5307006835938,52.989143371582,52.989143371582,52.989143371582,52.989143371582,52.989143371582,31.8860244750977,31.8860244750977,31.8860244750977,31.8860244750977,46.6222381591797,46.6222381591797,46.6222381591797,46.6222381591797,61.6934204101562,61.6934204101562,61.6934204101562,61.6934204101562,52.4869384765625,52.4869384765625,52.4869384765625,52.4869384765625,52.4869384765625,31.8860321044922,31.8860321044922,31.8860321044922,31.8860321044922,45.2826385498047,45.2826385498047,45.2826385498047,45.2826385498047,58.8466491699219,58.8466491699219,58.8466491699219,58.8466491699219,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,30.5463256835938,30.5463256835938,30.5463256835938,30.5463256835938,45.9524230957031,45.9524230957031,45.9524230957031,45.9524230957031,60.0188598632812,60.0188598632812,60.0188598632812,60.0188598632812,63.7030334472656,63.7030334472656,63.7030334472656,63.7030334472656,63.7030334472656,30.5463333129883,30.5463333129883,30.5463333129883,30.5463333129883,44.6127700805664,44.6127700805664,44.6127700805664,44.6127700805664,59.5165481567383,59.5165481567383,59.5165481567383,59.5165481567383,60.1875534057617,60.1875534057617,60.1875534057617,60.1875534057617,60.1875534057617,31.7185974121094,31.7185974121094,31.7185974121094,31.7185974121094,47.124641418457,47.124641418457,47.124641418457,47.124641418457,62.3633346557617,62.3633346557617,62.3633346557617,62.3633346557617,37.0857849121094,37.0857849121094,37.0857849121094,37.0857849121094,37.0857849121094,35.0677032470703,35.0677032470703,35.0677032470703,35.0677032470703,50.4738006591797,50.4738006591797,50.4738006591797,50.4738006591797,63.8704605102539,63.8704605102539,63.8704605102539,63.8704605102539,63.8704605102539,23.5131378173828,23.5131378173828,23.5131378173828,23.5131378173828,38.4169158935547,38.4169158935547,38.4169158935547,38.4169158935547,53.6555557250977,53.6555557250977,53.6555557250977,53.6555557250977,63.8704681396484,63.8704681396484,63.8704681396484,63.8704681396484,63.8704681396484,27.8670425415039,27.8670425415039,27.8670425415039,27.8670425415039,43.2731399536133,43.2731399536133,43.2731399536133,43.2731399536133,58.009407043457,58.009407043457,58.009407043457,58.009407043457,63.7030715942383,63.7030715942383,63.7030715942383,63.7030715942383,63.7030715942383,31.2395629882812,31.2395629882812,31.2395629882812,31.2395629882812,46.3107452392578,46.3107452392578,46.3107452392578,46.3107452392578,61.214469909668,61.214469909668,61.214469909668,61.214469909668,48.4163665771484,48.4163665771484,48.4163665771484,48.4163665771484,48.4163665771484,33.1727828979492,33.1727828979492,33.1727828979492,33.1727828979492,48.0765075683594,48.0765075683594,48.0765075683594,48.0765075683594,63.3151473999023,63.3151473999023,63.3151473999023,63.3151473999023,35.8610763549805,35.8610763549805,35.8610763549805,35.8610763549805,35.8610763549805,34.3449935913086,34.3449935913086,34.3449935913086,34.3449935913086,48.9138031005859,48.9138031005859,48.9138031005859,48.9138031005859,63.1476440429688,63.1476440429688,63.1476440429688,63.1476440429688,35.5262756347656,35.5262756347656,35.5262756347656,35.5262756347656,35.5262756347656,35.1822357177734,35.1822357177734,35.1822357177734,35.1822357177734,49.9185028076172,49.9185028076172,49.9185028076172,49.9185028076172,63.984992980957,63.984992980957,63.984992980957,63.984992980957,63.984992980957,28.3164825439453,28.3164825439453,28.3164825439453,28.3164825439453,41.0432586669922,41.0432586669922,41.0432586669922,41.0432586669922,45.0622406005859,45.0622406005859,45.0622406005859,45.0622406005859,57.7890167236328,57.7890167236328,57.7890167236328,57.7890167236328,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,30.8284072875977,30.8284072875977,30.8284072875977,30.8284072875977,45.397216796875,45.397216796875,45.397216796875,45.397216796875,58.9612274169922,58.9612274169922,58.9612274169922,58.9612274169922,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,30.6609573364258,30.6609573364258,30.6609573364258,30.6609573364258,46.0670013427734,46.0670013427734,46.0670013427734,46.0670013427734,60.8033218383789,60.8033218383789,60.8033218383789,60.8033218383789,57.1214447021484,57.1214447021484,57.1214447021484,57.1214447021484,57.1214447021484,32.6704025268555,32.6704025268555,32.6704025268555,32.6704025268555,46.904296875,46.904296875,46.904296875,46.904296875,60.635871887207,60.635871887207,60.635871887207,60.635871887207,56.1170272827148,56.1170272827148,56.1170272827148,56.1170272827148,56.1170272827148,32.5030059814453,32.5030059814453,32.5030059814453,32.5030059814453,47.0718154907227,47.0718154907227,47.0718154907227,47.0718154907227,62.3104019165039,62.3104019165039,62.3104019165039,62.3104019165039,39.8788299560547,39.8788299560547,39.8788299560547,39.8788299560547,39.8788299560547,34.6799087524414,34.6799087524414,34.6799087524414,34.6799087524414,49.751091003418,49.751091003418,49.751091003418,49.751091003418,63.8176345825195,63.8176345825195,63.8176345825195,63.8176345825195,63.8176345825195,31.4980621337891,31.4980621337891,31.4980621337891,31.4980621337891,46.4018402099609,46.4018402099609,46.4018402099609,46.4018402099609,60.9706497192383,60.9706497192383,60.9706497192383,60.9706497192383,54.4428482055664,54.4428482055664,54.4428482055664,54.4428482055664,54.4428482055664,32.502815246582,32.502815246582,32.502815246582,32.502815246582,47.0716781616211,47.0716781616211,47.0716781616211,47.0716781616211,62.1428070068359,62.1428070068359,62.1428070068359,62.1428070068359,45.2356262207031,45.2356262207031,45.2356262207031,45.2356262207031,45.2356262207031,34.3449096679688,34.3449096679688,34.3449096679688,34.3449096679688,49.58349609375,49.58349609375,49.58349609375,49.58349609375,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,26.1515579223633,26.1515579223633,26.1515579223633,26.1515579223633,26.1515579223633,36.3544082641602,36.3544082641602,36.3544082641602,36.3544082641602,51.2580795288086,51.2580795288086,51.2580795288086,51.2580795288086,63.9849090576172,63.9849090576172,63.9849090576172,63.9849090576172,63.9849090576172,25.637077331543,25.637077331543,25.637077331543,25.637077331543,40.0384292602539,40.0384292602539,40.0384292602539,40.0384292602539,54.9421539306641,54.9421539306641,54.9421539306641,54.9421539306641,63.9849166870117,63.9849166870117,63.9849166870117,63.9849166870117,63.9849166870117,28.6513748168945,28.6513748168945,28.6513748168945,28.6513748168945,43.555046081543,43.555046081543,43.555046081543,43.555046081543,58.4587707519531,58.4587707519531,58.4587707519531,58.4587707519531,63.8175201416016,63.8175201416016,63.8175201416016,63.8175201416016,63.8175201416016,30.6608734130859,30.6608734130859,30.6608734130859,30.6608734130859,44.5597991943359,44.5597991943359,44.5597991943359,44.5597991943359,58.7936935424805,58.7936935424805,58.7936935424805,58.7936935424805,63.8175277709961,63.8175277709961,63.8175277709961,63.8175277709961,63.8175277709961,30.3259124755859,30.3259124755859,30.3259124755859,30.3259124755859,44.5598068237305,44.5598068237305,44.5598068237305,44.5598068237305,58.793701171875,58.793701171875,58.793701171875,58.793701171875,63.8175354003906,63.8175354003906,63.8175354003906,63.8175354003906,63.8175354003906,31.1632614135742,31.1632614135742,31.1632614135742,31.1632614135742,46.5693588256836,46.5693588256836,46.5693588256836,46.5693588256836,60.6357421875,60.6357421875,60.6357421875,60.6357421875,56.7865676879883,56.7865676879883,56.7865676879883,56.7865676879883,56.7865676879883,32.1680145263672,32.1680145263672,32.1680145263672,32.1680145263672,47.4066543579102,47.4066543579102,47.4066543579102,47.4066543579102,62.6452407836914,62.6452407836914,62.6452407836914,62.6452407836914,39.0417327880859,39.0417327880859,39.0417327880859,39.0417327880859,39.0417327880859,33.8425445556641,33.8425445556641,33.8425445556641,33.8425445556641,49.0812225341797,49.0812225341797,49.0812225341797,49.0812225341797,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,25.8046417236328,25.8046417236328,25.8046417236328,25.8046417236328,40.8757705688477,40.8757705688477,40.8757705688477,40.8757705688477,56.1144104003906,56.1144104003906,56.1144104003906,56.1144104003906,63.8175659179688,63.8175659179688,63.8175659179688,63.8175659179688,63.8175659179688,31.3307495117188,31.3307495117188,31.3307495117188,31.3307495117188,46.5693359375,46.5693359375,46.5693359375,46.5693359375,61.3056564331055,61.3056564331055,61.3056564331055,61.3056564331055,55.2799606323242,55.2799606323242,55.2799606323242,55.2799606323242,55.2799606323242,32.8378219604492,32.8378219604492,32.8378219604492,32.8378219604492,47.9090042114258,47.9090042114258,47.9090042114258,47.9090042114258,62.9801864624023,62.9801864624023,62.9801864624023,62.9801864624023,48.9186096191406,48.9186096191406,48.9186096191406,48.9186096191406,48.9186096191406,33.6751708984375,33.6751708984375,33.6751708984375,33.6751708984375,48.4113845825195,48.4113845825195,48.4113845825195,48.4113845825195,62.4778747558594,62.4778747558594,62.4778747558594,62.4778747558594,38.8743667602539,38.8743667602539,38.8743667602539,38.8743667602539,38.8743667602539,35.0148391723633,35.0148391723633,35.0148391723633,35.0148391723633,47.4066848754883,47.4066848754883,47.4066848754883,47.4066848754883,51.7605972290039,51.7605972290039,51.7605972290039,51.7605972290039,63.9850006103516,63.9850006103516,63.9850006103516,63.9850006103516,63.9850006103516,24.6324768066406,24.6324768066406,24.6324768066406,24.6324768066406,39.7036590576172,39.7036590576172,39.7036590576172,39.7036590576172,53.2677230834961,53.2677230834961,53.2677230834961,53.2677230834961,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,24.2975158691406,24.2975158691406,24.2975158691406,24.2975158691406,38.866325378418,38.866325378418,38.866325378418,38.866325378418,53.9375076293945,53.9375076293945,53.9375076293945,53.9375076293945,63.8176116943359,63.8176116943359,63.8176116943359,63.8176116943359,63.8176116943359,30.9958801269531,30.9958801269531,30.9958801269531,30.9958801269531,45.8996047973633,45.8996047973633,45.8996047973633,45.8996047973633,61.1382446289062,61.1382446289062,61.1382446289062,61.1382446289062,45.9053726196289,45.9053726196289,45.9053726196289,45.9053726196289,45.9053726196289,34.0100708007812,34.0100708007812,34.0100708007812,34.0100708007812,49.2487106323242,49.2487106323242,49.2487106323242,49.2487106323242,63.9850311279297,63.9850311279297,63.9850311279297,63.9850311279297,63.9850311279297,23.4603042602539,23.4603042602539,23.4603042602539,23.4603042602539,38.0290603637695,38.0290603637695,38.0290603637695,38.0290603637695,53.2677001953125,53.2677001953125,53.2677001953125,53.2677001953125,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,61.3510208129883,61.3510208129883,61.3510208129883,61.3510208129883,61.3510208129883,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,32.5473022460938,32.5473022460938,32.5473022460938,32.5473022460938,47.785888671875,47.785888671875,47.785888671875,47.785888671875,63.1919860839844,63.1919860839844,63.1919860839844,63.1919860839844,23.0022277832031,23.0022277832031,23.0022277832031,23.0022277832031,37.7384414672852,37.7384414672852,37.7384414672852,37.7384414672852,42.7622222900391,42.7622222900391,42.7622222900391,42.7622222900391,50.8001861572266,50.8001861572266,50.8001861572266,50.8001861572266,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,27.8585052490234,27.8585052490234,27.8585052490234,27.8585052490234,42.092399597168,42.092399597168,42.092399597168,42.092399597168,54.9866333007812,54.9866333007812,54.9866333007812,54.9866333007812,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,29.8679504394531,29.8679504394531,29.8679504394531,29.8679504394531,44.9391326904297,44.9391326904297,44.9391326904297,44.9391326904297,59.6754531860352,59.6754531860352,59.6754531860352,59.6754531860352,47.7910919189453,47.7910919189453,47.7910919189453,47.7910919189453,47.7910919189453,33.2171096801758,33.2171096801758,33.2171096801758,33.2171096801758,48.2882919311523,48.2882919311523,48.2882919311523,48.2882919311523,63.1920166015625,63.1920166015625,63.1920166015625,63.1920166015625,25.3589401245117,25.3589401245117,25.3589401245117,25.3589401245117,25.3589401245117,36.0638961791992,36.0638961791992,36.0638961791992,36.0638961791992,50.6327056884766,50.6327056884766,50.6327056884766,50.6327056884766,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,23.8395004272461,23.8395004272461,23.8395004272461,23.8395004272461,39.0781402587891,39.0781402587891,39.0781402587891,39.0781402587891,53.9819183349609,53.9819183349609,53.9819183349609,53.9819183349609,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,30.5378112792969,30.5378112792969,30.5378112792969,30.5378112792969,45.7765045166016,45.7765045166016,45.7765045166016,45.7765045166016,58.3976898193359,58.3976898193359,58.3976898193359,58.3976898193359,56.5580596923828,56.5580596923828,56.5580596923828,56.5580596923828,56.5580596923828,32.6493148803711,32.6493148803711,32.6493148803711,32.6493148803711,47.8880081176758,47.8880081176758,47.8880081176758,47.8880081176758,62.7916793823242,62.7916793823242,62.7916793823242,62.7916793823242,23.2717514038086,23.2717514038086,23.2717514038086,23.2717514038086,38.6778335571289,38.6778335571289,38.6778335571289,38.6778335571289,54.251350402832,54.251350402832,54.251350402832,54.251350402832,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,30.8072967529297,30.8072967529297,30.8072967529297,30.8072967529297,45.2087020874023,45.2087020874023,45.2087020874023,45.2087020874023,60.61474609375,60.61474609375,60.61474609375,60.61474609375,37.1792831420898,37.1792831420898,37.1792831420898,37.1792831420898,37.1792831420898,34.1564559936523,34.1564559936523,34.1564559936523,34.1564559936523,49.2276916503906,49.2276916503906,49.2276916503906,49.2276916503906,63.6290435791016,63.6290435791016,63.6290435791016,63.6290435791016,23.2717742919922,23.2717742919922,23.2717742919922,23.2717742919922,37.8405303955078,37.8405303955078,37.8405303955078,37.8405303955078,52.744255065918,52.744255065918,52.744255065918,52.744255065918,63.7965621948242,63.7965621948242,63.7965621948242,63.7965621948242,63.7965621948242,31.3096923828125,31.3096923828125,31.3096923828125,31.3096923828125,46.2134704589844,46.2134704589844,46.2134704589844,46.2134704589844,60.6147689819336,60.6147689819336,60.6147689819336,60.6147689819336,38.6859436035156,38.6859436035156,38.6859436035156,38.6859436035156,38.6859436035156,34.4913940429688,34.4913940429688,34.4913940429688,34.4913940429688,43.0317306518555,43.0317306518555,43.0317306518555,43.0317306518555,51.2371520996094,51.2371520996094,51.2371520996094,51.2371520996094,62.9591827392578,62.9591827392578,62.9591827392578,62.9591827392578,23.2717971801758,23.2717971801758,23.2717971801758,23.2717971801758,38.1754684448242,38.1754684448242,38.1754684448242,38.1754684448242,52.5768737792969,52.5768737792969,52.5768737792969,52.5768737792969,63.7965850830078,63.7965850830078,63.7965850830078,63.7965850830078,63.7965850830078,31.1423110961914,31.1423110961914,31.1423110961914,31.1423110961914,45.5436096191406,45.5436096191406,45.5436096191406,45.5436096191406,59.7775573730469,59.7775573730469,59.7775573730469,59.7775573730469,52.4131088256836,52.4131088256836,52.4131088256836,52.4131088256836,52.4131088256836,32.1470642089844,32.1470642089844,32.1470642089844,32.1470642089844,46.2135009765625,46.2135009765625,46.2135009765625,46.2135009765625,61.4520874023438,61.4520874023438,61.4520874023438,61.4520874023438,29.4787445068359,29.4787445068359,29.4787445068359,29.4787445068359,29.4787445068359,35.8311386108398,35.8311386108398,35.8311386108398,35.8311386108398,51.2371826171875,51.2371826171875,51.2371826171875,51.2371826171875,63.7966079711914,63.7966079711914,63.7966079711914,63.7966079711914,63.7966079711914,31.4771957397461,31.4771957397461,31.4771957397461,31.4771957397461,45.8786010742188,45.8786010742188,45.8786010742188,45.8786010742188,60.7823257446289,60.7823257446289,60.7823257446289,60.7823257446289,40.3600311279297,40.3600311279297,40.3600311279297,40.3600311279297,40.3600311279297,34.6589508056641,34.6589508056641,34.6589508056641,34.6589508056641,50.0649948120117,50.0649948120117,50.0649948120117,50.0649948120117,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,28.1279525756836,28.1279525756836,28.1279525756836,28.1279525756836,43.534049987793,43.534049987793,43.534049987793,43.534049987793,57.7679443359375,57.7679443359375,57.7679443359375,57.7679443359375,59.443962097168,59.443962097168,59.443962097168,59.443962097168,59.443962097168,31.8119735717773,31.8119735717773,31.8119735717773,31.8119735717773,45.3760375976562,45.3760375976562,45.3760375976562,45.3760375976562,60.1123046875,60.1123046875,60.1123046875,60.1123046875,42.8709564208984,42.8709564208984,42.8709564208984,42.8709564208984,42.8709564208984,25.1136779785156,25.1136779785156,25.1136779785156,25.1136779785156,33.4866104125977,33.4866104125977,33.4866104125977,33.4866104125977,48.8926544189453,48.8926544189453,48.8926544189453,48.8926544189453,63.9638900756836,63.9638900756836,63.9638900756836,63.9638900756836,63.9638900756836,23.2717056274414,23.2717056274414,23.2717056274414,23.2717056274414,37.3381423950195,37.3381423950195,37.3381423950195,37.3381423950195,51.5719833374023,51.5719833374023,51.5719833374023,51.5719833374023,63.9638977050781,63.9638977050781,63.9638977050781,63.9638977050781,63.9638977050781,24.4438629150391,24.4438629150391,24.4438629150391,24.4438629150391,38.8452377319336,38.8452377319336,38.8452377319336,38.8452377319336,53.4140777587891,53.4140777587891,53.4140777587891,53.4140777587891,63.796501159668,63.796501159668,63.796501159668,63.796501159668,63.796501159668,30.6398010253906,30.6398010253906,30.6398010253906,30.6398010253906,45.5435791015625,45.5435791015625,45.5435791015625,45.5435791015625,60.6147613525391,60.6147613525391,60.6147613525391,60.6147613525391,42.8709869384766,42.8709869384766,42.8709869384766,42.8709869384766,42.8709869384766,34.1564178466797,34.1564178466797,34.1564178466797,34.1564178466797,49.2276000976562,49.2276000976562,49.2276000976562,49.2276000976562,63.4614944458008,63.4614944458008,63.4614944458008,63.4614944458008,23.2717361450195,23.2717361450195,23.2717361450195,23.2717361450195,38.0080032348633,38.0080032348633,38.0080032348633,38.0080032348633,53.2465896606445,53.2465896606445,53.2465896606445,53.2465896606445,63.9639282226562,63.9639282226562,63.9639282226562,63.9639282226562,63.9639282226562,29.1327056884766,29.1327056884766,29.1327056884766,29.1327056884766,43.7015151977539,43.7015151977539,43.7015151977539,43.7015151977539,59.1076126098633,59.1076126098633,59.1076126098633,59.1076126098633,56.4307479858398,56.4307479858398,56.4307479858398,56.4307479858398,56.4307479858398,31.9795455932617,31.9795455932617,31.9795455932617,31.9795455932617,47.5530471801758,47.5530471801758,47.5530471801758,47.5530471801758,61.6195373535156,61.6195373535156,61.6195373535156,61.6195373535156,28.4742584228516,28.4742584228516,28.4742584228516,28.4742584228516,28.4742584228516,35.6635665893555,35.6635665893555,35.6635665893555,35.6635665893555,51.2371215820312,51.2371215820312,51.2371215820312,51.2371215820312,63.9639511108398,63.9639511108398,63.9639511108398,63.9639511108398,63.9639511108398,27.1232376098633,27.1232376098633,27.1232376098633,27.1232376098633,42.5293350219727,42.5293350219727,42.5293350219727,42.5293350219727,57.09814453125,57.09814453125,57.09814453125,57.09814453125,63.7965545654297,63.7965545654297,63.7965545654297,63.7965545654297,63.7965545654297,30.6399078369141,30.6399078369141,30.6399078369141,30.6399078369141,45.0412063598633,45.0412063598633,45.0412063598633,45.0412063598633,60.4473037719727,60.4473037719727,60.4473037719727,60.4473037719727,43.540657043457,43.540657043457,43.540657043457,43.540657043457,43.540657043457,33.4866943359375,33.4866943359375,33.4866943359375,33.4866943359375,49.0602493286133,49.0602493286133,49.0602493286133,49.0602493286133,63.9639739990234,63.9639739990234,63.9639739990234,63.9639739990234,63.9639739990234,27.7930908203125,27.7930908203125,27.7930908203125,27.7930908203125,43.0317306518555,43.0317306518555,43.0317306518555,43.0317306518555,57.7679977416992,57.7679977416992,57.7679977416992,57.7679977416992,63.7965774536133,63.7965774536133,63.7965774536133,63.7965774536133,63.7965774536133,29.8026428222656,29.8026428222656,29.8026428222656,29.8026428222656,33.8215713500977,33.8215713500977,33.8215713500977,33.8215713500977,44.7063140869141,44.7063140869141,44.7063140869141,44.7063140869141,59.2751770019531,59.2751770019531,59.2751770019531,59.2751770019531,52.2456970214844,52.2456970214844,52.2456970214844,52.2456970214844,52.2456970214844,31.9795989990234,31.9795989990234,31.9795989990234,31.9795989990234,43.5341720581055,43.5341720581055,43.5341720581055,43.5341720581055,51.9069976806641,51.9069976806641,51.9069976806641,51.9069976806641,63.963996887207,63.963996887207,63.963996887207,63.963996887207,63.963996887207,24.6114730834961,24.6114730834961,24.6114730834961,24.6114730834961,37.5057067871094,37.5057067871094,37.5057067871094,37.5057067871094,50.5673446655273,50.5673446655273,50.5673446655273,50.5673446655273,60.7823104858398,60.7823104858398,60.7823104858398,60.7823104858398,63.7966003417969,63.7966003417969,63.7966003417969,63.7966003417969,63.7966003417969,30.8074111938477,30.8074111938477,30.8074111938477,30.8074111938477,45.0413055419922,45.0413055419922,45.0413055419922,45.0413055419922,59.7775726318359,59.7775726318359,59.7775726318359,59.7775726318359,49.567253112793,49.567253112793,49.567253112793,49.567253112793,49.567253112793,32.1470794677734,32.1470794677734,32.1470794677734,32.1470794677734,47.5531234741211,47.5531234741211,47.5531234741211,47.5531234741211,62.6243057250977,62.6243057250977,62.6243057250977,62.6243057250977,23.4522094726562,23.4522094726562,23.4522094726562,23.4522094726562,23.4522094726562,36.166015625,36.166015625,36.166015625,36.166015625,51.2372512817383,51.2372512817383,51.2372512817383,51.2372512817383,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,23.2716827392578,23.2716827392578,23.2716827392578,23.2716827392578,38.0079498291016,38.0079498291016,38.0079498291016,38.0079498291016,52.7442169189453,52.7442169189453,52.7442169189453,52.7442169189453,63.9638748168945,63.9638748168945,63.9638748168945,63.9638748168945,63.9638748168945,30.4723663330078,30.4723663330078,30.4723663330078,30.4723663330078,45.3760375976562,45.3760375976562,45.3760375976562,45.3760375976562,59.7774429321289,59.7774429321289,59.7774429321289,59.7774429321289,46.5538482666016,46.5538482666016,46.5538482666016,46.5538482666016,46.5538482666016,33.4866104125977,33.4866104125977,33.4866104125977,33.4866104125977,45.87841796875,45.87841796875,45.87841796875,45.87841796875,49.7299423217773,49.7299423217773,49.7299423217773,49.7299423217773,62.4567718505859,62.4567718505859,62.4567718505859,62.4567718505859,34.3333511352539,34.3333511352539,34.3333511352539,34.3333511352539,34.3333511352539,34.1564483642578,34.1564483642578,34.1564483642578,34.1564483642578,48.3903427124023,48.3903427124023,48.3903427124023,48.3903427124023,62.7916412353516,62.7916412353516,62.7916412353516,62.7916412353516,26.8001708984375,26.8001708984375,26.8001708984375,26.8001708984375,26.8001708984375,34.9937438964844,34.9937438964844,34.9937438964844,34.9937438964844,49.4184036254883,49.4184036254883,49.4184036254883,49.4184036254883,62.9825057983398,62.9825057983398,62.9825057983398,62.9825057983398,53.1059951782227,53.1059951782227,53.1059951782227,53.1059951782227,53.1059951782227,25.7305603027344,25.7305603027344,25.7305603027344,25.7305603027344,34.9407806396484,34.9407806396484,34.9407806396484,34.9407806396484,48.3373336791992,48.3373336791992,48.3373336791992,48.3373336791992,62.0688552856445,62.0688552856445,62.0688552856445,62.0688552856445,32.9411697387695,32.9411697387695,32.9411697387695,32.9411697387695,32.9411697387695,34.6058197021484,34.6058197021484,34.6058197021484,34.6058197021484,49.0071716308594,49.0071716308594,49.0071716308594,49.0071716308594,63.2411193847656,63.2411193847656,63.2411193847656,63.2411193847656,22.8969268798828,22.8969268798828,22.8969268798828,22.8969268798828,22.8969268798828,35.9454879760742,35.9454879760742,35.9454879760742,35.9454879760742,50.3468933105469,50.3468933105469,50.3468933105469,50.3468933105469,63.7435531616211,63.7435531616211,63.7435531616211,63.7435531616211,63.7435531616211,31.089225769043,31.089225769043,31.089225769043,31.089225769043,45.9929504394531,45.9929504394531,45.9929504394531,45.9929504394531,60.0593872070312,60.0593872070312,60.0593872070312,60.0593872070312,41.1439971923828,41.1439971923828,41.1439971923828,41.1439971923828,41.1439971923828,34.4383850097656,34.4383850097656,34.4383850097656,34.4383850097656,49.3421096801758,49.3421096801758,49.3421096801758,49.3421096801758,63.4085998535156,63.4085998535156,63.4085998535156,63.4085998535156,23.3991622924805,23.3991622924805,23.3991622924805,23.3991622924805,23.3991622924805,36.447883605957,36.447883605957,36.447883605957,36.447883605957,51.5190658569336,51.5190658569336,51.5190658569336,51.5190658569336,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,30.2520141601562,30.2520141601562,30.2520141601562,30.2520141601562,45.3231964111328,45.3231964111328,45.3231964111328,45.3231964111328,60.3943252563477,60.3943252563477,60.3943252563477,60.3943252563477,37.4611282348633,37.4611282348633,37.4611282348633,37.4611282348633,37.4611282348633,33.6011734008789,33.6011734008789,33.6011734008789,33.6011734008789,47.1651840209961,47.1651840209961,47.1651840209961,47.1651840209961,62.068962097168,62.068962097168,62.068962097168,62.068962097168,25.2406311035156,25.2406311035156,25.2406311035156,25.2406311035156,25.2406311035156,36.1129913330078,36.1129913330078,36.1129913330078,36.1129913330078,50.8493118286133,50.8493118286133,50.8493118286133,50.8493118286133,63.911003112793,63.911003112793,63.911003112793,63.911003112793,63.911003112793,25.8980865478516,25.8980865478516,25.8980865478516,25.8980865478516,40.9693222045898,40.9693222045898,40.9693222045898,40.9693222045898,55.3706741333008,55.3706741333008,55.3706741333008,55.3706741333008,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,28.5774688720703,28.5774688720703,28.5774688720703,28.5774688720703,32.4289398193359,32.4289398193359,32.4289398193359,32.4289398193359,45.3231735229492,45.3231735229492,45.3231735229492,45.3231735229492,59.2222061157227,59.2222061157227,59.2222061157227,59.2222061157227,63.7436141967773,63.7436141967773,63.7436141967773,63.7436141967773,63.7436141967773,30.5869674682617,30.5869674682617,30.5869674682617,30.5869674682617,45.1557235717773,45.1557235717773,45.1557235717773,45.1557235717773,59.55712890625,59.55712890625,59.55712890625,59.55712890625,53.0297546386719,53.0297546386719,53.0297546386719,53.0297546386719,53.0297546386719,32.2614974975586,32.2614974975586,32.2614974975586,32.2614974975586,44.1510238647461,44.1510238647461,44.1510238647461,44.1510238647461,56.3753890991211,56.3753890991211,56.3753890991211,56.3753890991211,63.9110336303711,63.9110336303711,63.9110336303711,63.9110336303711,63.9110336303711,26.0655746459961,26.0655746459961,26.0655746459961,26.0655746459961,38.4574890136719,38.4574890136719,38.4574890136719,38.4574890136719,52.6913299560547,52.6913299560547,52.6913299560547,52.6913299560547,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,29.9171600341797,29.9171600341797,29.9171600341797,29.9171600341797,44.8208847045898,44.8208847045898,44.8208847045898,44.8208847045898,59.8920669555664,59.8920669555664,59.8920669555664,59.8920669555664,40.4744644165039,40.4744644165039,40.4744644165039,40.4744644165039,40.4744644165039,34.1036071777344,34.1036071777344,34.1036071777344,34.1036071777344,49.1747360229492,49.1747360229492,49.1747360229492,49.1747360229492,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,23.5535736083984,23.5535736083984,23.5535736083984,23.5535736083984,38.1223831176758,38.1223831176758,38.1223831176758,38.1223831176758,53.1935653686523,53.1935653686523,53.1935653686523,53.1935653686523,63.9109039306641,63.9109039306641,63.9109039306641,63.9109039306641,63.9109039306641,29.5821075439453,29.5821075439453,29.5821075439453,29.5821075439453,43.1461715698242,43.1461715698242,43.1461715698242,43.1461715698242,58.0498428344727,58.0498428344727,58.0498428344727,58.0498428344727,56.210319519043,56.210319519043,56.210319519043,56.210319519043,56.210319519043,32.4288940429688,32.4288940429688,32.4288940429688,32.4288940429688,47.5000228881836,47.5000228881836,47.5000228881836,47.5000228881836,53.1935806274414,53.1935806274414,53.1935806274414,53.1935806274414,59.5570220947266,59.5570220947266,59.5570220947266,59.5570220947266,47.6727142333984,47.6727142333984,47.6727142333984,47.6727142333984,47.6727142333984,33.2661361694336,33.2661361694336,33.2661361694336,33.2661361694336,47.3326263427734,47.3326263427734,47.3326263427734,47.3326263427734,62.5712127685547,62.5712127685547,62.5712127685547,62.5712127685547,24.7383499145508,24.7383499145508,24.7383499145508,24.7383499145508,24.7383499145508,36.2803802490234,36.2803802490234,36.2803802490234,36.2803802490234,51.0166473388672,51.0166473388672,51.0166473388672,51.0166473388672,63.7435302734375,63.7435302734375,63.7435302734375,63.7435302734375,63.7435302734375,30.5868301391602,30.5868301391602,30.5868301391602,30.5868301391602,45.8255233764648,45.8255233764648,45.8255233764648,45.8255233764648,60.7291946411133,60.7291946411133,60.7291946411133,60.7291946411133,39.135124206543,39.135124206543,39.135124206543,39.135124206543,39.135124206543,34.7732772827148,34.7732772827148,34.7732772827148,34.7732772827148,50.1793746948242,50.1793746948242,50.1793746948242,50.1793746948242,63.9109497070312,63.9109497070312,63.9109497070312,63.9109497070312,63.9109497070312,29.7495574951172,29.7495574951172,29.7495574951172,29.7495574951172,43.6485366821289,43.6485366821289,43.6485366821289,43.6485366821289,58.0498886108398,58.0498886108398,58.0498886108398,58.0498886108398,60.7302780151367,60.7302780151367,60.7302780151367,60.7302780151367,60.7302780151367,30.5868530273438,30.5868530273438,30.5868530273438,30.5868530273438,45.4906311035156,45.4906311035156,45.4906311035156,45.4906311035156,61.2315902709961,61.2315902709961,61.2315902709961,61.2315902709961,35.9544677734375,35.9544677734375,35.9544677734375,35.9544677734375,35.9544677734375,34.7733001708984,34.7733001708984,34.7733001708984,34.7733001708984,50.1793975830078,50.1793975830078,50.1793975830078,50.1793975830078,63.7435684204102,63.7435684204102,63.7435684204102,63.7435684204102,63.7435684204102,30.9218368530273,30.9218368530273,30.9218368530273,30.9218368530273,46.3279342651367,46.3279342651367,46.3279342651367,46.3279342651367,61.566520690918,61.566520690918,61.566520690918,61.566520690918,28.0864868164062,28.0864868164062,28.0864868164062,28.0864868164062,28.0864868164062,35.9455184936523,35.9455184936523,35.9455184936523,35.9455184936523,51.1841583251953,51.1841583251953,51.1841583251953,51.1841583251953,63.9109878540039,63.9109878540039,63.9109878540039,63.9109878540039,63.9109878540039,26.233039855957,26.233039855957,26.233039855957,26.233039855957,40.8017959594727,40.8017959594727,40.8017959594727,40.8017959594727,55.7055740356445,55.7055740356445,55.7055740356445,55.7055740356445,63.7435913085938,63.7435913085938,63.7435913085938,63.7435913085938,63.7435913085938,31.0893173217773,31.0893173217773,31.0893173217773,31.0893173217773,46.495361328125,46.495361328125,46.495361328125,46.495361328125,61.5665969848633,61.5665969848633,61.5665969848633,61.5665969848633,27.2494888305664,27.2494888305664,27.2494888305664,27.2494888305664,27.2494888305664,35.4432220458984,35.4432220458984,35.4432220458984,35.4432220458984,50.1794891357422,50.1794891357422,50.1794891357422,50.1794891357422,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,24.3909759521484,24.3909759521484,24.3909759521484,24.3909759521484,38.7923812866211,38.7923812866211,38.7923812866211,38.7923812866211,53.6960525512695,53.6960525512695,53.6960525512695,53.6960525512695,60.896728515625,60.896728515625,60.896728515625,60.896728515625,63.911018371582,63.911018371582,63.911018371582,63.911018371582,63.911018371582,25.7306442260742,25.7306442260742,25.7306442260742,25.7306442260742,39.7970809936523,39.7970809936523,39.7970809936523,39.7970809936523,54.3658905029297,54.3658905029297,54.3658905029297,54.3658905029297,63.7436218261719,63.7436218261719,63.7436218261719,63.7436218261719,63.7436218261719,30.7544326782227,30.7544326782227,30.7544326782227,30.7544326782227,44.9882736206055,44.9882736206055,44.9882736206055,44.9882736206055,59.22216796875,59.22216796875,59.22216796875,59.22216796875,59.0563125610352,59.0563125610352,59.0563125610352,59.0563125610352,59.0563125610352,31.5916748046875,31.5916748046875,31.5916748046875,31.5916748046875,46.4953994750977,46.4953994750977,46.4953994750977,46.4953994750977,61.7340927124023,61.7340927124023,61.7340927124023,61.7340927124023,27.9191436767578,27.9191436767578,27.9191436767578,27.9191436767578,27.9191436767578,36.113037109375,36.113037109375,36.113037109375,36.113037109375,50.6818466186523,50.6818466186523,50.6818466186523,50.6818466186523,63.9110488891602,63.9110488891602,63.9110488891602,63.9110488891602,63.9110488891602,24.7259292602539,24.7259292602539,24.7259292602539,24.7259292602539,39.9646224975586,39.9646224975586,39.9646224975586,39.9646224975586,55.2032089233398,55.2032089233398,55.2032089233398,55.2032089233398,63.74365234375,63.74365234375,63.74365234375,63.74365234375,63.74365234375,28.0749282836914,28.0749282836914,28.0749282836914,28.0749282836914,43.1461639404297,43.1461639404297,43.1461639404297,43.1461639404297,58.5522613525391,58.5522613525391,58.5522613525391,58.5522613525391,52.5274200439453,52.5274200439453,52.5274200439453,52.5274200439453,52.5274200439453,31.890754699707,31.890754699707,31.890754699707,31.890754699707,43.7802429199219,43.7802429199219,43.7802429199219,43.7802429199219,57.6792221069336,57.6792221069336,57.6792221069336,57.6792221069336,63.8751525878906,63.8751525878906,63.8751525878906,63.8751525878906,63.8751525878906,63.7077484130859,63.7077484130859,63.7077484130859,63.7077484130859,63.7077484130859,24.9929504394531,24.9929504394531,24.9929504394531,24.9929504394531,39.7291641235352,39.7291641235352,39.7291641235352,39.7291641235352,55.1352615356445,55.1352615356445,55.1352615356445,55.1352615356445,63.6757049560547,63.6757049560547,63.6757049560547,63.6757049560547,63.6757049560547,30.5190582275391,30.5190582275391,30.5190582275391,30.5190582275391,34.7054443359375,34.7054443359375,34.7054443359375,34.7054443359375,43.2457809448242,43.2457809448242,43.2457809448242,43.2457809448242,57.9821014404297,57.9821014404297,57.9821014404297,57.9821014404297,63.6757125854492,63.6757125854492,63.6757125854492,63.6757125854492,63.6757125854492,30.5190658569336,30.5190658569336,30.5190658569336,30.5190658569336,45.9251098632812,45.9251098632812,45.9251098632812,45.9251098632812,60.661376953125,60.661376953125,60.661376953125,60.661376953125,60.1602325439453,60.1602325439453,60.1602325439453,60.1602325439453,60.1602325439453,30.8539886474609,30.8539886474609,30.8539886474609,30.8539886474609,45.9251174926758,45.9251174926758,45.9251174926758,45.9251174926758,61.1638107299805,61.1638107299805,61.1638107299805,61.1638107299805,51.9574356079102,51.9574356079102,51.9574356079102,51.9574356079102,51.9574356079102,33.0309448242188,33.0309448242188,33.0309448242188,33.0309448242188,48.4369888305664,48.4369888305664,48.4369888305664,48.4369888305664,63.8431396484375,63.8431396484375,63.8431396484375,63.8431396484375,63.8431396484375,23.6533279418945,23.6533279418945,23.6533279418945,23.6533279418945,39.2268295288086,39.2268295288086,39.2268295288086,39.2268295288086,53.6282348632812,53.6282348632812,53.6282348632812,53.6282348632812,63.843147277832,63.843147277832,63.843147277832,63.843147277832,63.843147277832,29.3468399047852,29.3468399047852,29.3468399047852,29.3468399047852,44.5854797363281,44.5854797363281,44.5854797363281,44.5854797363281,59.8241729736328,59.8241729736328,59.8241729736328,59.8241729736328,56.644775390625,56.644775390625,56.644775390625,56.644775390625,56.644775390625,32.8635101318359,32.8635101318359,32.8635101318359,32.8635101318359,48.2696075439453,48.2696075439453,48.2696075439453,48.2696075439453,63.6757049560547,63.6757049560547,63.6757049560547,63.6757049560547,27.8512649536133,27.8512649536133,27.8512649536133,27.8512649536133,27.8512649536133,36.3800735473633,36.3800735473633,36.3800735473633,36.3800735473633,51.1163940429688,51.1163940429688,51.1163940429688,51.1163940429688,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,25.9977645874023,25.9977645874023,25.9977645874023,25.9977645874023,41.2364044189453,41.2364044189453,41.2364044189453,41.2364044189453,55.4702835083008,55.4702835083008,55.4702835083008,55.4702835083008,63.6757736206055,63.6757736206055,63.6757736206055,63.6757736206055,63.6757736206055,31.8587341308594,31.8587341308594,31.8587341308594,31.8587341308594,46.7625122070312,46.7625122070312,46.7625122070312,46.7625122070312,60.9964065551758,60.9964065551758,60.9964065551758,60.9964065551758,47.9397888183594,47.9397888183594,47.9397888183594,47.9397888183594,47.9397888183594,33.3659133911133,33.3659133911133,33.3659133911133,33.3659133911133,48.102180480957,48.102180480957,48.102180480957,48.102180480957,63.1733093261719,63.1733093261719,63.1733093261719,63.1733093261719,32.5386123657227,32.5386123657227,32.5386123657227,32.5386123657227,32.5386123657227,35.2079544067383,35.2079544067383,35.2079544067383,35.2079544067383,50.6139984130859,50.6139984130859,50.6139984130859,50.6139984130859,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,26.8350296020508,26.8350296020508,26.8350296020508,26.8350296020508,41.5712966918945,41.5712966918945,41.5712966918945,41.5712966918945,55.6377868652344,55.6377868652344,55.6377868652344,55.6377868652344,62.8384094238281,62.8384094238281,62.8384094238281,62.8384094238281,63.8432083129883,63.8432083129883,63.8432083129883,63.8432083129883,63.8432083129883,25.8302917480469,25.8302917480469,25.8302917480469,25.8302917480469,41.0689849853516,41.0689849853516,41.0689849853516,41.0689849853516,55.1354217529297,55.1354217529297,55.1354217529297,55.1354217529297,63.8432159423828,63.8432159423828,63.8432159423828,63.8432159423828,63.8432159423828,26.500129699707,26.500129699707,26.500129699707,26.500129699707,41.73876953125,41.73876953125,41.73876953125,41.73876953125,56.4750366210938,56.4750366210938,56.4750366210938,56.4750366210938,63.8432235717773,63.8432235717773,63.8432235717773,63.8432235717773,63.8432235717773,28.844596862793,28.844596862793,28.844596862793,28.844596862793,42.9109802246094,42.9109802246094,42.9109802246094,42.9109802246094,56.9774703979492,56.9774703979492,56.9774703979492,56.9774703979492,63.6758270263672,63.6758270263672,63.6758270263672,63.6758270263672,63.6758270263672,31.5238723754883,31.5238723754883,31.5238723754883,31.5238723754883,46.0927352905273,46.0927352905273,46.0927352905273,46.0927352905273,61.3313217163086,61.3313217163086,61.3313217163086,61.3313217163086,49.613883972168,49.613883972168,49.613883972168,49.613883972168,49.613883972168,33.8682861328125,33.8682861328125,33.8682861328125,33.8682861328125,49.2743835449219,49.2743835449219,49.2743835449219,49.2743835449219,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,23.6532745361328,23.6532745361328,23.6532745361328,23.6532745361328,38.2220306396484,38.2220306396484,38.2220306396484,38.2220306396484,52.7908935546875,52.7908935546875,52.7908935546875,52.7908935546875,63.8430938720703,63.8430938720703,63.8430938720703,63.8430938720703,63.8430938720703,27.6722640991211,27.6722640991211,27.6722640991211,27.6722640991211,42.9108505249023,42.9108505249023,42.9108505249023,42.9108505249023,57.6471176147461,57.6471176147461,57.6471176147461,57.6471176147461,63.6756973266602,63.6756973266602,63.6756973266602,63.6756973266602,63.6756973266602,29.6817626953125,29.6817626953125,29.6817626953125,29.6817626953125,42.241081237793,42.241081237793,42.241081237793,42.241081237793,51.9536056518555,51.9536056518555,51.9536056518555,51.9536056518555,56.4749221801758,56.4749221801758,56.4749221801758,56.4749221801758,62.5034484863281,62.5034484863281,62.5034484863281,62.5034484863281,36.7236328125,36.7236328125,36.7236328125,36.7236328125,36.7236328125,32.1936340332031,32.1936340332031,32.1936340332031,32.1936340332031,40.399055480957,40.399055480957,40.399055480957,40.399055480957,52.7908630371094,52.7908630371094,52.7908630371094,52.7908630371094,60.1589965820312,60.1589965820312,60.1589965820312,60.1589965820312,63.8431167602539,63.8431167602539,63.8431167602539,63.8431167602539,63.8431167602539,22.4942855834961,22.4942855834961,22.4942855834961,22.4942855834961,22.4942855834961,35.7101974487305,35.7101974487305,35.7101974487305,35.7101974487305,49.7766876220703,49.7766876220703,49.7766876220703,49.7766876220703,63.8431243896484,63.8431243896484,63.8431243896484,63.8431243896484,63.8431243896484,23.6533126831055,23.6533126831055,23.6533126831055,23.6533126831055,39.0594100952148,39.0594100952148,39.0594100952148,39.0594100952148,54.4654541015625,54.4654541015625,54.4654541015625,54.4654541015625,63.843132019043,63.843132019043,63.843132019043,63.843132019043,63.843132019043,28.6769943237305,28.6769943237305,28.6769943237305,28.6769943237305,43.9156341552734,43.9156341552734,43.9156341552734,43.9156341552734,59.1542739868164,59.1542739868164,59.1542739868164,59.1542739868164,63.6757354736328,63.6757354736328,63.6757354736328,63.6757354736328,63.6757354736328,31.691291809082,31.691291809082,31.691291809082,31.691291809082,47.2648468017578,47.2648468017578,47.2648468017578,47.2648468017578,62.5034866333008,62.5034866333008,62.5034866333008,62.5034866333008,36.3888626098633,36.3888626098633,36.3888626098633,36.3888626098633,36.3888626098633,34.7055358886719,34.7055358886719,34.7055358886719,34.7055358886719,49.609260559082,49.609260559082,49.609260559082,49.609260559082,63.8431549072266,63.8431549072266,63.8431549072266,63.8431549072266,63.8431549072266,23.6533432006836,23.6533432006836,23.6533432006836,23.6533432006836,38.7244720458984,38.7244720458984,38.7244720458984,38.7244720458984,54.1305694580078,54.1305694580078,54.1305694580078,54.1305694580078,63.8431625366211,63.8431625366211,63.8431625366211,63.8431625366211,63.8431625366211,28.3421630859375,28.3421630859375,28.3421630859375,28.3421630859375,43.0783767700195,43.0783767700195,43.0783767700195,43.0783767700195,57.3123245239258,57.3123245239258,57.3123245239258,57.3123245239258,63.6757659912109,63.6757659912109,63.6757659912109,63.6757659912109,63.6757659912109,30.8540344238281,30.8540344238281,30.8540344238281,30.8540344238281,46.4275360107422,46.4275360107422,46.4275360107422,46.4275360107422,61.6662292480469,61.6662292480469,61.6662292480469,61.6662292480469,41.411018371582,41.411018371582,41.411018371582,41.411018371582,41.411018371582,34.5381088256836,34.5381088256836,34.5381088256836,34.5381088256836,49.1069183349609,49.1069183349609,49.1069183349609,49.1069183349609,63.843132019043,63.843132019043,63.843132019043,63.843132019043,31.1993713378906,31.1993713378906,31.1993713378906,31.1993713378906,31.1993713378906,35.2079467773438,35.2079467773438,35.2079467773438,35.2079467773438,50.9489593505859,50.9489593505859,50.9489593505859,50.9489593505859,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,31.0215148925781,31.0215148925781,31.0215148925781,31.0215148925781,46.2601013183594,46.2601013183594,46.2601013183594,46.2601013183594,60.4940490722656,60.4940490722656,60.4940490722656,60.4940490722656,54.4685668945312,54.4685668945312,54.4685668945312,54.4685668945312,54.4685668945312,33.3658752441406,33.3658752441406,33.3658752441406,33.3658752441406,47.0973968505859,47.0973968505859,47.0973968505859,47.0973968505859,51.6187515258789,51.6187515258789,51.6187515258789,51.6187515258789,62.3360900878906,62.3360900878906,62.3360900878906,62.3360900878906,40.9088363647461,40.9088363647461,40.9088363647461,40.9088363647461,40.9088363647461,34.2032241821289,34.2032241821289,34.2032241821289,34.2032241821289,49.2743530273438,49.2743530273438,49.2743530273438,49.2743530273438,62.5035552978516,62.5035552978516,62.5035552978516,62.5035552978516,47.1027984619141,47.1027984619141,47.1027984619141,47.1027984619141,47.1027984619141,33.8682632446289,33.8682632446289,33.8682632446289,33.8682632446289,49.1069030761719,49.1069030761719,49.1069030761719,49.1069030761719,63.5083084106445,63.5083084106445,63.5083084106445,63.5083084106445,32.5386428833008,32.5386428833008,32.5386428833008,32.5386428833008,32.5386428833008,34.5381011962891,34.5381011962891,34.5381011962891,34.5381011962891,49.4418258666992,49.4418258666992,49.4418258666992,49.4418258666992,63.8432312011719,63.8432312011719,63.8432312011719,63.8432312011719,63.8432312011719,29.1794662475586,29.1794662475586,29.1794662475586,29.1794662475586,40.0875701904297,40.0875701904297,40.0875701904297,40.0875701904297,50.9723663330078,50.9723663330078,50.9723663330078,50.9723663330078,63.8666000366211,63.8666000366211,63.8666000366211,63.8666000366211,63.8666000366211,23.7679138183594,23.7679138183594,23.7679138183594,23.7679138183594,38.5041275024414,38.5041275024414,38.5041275024414,38.5041275024414,53.575309753418,53.575309753418,53.575309753418,53.575309753418,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,63.9577331542969,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,32.0448760986328,32.0448760986328,32.0448760986328,32.0448760986328,47.1161117553711,47.1161117553711,47.1161117553711,47.1161117553711,62.3547515869141,62.3547515869141,62.3547515869141,62.3547515869141,20.5041885375977,20.5041885375977,20.5041885375977,20.5041885375977,20.5041885375977,36.3987808227539,36.3987808227539,36.3987808227539,36.3987808227539,40.0829010009766,40.0829010009766,40.0829010009766,40.0829010009766,53.8143692016602,53.8143692016602,53.8143692016602,53.8143692016602,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,26.1838760375977,26.1838760375977,26.1838760375977,26.1838760375977,41.2550582885742,41.2550582885742,41.2550582885742,41.2550582885742,55.9913787841797,55.9913787841797,55.9913787841797,55.9913787841797,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,30.3703231811523,30.3703231811523,30.3703231811523,30.3703231811523,44.771728515625,44.771728515625,44.771728515625,44.771728515625,59.8429107666016,59.8429107666016,59.8429107666016,59.8429107666016,46.1170501708984,46.1170501708984,46.1170501708984,46.1170501708984,46.1170501708984,32.7147369384766,32.7147369384766,32.7147369384766,32.7147369384766,47.1160888671875,47.1160888671875,47.1160888671875,47.1160888671875,61.349983215332,61.349983215332,61.349983215332,61.349983215332,34.7335739135742,34.7335739135742,34.7335739135742,34.7335739135742,34.7335739135742,35.0591506958008,35.0591506958008,35.0591506958008,35.0591506958008,50.4653015136719,50.4653015136719,50.4653015136719,50.4653015136719,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,31.0402297973633,31.0402297973633,31.0402297973633,31.0402297973633,46.6137847900391,46.6137847900391,46.6137847900391,46.6137847900391,61.3500518798828,61.3500518798828,61.3500518798828,61.3500518798828,32.5573348999023,32.5573348999023,32.5573348999023,32.5573348999023,32.5573348999023,33.8870162963867,33.8870162963867,33.8870162963867,33.8870162963867,49.6279754638672,49.6279754638672,49.6279754638672,49.6279754638672,63.3595504760742,63.3595504760742,63.3595504760742,63.3595504760742,23.0022811889648,23.0022811889648,23.0022811889648,23.0022811889648,38.4083251953125,38.4083251953125,38.4083251953125,38.4083251953125,53.3120498657227,53.3120498657227,53.3120498657227,53.3120498657227,63.6945266723633,63.6945266723633,63.6945266723633,63.6945266723633,63.6945266723633,30.2029113769531,30.2029113769531,30.2029113769531,30.2029113769531,44.2693481445312,44.2693481445312,44.2693481445312,44.2693481445312,58.8382110595703,58.8382110595703,58.8382110595703,58.8382110595703,52.1436462402344,52.1436462402344,52.1436462402344,52.1436462402344,52.1436462402344,32.7147827148438,32.7147827148438,32.7147827148438,32.7147827148438,48.1209335327148,48.1209335327148,48.1209335327148,48.1209335327148,63.3595199584961,63.3595199584961,63.3595199584961,63.3595199584961,23.0023040771484,23.0023040771484,23.0023040771484,23.0023040771484,38.4083480834961,38.4083480834961,38.4083480834961,38.4083480834961,53.312126159668,53.312126159668,53.312126159668,53.312126159668,63.6945495605469,63.6945495605469,63.6945495605469,63.6945495605469,63.6945495605469,30.2029876708984,30.2029876708984,30.2029876708984,30.2029876708984,44.7717971801758,44.7717971801758,44.7717971801758,44.7717971801758,60.1778945922852,60.1778945922852,60.1778945922852,60.1778945922852,38.2491226196289,38.2491226196289,38.2491226196289,38.2491226196289,38.2491226196289,33.7196044921875,33.7196044921875,33.7196044921875,33.7196044921875,48.9582443237305,48.9582443237305,48.9582443237305,48.9582443237305,63.8619155883789,63.8619155883789,63.8619155883789,63.8619155883789,23.002326965332,23.002326965332,23.002326965332,23.002326965332,38.2409133911133,38.2409133911133,38.2409133911133,38.2409133911133,45.2741317749023,45.2741317749023,45.2741317749023,45.2741317749023,51.8049774169922,51.8049774169922,51.8049774169922,51.8049774169922,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,28.026008605957,28.026008605957,28.026008605957,28.026008605957,42.427360534668,42.427360534668,42.427360534668,42.427360534668,55.6565093994141,55.6565093994141,55.6565093994141,55.6565093994141,63.694580078125,63.694580078125,63.694580078125,63.694580078125,63.694580078125,29.8681030273438,29.8681030273438,29.8681030273438,29.8681030273438,45.2741470336914,45.2741470336914,45.2741470336914,45.2741470336914,59.5080413818359,59.5080413818359,59.5080413818359,59.5080413818359,51.641487121582,51.641487121582,51.641487121582,51.641487121582,51.641487121582,32.5474319458008,32.5474319458008,32.5474319458008,32.5474319458008,47.7860717773438,47.7860717773438,47.7860717773438,47.7860717773438,63.1921157836914,63.1921157836914,63.1921157836914,63.1921157836914,23.0023574829102,23.0023574829102,23.0023574829102,23.0023574829102,38.2409439086914,38.2409439086914,38.2409439086914,38.2409439086914,52.9772644042969,52.9772644042969,52.9772644042969,52.9772644042969,63.6946029663086,63.6946029663086,63.6946029663086,63.6946029663086,63.6946029663086,30.3704986572266,30.3704986572266,30.3704986572266,30.3704986572266,45.9440536499023,45.9440536499023,45.9440536499023,45.9440536499023,61.0151824951172,61.0151824951172,61.0151824951172,61.0151824951172,42.4342803955078,42.4342803955078,42.4342803955078,42.4342803955078,42.4342803955078,34.0545196533203,34.0545196533203,34.0545196533203,34.0545196533203,49.1257553100586,49.1257553100586,49.1257553100586,49.1257553100586,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,22.1649169921875,22.1649169921875,22.1649169921875,22.1649169921875,36.7337417602539,36.7337417602539,36.7337417602539,36.7337417602539,52.1398391723633,52.1398391723633,52.1398391723633,52.1398391723633,63.8618698120117,63.8618698120117,63.8618698120117,63.8618698120117,63.8618698120117,26.0164108276367,26.0164108276367,26.0164108276367,26.0164108276367,40.9201354980469,40.9201354980469,40.9201354980469,40.9201354980469,55.1540298461914,55.1540298461914,55.1540298461914,55.1540298461914,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,23.3371505737305,23.3371505737305,23.3371505737305,23.3371505737305,30.7052307128906,30.7052307128906,30.7052307128906,30.7052307128906,40.5852813720703,40.5852813720703,40.5852813720703,40.5852813720703,55.8238677978516,55.8238677978516,55.8238677978516,55.8238677978516,63.8618850708008,63.8618850708008,63.8618850708008,63.8618850708008,63.8618850708008,29.1981201171875,29.1981201171875,29.1981201171875,29.1981201171875,43.2645568847656,43.2645568847656,43.2645568847656,43.2645568847656,57.4984512329102,57.4984512329102,57.4984512329102,57.4984512329102,63.8618927001953,63.8618927001953,63.8618927001953,63.8618927001953,63.8618927001953,28.5282974243164,28.5282974243164,28.5282974243164,28.5282974243164,42.7621917724609,42.7621917724609,42.7621917724609,42.7621917724609,57.1635971069336,57.1635971069336,57.1635971069336,57.1635971069336,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,63.8619003295898,30.5377960205078,30.5377960205078,30.5377960205078,30.5377960205078,45.6089782714844,45.6089782714844,45.6089782714844,45.6089782714844,60.6802139282227,60.6802139282227,60.6802139282227,60.6802139282227,33.5617523193359,33.5617523193359,33.5617523193359,33.5617523193359,33.5617523193359,34.5568389892578,34.5568389892578,34.5568389892578,34.5568389892578,49.460563659668,49.460563659668,49.460563659668,49.460563659668,63.8619155883789,63.8619155883789,63.8619155883789,63.8619155883789,63.8619155883789,25.1791687011719,25.1791687011719,25.1791687011719,25.1791687011719,40.4178085327148,40.4178085327148,40.4178085327148,40.4178085327148,55.1540756225586,55.1540756225586,55.1540756225586,55.1540756225586,63.6945190429688,63.6945190429688,63.6945190429688,63.6945190429688,63.6945190429688,31.0402450561523,31.0402450561523,31.0402450561523,31.0402450561523,45.9439163208008,45.9439163208008,45.9439163208008,45.9439163208008,59.8428955078125,59.8428955078125,59.8428955078125,59.8428955078125,44.9452590942383,44.9452590942383,44.9452590942383,44.9452590942383,44.9452590942383,33.2172012329102,33.2172012329102,33.2172012329102,33.2172012329102,48.288330078125,48.288330078125,48.288330078125,48.288330078125,62.8571395874023,62.8571395874023,62.8571395874023,62.8571395874023,22.667366027832,22.667366027832,22.667366027832,22.667366027832,37.9060211181641,37.9060211181641,37.9060211181641,37.9060211181641,52.4747772216797,52.4747772216797,52.4747772216797,52.4747772216797,63.861946105957,63.861946105957,63.861946105957,63.861946105957,63.861946105957,27.6910629272461,27.6910629272461,27.6910629272461,27.6910629272461,42.2598724365234,42.2598724365234,42.2598724365234,42.2598724365234,56.3263626098633,56.3263626098633,56.3263626098633,56.3263626098633,63.8619537353516,63.8619537353516,63.8619537353516,63.8619537353516,63.8619537353516,28.8632736206055,28.8632736206055,28.8632736206055,28.8632736206055,43.5995407104492,43.5995407104492,43.5995407104492,43.5995407104492,58.1684036254883,58.1684036254883,58.1684036254883,58.1684036254883,53.9851150512695,53.9851150512695,53.9851150512695,53.9851150512695,53.9851150512695,32.5473480224609,32.5473480224609,32.5473480224609,32.5473480224609,47.7859878540039,47.7859878540039,47.7859878540039,47.7859878540039,63.1920852661133,63.1920852661133,63.1920852661133,63.1920852661133,23.002326965332,23.002326965332,23.002326965332,23.002326965332,38.4083709716797,38.4083709716797,38.4083709716797,38.4083709716797,53.6470108032227,53.6470108032227,53.6470108032227,53.6470108032227,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,23.0023345947266,23.0023345947266,23.0023345947266,23.0023345947266,28.0260620117188,28.0260620117188,28.0260620117188,28.0260620117188,42.4274139404297,42.4274139404297,42.4274139404297,42.4274139404297,55.5509719848633,55.5509719848633,55.5509719848633,55.5509719848633,63.7565002441406,63.7565002441406,63.7565002441406,63.7565002441406,63.7565002441406,29.8026504516602,29.8026504516602,29.8026504516602,29.8026504516602,44.036491394043,44.036491394043,44.036491394043,44.036491394043,58.2703857421875,58.2703857421875,58.2703857421875,58.2703857421875,58.7744674682617,58.7744674682617,58.7744674682617,58.7744674682617,58.7744674682617,31.6446914672852,31.6446914672852,31.6446914672852,31.6446914672852,46.8832778930664,46.8832778930664,46.8832778930664,46.8832778930664,61.6195983886719,61.6195983886719,61.6195983886719,61.6195983886719,34.3334655761719,34.3334655761719,34.3334655761719,34.3334655761719,34.3334655761719,34.9938507080078,34.9938507080078,34.9938507080078,34.9938507080078,49.7301177978516,49.7301177978516,49.7301177978516,49.7301177978516,63.9640121459961,63.9640121459961,63.9640121459961,63.9640121459961,63.9640121459961,26.1186065673828,26.1186065673828,26.1186065673828,26.1186065673828,41.1897354125977,41.1897354125977,41.1897354125977,41.1897354125977,55.4236831665039,55.4236831665039,55.4236831665039,55.4236831665039,63.7966156005859,63.7966156005859,63.7966156005859,63.7966156005859,63.7966156005859,30.8074264526367,30.8074264526367,30.8074264526367,30.8074264526367,46.2134704589844,46.2134704589844,46.2134704589844,46.2134704589844,60.9497375488281,60.9497375488281,60.9497375488281,60.9497375488281,34.5008926391602,34.5008926391602,34.5008926391602,34.5008926391602,34.5008926391602,31.6445617675781,31.6445617675781,31.6445617675781,31.6445617675781,46.8832015991211,46.8832015991211,46.8832015991211,46.8832015991211,61.9543304443359,61.9543304443359,61.9543304443359,61.9543304443359,25.9631271362305,25.9631271362305,25.9631271362305,25.9631271362305,25.9631271362305,36.5007858276367,36.5007858276367,36.5007858276367,36.5007858276367,50.9021377563477,50.9021377563477,50.9021377563477,50.9021377563477,63.7964782714844,63.7964782714844,63.7964782714844,63.7964782714844,63.7964782714844,29.6350860595703,29.6350860595703,29.6350860595703,29.6350860595703,44.7062683105469,44.7062683105469,44.7062683105469,44.7062683105469,53.4140090942383,53.4140090942383,53.4140090942383,53.4140090942383,61.1171112060547,61.1171112060547,61.1171112060547,61.1171112060547,53.4174270629883,53.4174270629883,53.4174270629883,53.4174270629883,53.4174270629883,32.9841918945312,32.9841918945312,32.9841918945312,32.9841918945312,48.0553741455078,48.0553741455078,48.0553741455078,48.0553741455078,62.7916412353516,62.7916412353516,62.7916412353516,62.7916412353516,22.4476623535156,22.4476623535156,22.4476623535156,22.4476623535156,22.4476623535156,36.3333511352539,36.3333511352539,36.3333511352539,36.3333511352539,51.0696716308594,51.0696716308594,51.0696716308594,51.0696716308594,63.9639053344727,63.9639053344727,63.9639053344727,63.9639053344727,63.9639053344727,25.951042175293,25.951042175293,25.951042175293,25.951042175293,40.3523406982422,40.3523406982422,40.3523406982422,40.3523406982422,54.5862350463867,54.5862350463867,54.5862350463867,54.5862350463867,63.9639129638672,63.9639129638672,63.9639129638672,63.9639129638672,63.9639129638672,29.8025741577148,29.8025741577148,29.8025741577148,29.8025741577148,45.2086181640625,45.2086181640625,45.2086181640625,45.2086181640625,59.9448852539062,59.9448852539062,59.9448852539062,59.9448852539062,44.7124404907227,44.7124404907227,44.7124404907227,44.7124404907227,44.7124404907227,32.8168182373047,32.8168182373047,32.8168182373047,32.8168182373047,47.7204895019531,47.7204895019531,47.7204895019531,47.7204895019531,62.6242141723633,62.6242141723633,62.6242141723633,62.6242141723633,23.2717437744141,23.2717437744141,23.2717437744141,23.2717437744141,38.6778106689453,38.6778106689453,38.6778106689453,38.6778106689453,54.0838851928711,54.0838851928711,54.0838851928711,54.0838851928711,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,28.4629364013672,28.4629364013672,28.4629364013672,28.4629364013672,43.8689804077148,43.8689804077148,43.8689804077148,43.8689804077148,58.772705078125,58.772705078125,58.772705078125,58.772705078125,51.0738220214844,51.0738220214844,51.0738220214844,51.0738220214844,51.0738220214844,32.6493301391602,32.6493301391602,32.6493301391602,32.6493301391602,47.8879699707031,47.8879699707031,47.8879699707031,47.8879699707031,62.791748046875,62.791748046875,62.791748046875,62.791748046875,23.2717666625977,23.2717666625977,23.2717666625977,23.2717666625977,38.6778106689453,38.6778106689453,38.6778106689453,38.6778106689453,52.9117050170898,52.9117050170898,52.9117050170898,52.9117050170898,63.9639587402344,63.9639587402344,63.9639587402344,63.9639587402344,63.9639587402344,28.7978744506836,28.7978744506836,28.7978744506836,28.7978744506836,44.2039184570312,44.2039184570312,44.2039184570312,44.2039184570312,59.1076965332031,59.1076965332031,59.1076965332031,59.1076965332031,56.0959701538086,56.0959701538086,56.0959701538086,56.0959701538086,56.0959701538086,31.4772033691406,31.4772033691406,31.4772033691406,31.4772033691406,46.7158432006836,46.7158432006836,46.7158432006836,46.7158432006836,61.1171951293945,61.1171951293945,61.1171951293945,61.1171951293945,33.8312225341797,33.8312225341797,33.8312225341797,33.8312225341797,33.8312225341797,35.3287353515625,35.3287353515625,35.3287353515625,35.3287353515625,50.2324600219727,50.2324600219727,50.2324600219727,50.2324600219727,63.963981628418,63.963981628418,63.963981628418,63.963981628418,63.963981628418,25.6161499023438,25.6161499023438,25.6161499023438,25.6161499023438,40.5198745727539,40.5198745727539,40.5198745727539,40.5198745727539,55.088737487793,55.088737487793,55.088737487793,55.088737487793,62.1219024658203,62.1219024658203,62.1219024658203,62.1219024658203,63.7965850830078,63.7965850830078,63.7965850830078,63.7965850830078,63.7965850830078,30.8073425292969,30.8073425292969,30.8073425292969,30.8073425292969,46.0460357666016,46.0460357666016,46.0460357666016,46.0460357666016,61.1171646118164,61.1171646118164,61.1171646118164,61.1171646118164,37.6815414428711,37.6815414428711,37.6815414428711,37.6815414428711,37.6815414428711,34.1565551757812,34.1565551757812,34.1565551757812,34.1565551757812,49.2276840209961,49.2276840209961,49.2276840209961,49.2276840209961,63.9640045166016,63.9640045166016,63.9640045166016,63.9640045166016,63.9640045166016,23.2718200683594,23.2718200683594,23.2718200683594,23.2718200683594,38.1755294799805,38.1755294799805,38.1755294799805,38.1755294799805,52.7443008422852,52.7443008422852,52.7443008422852,52.7443008422852,63.7966079711914,63.7966079711914,63.7966079711914,63.7966079711914,63.7966079711914,31.3097915649414,31.3097915649414,31.3097915649414,31.3097915649414,46.7158889770508,46.7158889770508,46.7158889770508,46.7158889770508,62.2894439697266,62.2894439697266,62.2894439697266,62.2894439697266,24.4566345214844,24.4566345214844,24.4566345214844,24.4566345214844,24.4566345214844,36.3334732055664,36.3334732055664,36.3334732055664,36.3334732055664,51.9070281982422,51.9070281982422,51.9070281982422,51.9070281982422,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,30.639762878418,30.639762878418,30.639762878418,30.639762878418,45.0411148071289,45.0411148071289,45.0411148071289,45.0411148071289,59.9448928833008,59.9448928833008,59.9448928833008,59.9448928833008,43.0383529663086,43.0383529663086,43.0383529663086,43.0383529663086,43.0383529663086,33.6540603637695,33.6540603637695,33.6540603637695,33.6540603637695,48.557731628418,48.557731628418,48.557731628418,48.557731628418,63.9638824462891,63.9638824462891,63.9638824462891,63.9638824462891,63.9638824462891,23.4391021728516,23.4391021728516,23.4391021728516,23.4391021728516,38.8451995849609,38.8451995849609,38.8451995849609,38.8451995849609,53.7489242553711,53.7489242553711,53.7489242553711,53.7489242553711,63.7964859008789,63.7964859008789,63.7964859008789,63.7964859008789,63.7964859008789,30.4723815917969,30.4723815917969,30.4723815917969,30.4723815917969,45.2086486816406,45.2086486816406,45.2086486816406,45.2086486816406,48.7252044677734,48.7252044677734,48.7252044677734,48.7252044677734,57.4330520629883,57.4330520629883,57.4330520629883,57.4330520629883,63.9638977050781,63.9638977050781,63.9638977050781,63.9638977050781,63.9638977050781,26.2858963012695,26.2858963012695,26.2858963012695,26.2858963012695,34.8262329101562,34.8262329101562,34.8262329101562,34.8262329101562,42.8642501831055,42.8642501831055,42.8642501831055,42.8642501831055,52.576789855957,52.576789855957,52.576789855957,52.576789855957,62.7916488647461,62.7916488647461,62.7916488647461,62.7916488647461,57.4351425170898,57.4351425170898,57.4351425170898,57.4351425170898,57.4351425170898,31.4770889282227,31.4770889282227,31.4770889282227,31.4770889282227,46.7157821655273,46.7157821655273,46.7157821655273,46.7157821655273,61.284538269043,61.284538269043,61.284538269043,61.284538269043,37.6814575195312,37.6814575195312,37.6814575195312,37.6814575195312,37.6814575195312,34.8262481689453,34.8262481689453,34.8262481689453,34.8262481689453,48.5577697753906,48.5577697753906,48.5577697753906,48.5577697753906,63.7964096069336,63.7964096069336,63.7964096069336,63.7964096069336,23.2717361450195,23.2717361450195,23.2717361450195,23.2717361450195,39.0126953125,39.0126953125,39.0126953125,39.0126953125,54.2513885498047,54.2513885498047,54.2513885498047,54.2513885498047,63.7965240478516,63.7965240478516,63.7965240478516,63.7965240478516,63.7965240478516,30.8073348999023,30.8073348999023,30.8073348999023,30.8073348999023,45.0412292480469,45.0412292480469,45.0412292480469,45.0412292480469,60.4472732543945,60.4472732543945,60.4472732543945,60.4472732543945,42.0339889526367,42.0339889526367,42.0339889526367,42.0339889526367,42.0339889526367,33.6541213989258,33.6541213989258,33.6541213989258,33.6541213989258,48.8927612304688,48.8927612304688,48.8927612304688,48.8927612304688,63.7964324951172,63.7964324951172,63.7964324951172,63.7964324951172,23.1042861938477,23.1042861938477,23.1042861938477,23.1042861938477,38.8453140258789,38.8453140258789,38.8453140258789,38.8453140258789,53.7489852905273,53.7489852905273,53.7489852905273,53.7489852905273,63.9639511108398,63.9639511108398,63.9639511108398,63.9639511108398,63.9639511108398,27.7931213378906,27.7931213378906,27.7931213378906,27.7931213378906,43.5340805053711,43.5340805053711,43.5340805053711,43.5340805053711,58.7727203369141,58.7727203369141,58.7727203369141,58.7727203369141,57.1003875732422,57.1003875732422,57.1003875732422,57.1003875732422,57.1003875732422,32.4818878173828,32.4818878173828,32.4818878173828,32.4818878173828,47.9113464355469,47.9113464355469,47.9113464355469,47.9113464355469,63.1499862670898,63.1499862670898,63.1499862670898,63.1499862670898,23.3862686157227,23.3862686157227,23.3862686157227,23.3862686157227,38.6249084472656,38.6249084472656,38.6249084472656,38.6249084472656,53.6960906982422,53.6960906982422,53.6960906982422,53.6960906982422,63.911003112793,63.911003112793,63.911003112793,63.911003112793,63.911003112793,28.4100036621094,28.4100036621094,28.4100036621094,28.4100036621094,43.9835052490234,43.9835052490234,43.9835052490234,43.9835052490234,57.7150268554688,57.7150268554688,57.7150268554688,57.7150268554688,58.8888854980469,58.8888854980469,58.8888854980469,58.8888854980469,58.8888854980469,31.7591094970703,31.7591094970703,31.7591094970703,31.7591094970703,46.3279190063477,46.3279190063477,46.3279190063477,46.3279190063477,61.3991546630859,61.3991546630859,61.3991546630859,61.3991546630859,33.2760543823242,33.2760543823242,33.2760543823242,33.2760543823242,33.2760543823242,27.5726776123047,27.5726776123047,27.5726776123047,27.5726776123047,32.4290008544922,32.4290008544922,32.4290008544922,32.4290008544922,46.6628952026367,46.6628952026367,46.6628952026367,46.6628952026367,61.5665664672852,61.5665664672852,61.5665664672852,61.5665664672852,33.2760620117188,33.2760620117188,33.2760620117188,33.2760620117188,33.2760620117188,33.4337005615234,33.4337005615234,33.4337005615234,33.4337005615234,48.0025100708008,48.0025100708008,48.0025100708008,48.0025100708008,61.399169921875,61.399169921875,61.399169921875,61.399169921875,34.6153030395508,34.6153030395508,34.6153030395508,34.6153030395508,34.6153030395508,34.7733688354492,34.7733688354492,34.7733688354492,34.7733688354492,49.5096893310547,49.5096893310547,49.5096893310547,49.5096893310547,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,30.2520751953125,30.2520751953125,30.2520751953125,30.2520751953125,45.1557998657227,45.1557998657227,45.1557998657227,45.1557998657227,60.3943862915039,60.3943862915039,60.3943862915039,60.3943862915039,37.1263809204102,37.1263809204102,37.1263809204102,37.1263809204102,37.1263809204102,34.6059799194336,34.6059799194336,34.6059799194336,34.6059799194336,48.8398208618164,48.8398208618164,48.8398208618164,48.8398208618164,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,20.7068481445312,20.7068481445312,20.7068481445312,20.7068481445312,20.7068481445312,36.7827224731445,36.7827224731445,36.7827224731445,36.7827224731445,51.8539581298828,51.8539581298828,51.8539581298828,51.8539581298828,63.9109039306641,63.9109039306641,63.9109039306641,63.9109039306641,63.9109039306641,30.586799621582,30.586799621582,30.586799621582,30.586799621582,44.8206939697266,44.8206939697266,44.8206939697266,44.8206939697266,59.7244186401367,59.7244186401367,59.7244186401367,59.7244186401367,43.1527938842773,43.1527938842773,43.1527938842773,43.1527938842773,43.1527938842773,34.2708740234375,34.2708740234375,34.2708740234375,34.2708740234375,49.5095138549805,49.5095138549805,49.5095138549805,49.5095138549805,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,30.7542724609375,30.7542724609375,30.7542724609375,30.7542724609375,45.9929656982422,45.9929656982422,45.9929656982422,45.9929656982422,58.3847732543945,58.3847732543945,58.3847732543945,58.3847732543945,62.7387237548828,62.7387237548828,62.7387237548828,62.7387237548828,37.7958755493164,37.7958755493164,37.7958755493164,37.7958755493164,37.7958755493164,34.9407196044922,34.9407196044922,34.9407196044922,34.9407196044922,49.8444976806641,49.8444976806641,49.8444976806641,49.8444976806641,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,23.3862075805664,23.3862075805664,23.3862075805664,23.3862075805664,38.1224746704102,38.1224746704102,38.1224746704102,38.1224746704102,52.8586883544922,52.8586883544922,52.8586883544922,52.8586883544922,63.9109420776367,63.9109420776367,63.9109420776367,63.9109420776367,63.9109420776367,28.2424850463867,28.2424850463867,28.2424850463867,28.2424850463867,43.1461563110352,43.1461563110352,43.1461563110352,43.1461563110352,58.049934387207,58.049934387207,58.049934387207,58.049934387207,52.8622741699219,52.8622741699219,52.8622741699219,52.8622741699219,52.8622741699219,33.098762512207,33.098762512207,33.098762512207,33.098762512207,48.6722640991211,48.6722640991211,48.6722640991211,48.6722640991211,63.576042175293,63.576042175293,63.576042175293,63.576042175293,23.38623046875,23.38623046875,23.38623046875,23.38623046875,38.7922744750977,38.7922744750977,38.7922744750977,38.7922744750977,53.8634567260742,53.8634567260742,53.8634567260742,53.8634567260742,63.9109649658203,63.9109649658203,63.9109649658203,63.9109649658203,63.9109649658203,28.9123382568359,28.9123382568359,28.9123382568359,28.9123382568359,44.3183822631836,44.3183822631836,44.3183822631836,44.3183822631836,59.5570755004883,59.5570755004883,59.5570755004883,59.5570755004883,43.1528549194336,43.1528549194336,43.1528549194336,43.1528549194336,43.1528549194336,33.6011581420898,33.6011581420898,33.6011581420898,33.6011581420898,48.3374252319336,48.3374252319336,48.3374252319336,48.3374252319336,63.0736389160156,63.0736389160156,63.0736389160156,63.0736389160156,20.8881072998047,20.8881072998047,20.8881072998047,20.8881072998047,20.8881072998047,36.4478912353516,36.4478912353516,36.4478912353516,36.4478912353516,51.5190734863281,51.5190734863281,51.5190734863281,51.5190734863281,63.9109878540039,63.9109878540039,63.9109878540039,63.9109878540039,63.9109878540039,29.2472763061523,29.2472763061523,29.2472763061523,29.2472763061523,44.1510009765625,44.1510009765625,44.1510009765625,44.1510009765625,59.0546722412109,59.0546722412109,59.0546722412109,59.0546722412109,50.6860656738281,50.6860656738281,50.6860656738281,50.6860656738281,50.6860656738281,31.9266052246094,31.9266052246094,31.9266052246094,31.9266052246094,47.332649230957,47.332649230957,47.332649230957,47.332649230957,61.5665969848633,61.5665969848633,61.5665969848633,61.5665969848633,28.0865097045898,28.0865097045898,28.0865097045898,28.0865097045898,28.0865097045898,35.9455947875977,35.9455947875977,35.9455947875977,35.9455947875977,51.1842346191406,51.1842346191406,51.1842346191406,51.1842346191406,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,27.5726699829102,27.5726699829102,27.5726699829102,27.5726699829102,42.1414794921875,42.1414794921875,42.1414794921875,42.1414794921875,57.3801193237305,57.3801193237305,57.3801193237305,57.3801193237305,59.2237014770508,59.2237014770508,59.2237014770508,59.2237014770508,59.2237014770508,31.5917129516602,31.5917129516602,31.5917129516602,31.5917129516602,46.1604690551758,46.1604690551758,46.1604690551758,46.1604690551758,61.3991088867188,61.3991088867188,61.3991088867188,61.3991088867188,63.9110260009766,63.9110260009766,63.9110260009766,63.9110260009766,63.9110260009766,33.2760620117188,33.2760620117188,33.2760620117188,33.2760620117188,33.2760620117188,34.9408721923828,34.9408721923828,34.9408721923828,34.9408721923828,49.1747131347656,49.1747131347656,49.1747131347656,49.1747131347656,63.7435760498047,63.7435760498047,63.7435760498047,63.7435760498047,23.3863067626953,23.3863067626953,23.3863067626953,23.3863067626953,38.6249465942383,38.6249465942383,38.6249465942383,38.6249465942383,53.0262451171875,53.0262451171875,53.0262451171875,53.0262451171875,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,63.7436370849609,30.9218521118164,30.9218521118164,30.9218521118164,30.9218521118164,45.8256301879883,45.8256301879883,45.8256301879883,45.8256301879883,60.8968124389648,60.8968124389648,60.8968124389648,60.8968124389648,38.800422668457,38.800422668457,38.800422668457,38.800422668457,38.800422668457,34.7733840942383,34.7733840942383,34.7733840942383,34.7733840942383,50.3469924926758,50.3469924926758,50.3469924926758,50.3469924926758,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,24.7257766723633,24.7257766723633,24.7257766723633,24.7257766723633,40.1319274902344,40.1319274902344,40.1319274902344,40.1319274902344,54.1983642578125,54.1983642578125,54.1983642578125,54.1983642578125,63.7434997558594,63.7434997558594,63.7434997558594,63.7434997558594,63.7434997558594,30.7542572021484,30.7542572021484,30.7542572021484,30.7542572021484,45.6580352783203,45.6580352783203,45.6580352783203,45.6580352783203,60.8966751098633,60.8966751098633,60.8966751098633,60.8966751098633,33.4433517456055,33.4433517456055,33.4433517456055,33.4433517456055,33.4433517456055,34.7733001708984,34.7733001708984,34.7733001708984,34.7733001708984,49.007194519043,49.007194519043,49.007194519043,49.007194519043,63.9109191894531,63.9109191894531,63.9109191894531,63.9109191894531,63.9109191894531,28.9122924804688,28.9122924804688,28.9122924804688,28.9122924804688,44.4857940673828,44.4857940673828,44.4857940673828,44.4857940673828,60.226806640625,60.226806640625,60.226806640625,60.226806640625,47.8401260375977,47.8401260375977,47.8401260375977,47.8401260375977,47.8401260375977,33.4336013793945,33.4336013793945,33.4336013793945,33.4336013793945,48.5048370361328,48.5048370361328,48.5048370361328,48.5048370361328,56.2078323364258,56.2078323364258,56.2078323364258,56.2078323364258,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,23.3862075805664,23.3862075805664,23.3862075805664,23.3862075805664,38.9597091674805,38.9597091674805,38.9597091674805,38.9597091674805,53.5285186767578,53.5285186767578,53.5285186767578,53.5285186767578,63.743537902832,63.743537902832,63.743537902832,63.743537902832,63.743537902832,30.41943359375,30.41943359375,30.41943359375,30.41943359375,45.8254776000977,45.8254776000977,45.8254776000977,45.8254776000977,59.3895950317383,59.3895950317383,59.3895950317383,59.3895950317383,53.3644866943359,53.3644866943359,53.3644866943359,53.3644866943359,53.3644866943359,32.9312515258789,32.9312515258789,32.9312515258789,32.9312515258789,48.1698913574219,48.1698913574219,48.1698913574219,48.1698913574219,63.0736694335938,63.0736694335938,63.0736694335938,63.0736694335938,22.0465545654297,22.0465545654297,22.0465545654297,22.0465545654297,38.1224975585938,38.1224975585938,38.1224975585938,38.1224975585938,53.0262222290039,53.0262222290039,53.0262222290039,53.0262222290039,63.9109649658203,63.9109649658203,63.9109649658203,63.9109649658203,63.9109649658203,23.3862380981445,23.3862380981445,23.3862380981445,23.3862380981445,33.9003067016602,33.9003067016602,33.9003067016602,33.9003067016602,46.1246566772461,46.1246566772461,46.1246566772461,46.1246566772461,59.3538589477539,59.3538589477539,59.3538589477539,59.3538589477539,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,63.8752136230469,23.6533508300781,23.6533508300781,23.6533508300781,23.6533508300781,37.5523300170898,37.5523300170898,37.5523300170898,37.5523300170898,52.2885437011719,52.2885437011719,52.2885437011719,52.2885437011719,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,31.0214385986328,31.0214385986328,31.0214385986328,31.0214385986328,45.9252166748047,45.9252166748047,45.9252166748047,45.9252166748047,61.3313140869141,61.3313140869141,61.3313140869141,61.3313140869141,49.6138229370117,49.6138229370117,49.6138229370117,49.6138229370117,49.6138229370117,33.0309906005859,33.0309906005859,33.0309906005859,33.0309906005859,48.4370346069336,48.4370346069336,48.4370346069336,48.4370346069336,63.5082168579102,63.5082168579102,63.5082168579102,63.5082168579102,30.6971588134766,30.6971588134766,30.6971588134766,30.6971588134766,30.6971588134766,35.8777770996094,35.8777770996094,35.8777770996094,35.8777770996094,51.283821105957,51.283821105957,51.283821105957,51.283821105957,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,63.8431930541992,25.3279571533203,25.3279571533203,25.3279571533203,25.3279571533203,40.7340545654297,40.7340545654297,40.7340545654297,40.7340545654297,55.1353530883789,55.1353530883789,55.1353530883789,55.1353530883789,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,28.3422012329102,28.3422012329102,28.3422012329102,28.3422012329102,43.7482986450195,43.7482986450195,43.7482986450195,43.7482986450195,58.8194808959961,58.8194808959961,58.8194808959961,58.8194808959961,63.6758041381836,63.6758041381836,63.6758041381836,63.6758041381836,63.6758041381836,31.1889343261719,31.1889343261719,31.1889343261719,31.1889343261719,46.2601165771484,46.2601165771484,46.2601165771484,46.2601165771484,61.331298828125,61.331298828125,61.331298828125,61.331298828125,49.9486694335938,49.9486694335938,49.9486694335938,49.9486694335938,49.9486694335938,24.3232345581055,24.3232345581055,24.3232345581055,24.3232345581055,33.5334014892578,33.5334014892578,33.5334014892578,33.5334014892578,47.5997848510742,47.5997848510742,47.5997848510742,47.5997848510742,61.8336791992188,61.8336791992188,61.8336791992188,61.8336791992188,49.9486770629883,49.9486770629883,49.9486770629883,49.9486770629883,49.9486770629883,32.0262908935547,32.0262908935547,32.0262908935547,32.0262908935547,45.5903015136719,45.5903015136719,45.5903015136719,45.5903015136719,60.494026184082,60.494026184082,60.494026184082,60.494026184082,56.812255859375,56.812255859375,56.812255859375,56.812255859375,56.812255859375,31.8588409423828,31.8588409423828,31.8588409423828,31.8588409423828,47.0974807739258,47.0974807739258,47.0974807739258,47.0974807739258,61.3313751220703,61.3313751220703,61.3313751220703,61.3313751220703,59.1559219360352,59.1559219360352,59.1559219360352,59.1559219360352,59.1559219360352,31.8588485717773,31.8588485717773,31.8588485717773,31.8588485717773,46.427604675293,46.427604675293,46.427604675293,46.427604675293,60.6615524291992,60.6615524291992,60.6615524291992,60.6615524291992,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,36.5281372070312,36.5281372070312,36.5281372070312,36.5281372070312,51.0968933105469,51.0968933105469,51.0968933105469,51.0968933105469,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,25.9783172607422,25.9783172607422,25.9783172607422,25.9783172607422,40.5470733642578,40.5470733642578,40.5470733642578,40.5470733642578,55.4508514404297,55.4508514404297,55.4508514404297,55.4508514404297,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,29.8297958374023,29.8297958374023,29.8297958374023,29.8297958374023,44.5661163330078,44.5661163330078,44.5661163330078,44.5661163330078,59.9721603393555,59.9721603393555,59.9721603393555,59.9721603393555,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,47.2507781982422,47.2507781982422,47.2507781982422,47.2507781982422,47.2507781982422,32.5091247558594,32.5091247558594,32.5091247558594,32.5091247558594,47.4128494262695,47.4128494262695,47.4128494262695,47.4128494262695,61.9817123413086,61.9817123413086,61.9817123413086,61.9817123413086,39.7175979614258,39.7175979614258,39.7175979614258,39.7175979614258,39.7175979614258,33.0115051269531,33.0115051269531,33.0115051269531,33.0115051269531,46.5756225585938,46.5756225585938,46.5756225585938,46.5756225585938,60.9769744873047,60.9769744873047,60.9769744873047,60.9769744873047,39.885009765625,39.885009765625,39.885009765625,39.885009765625,39.885009765625,33.8488540649414,33.8488540649414,33.8488540649414,33.8488540649414,49.0874938964844,49.0874938964844,49.0874938964844,49.0874938964844,63.1539306640625,63.1539306640625,63.1539306640625,63.1539306640625,30.510383605957,30.510383605957,30.510383605957,30.510383605957,30.510383605957,34.5186920166016,34.5186920166016,34.5186920166016,34.5186920166016,49.0874481201172,49.0874481201172,49.0874481201172,49.0874481201172,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,23.633903503418,23.633903503418,23.633903503418,23.633903503418,38.7051391601562,38.7051391601562,38.7051391601562,38.7051391601562,53.44140625,53.44140625,53.44140625,53.44140625,63.9912338256836,63.9912338256836,63.9912338256836,63.9912338256836,63.9912338256836,29.1600112915039,29.1600112915039,29.1600112915039,29.1600112915039,44.2311935424805,44.2311935424805,44.2311935424805,44.2311935424805,59.3024291992188,59.3024291992188,59.3024291992188,59.3024291992188,46.0789947509766,46.0789947509766,46.0789947509766,46.0789947509766,46.0789947509766,33.513916015625,33.513916015625,33.513916015625,33.513916015625,48.4176406860352,48.4176406860352,48.4176406860352,48.4176406860352,63.8237915039062,63.8237915039062,63.8237915039062,63.8237915039062,22.9641494750977,22.9641494750977,22.9641494750977,22.9641494750977,37.7003631591797,37.7003631591797,37.7003631591797,37.7003631591797,52.6040878295898,52.6040878295898,52.6040878295898,52.6040878295898,63.9912567138672,63.9912567138672,63.9912567138672,63.9912567138672,63.9912567138672,29.6624603271484,29.6624603271484,29.6624603271484,29.6624603271484,44.733642578125,44.733642578125,44.733642578125,44.733642578125,58.9674835205078,58.9674835205078,58.9674835205078,58.9674835205078,49.7619094848633,49.7619094848633,49.7619094848633,49.7619094848633,49.7619094848633,32.8441619873047,32.8441619873047,32.8441619873047,32.8441619873047,48.0827484130859,48.0827484130859,48.0827484130859,48.0827484130859,63.1539840698242,63.1539840698242,63.1539840698242,63.1539840698242,22.9641723632812,22.9641723632812,22.9641723632812,22.9641723632812,38.5376739501953,38.5376739501953,38.5376739501953,38.5376739501953,52.939079284668,52.939079284668,52.939079284668,52.939079284668,63.9912796020508,63.9912796020508,63.9912796020508,63.9912796020508,63.9912796020508,27.3180236816406,27.3180236816406,27.3180236816406,27.3180236816406,42.5567169189453,42.5567169189453,42.5567169189453,42.5567169189453,57.7953567504883,57.7953567504883,57.7953567504883,57.7953567504883,59.1365661621094,59.1365661621094,59.1365661621094,59.1365661621094,59.1365661621094,31.504524230957,31.504524230957,31.504524230957,31.504524230957,46.9105682373047,46.9105682373047,46.9105682373047,46.9105682373047,61.9817504882812,61.9817504882812,61.9817504882812,61.9817504882812,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,63.9912948608398,25.1411437988281,25.1411437988281,25.1411437988281,25.1411437988281,37.5329513549805,37.5329513549805,37.5329513549805,37.5329513549805,51.4319839477539,51.4319839477539,51.4319839477539,51.4319839477539,63.9913024902344,63.9913024902344,63.9913024902344,63.9913024902344,63.9913024902344,31.8497009277344,31.8497009277344,31.8497009277344,31.8497009277344,31.8497009277344,34.8536376953125,34.8536376953125,34.8536376953125,34.8536376953125,49.7574157714844,49.7574157714844,49.7574157714844,49.7574157714844,63.9913101196289,63.9913101196289,63.9913101196289,63.9913101196289,63.9913101196289,30.4997482299805,30.4997482299805,30.4997482299805,30.4997482299805,43.0591201782227,43.0591201782227,43.0591201782227,43.0591201782227,57.2930145263672,57.2930145263672,57.2930145263672,57.2930145263672,63.8239135742188,63.8239135742188,63.8239135742188,63.8239135742188,63.8239135742188,29.8299255371094,29.8299255371094,29.8299255371094,29.8299255371094,42.2217864990234,42.2217864990234,42.2217864990234,42.2217864990234,54.6137008666992,54.6137008666992,54.6137008666992,54.6137008666992,63.991325378418,63.991325378418,63.991325378418,63.991325378418,63.991325378418,24.4712905883789,24.4712905883789,24.4712905883789,24.4712905883789,39.2076110839844,39.2076110839844,39.2076110839844,39.2076110839844,53.6089096069336,53.6089096069336,53.6089096069336,53.6089096069336,63.9913330078125,63.9913330078125,63.9913330078125,63.9913330078125,63.9913330078125,28.8250350952148,28.8250350952148,28.8250350952148,28.8250350952148,43.3938980102539,43.3938980102539,43.3938980102539,43.3938980102539,58.4650802612305,58.4650802612305,58.4650802612305,58.4650802612305,58.2994384765625,58.2994384765625,58.2994384765625,58.2994384765625,58.2994384765625,31.8392791748047,31.8392791748047,31.8392791748047,31.8392791748047,45.5708541870117,45.5708541870117,45.5708541870117,45.5708541870117,60.3070678710938,60.3070678710938,60.3070678710938,60.3070678710938,41.3916244506836,41.3916244506836,41.3916244506836,41.3916244506836,41.3916244506836,34.0162353515625,34.0162353515625,34.0162353515625,34.0162353515625,48.0827255249023,48.0827255249023,48.0827255249023,48.0827255249023,62.9864501953125,62.9864501953125,62.9864501953125,62.9864501953125,22.9640960693359,22.9640960693359,22.9640960693359,22.9640960693359,32.0068054199219,32.0068054199219,32.0068054199219,32.0068054199219,35.1884994506836,35.1884994506836,35.1884994506836,35.1884994506836,49.7572555541992,49.7572555541992,49.7572555541992,49.7572555541992,63.9912033081055,63.9912033081055,63.9912033081055,63.9912033081055,63.9912033081055,25.3084564208984,25.3084564208984,25.3084564208984,25.3084564208984,39.7098083496094,39.7098083496094,39.7098083496094,39.7098083496094,54.7810440063477,54.7810440063477,54.7810440063477,54.7810440063477,63.9912109375,63.9912109375,63.9912109375,63.9912109375,63.9912109375,28.1552963256836,28.1552963256836,28.1552963256836,28.1552963256836,43.3938827514648,43.3938827514648,43.3938827514648,43.3938827514648,58.6558837890625,58.6558837890625,58.6558837890625,58.6558837890625,58.4901885986328,58.4901885986328,58.4901885986328,58.4901885986328,58.4901885986328,31.7863464355469,31.7863464355469,31.7863464355469,31.7863464355469,46.5226135253906,46.5226135253906,46.5226135253906,46.5226135253906,60.7565078735352,60.7565078735352,60.7565078735352,60.7565078735352,41.6735000610352,41.6735000610352,41.6735000610352,41.6735000610352,41.6735000610352,33.4609298706055,33.4609298706055,33.4609298706055,33.4609298706055,48.1972503662109,48.1972503662109,48.1972503662109,48.1972503662109,62.9335174560547,62.9335174560547,62.9335174560547,62.9335174560547,23.0786209106445,23.0786209106445,23.0786209106445,23.0786209106445,38.1497497558594,38.1497497558594,38.1497497558594,38.1497497558594,52.2162399291992,52.2162399291992,52.2162399291992,52.2162399291992,63.770866394043,63.770866394043,63.770866394043,63.770866394043,63.770866394043,30.9491348266602,30.9491348266602,30.9491348266602,30.9491348266602,46.1877212524414,46.1877212524414,46.1877212524414,46.1877212524414,61.2589569091797,61.2589569091797,61.2589569091797,61.2589569091797,29.9552307128906,29.9552307128906,29.9552307128906,29.9552307128906,29.9552307128906,35.4704437255859,35.4704437255859,35.4704437255859,35.4704437255859,50.5416259765625,50.5416259765625,50.5416259765625,50.5416259765625,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,25.2555923461914,25.2555923461914,25.2555923461914,25.2555923461914,40.1593170166016,40.1593170166016,40.1593170166016,40.1593170166016,55.3979568481445,55.3979568481445,55.3979568481445,55.3979568481445,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,30.6142425537109,30.6142425537109,30.6142425537109,30.6142425537109,45.8528823852539,45.8528823852539,45.8528823852539,45.8528823852539,61.4264373779297,61.4264373779297,61.4264373779297,61.4264373779297,30.7922744750977,30.7922744750977,30.7922744750977,30.7922744750977,30.7922744750977,35.4704666137695,35.4704666137695,35.4704666137695,35.4704666137695,49.5369567871094,49.5369567871094,49.5369567871094,49.5369567871094,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,23.0786666870117,23.0786666870117,23.0786666870117,23.0786666870117,38.317253112793,38.317253112793,38.317253112793,38.317253112793,53.2210311889648,53.2210311889648,53.2210311889648,53.2210311889648,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,30.9491806030273,30.9491806030273,30.9491806030273,30.9491806030273,46.1878204345703,46.1878204345703,46.1878204345703,46.1878204345703,60.9240875244141,60.9240875244141,60.9240875244141,60.9240875244141,39.3299102783203,39.3299102783203,39.3299102783203,39.3299102783203,39.3299102783203,33.6284561157227,33.6284561157227,33.6284561157227,33.6284561157227,38.1498641967773,38.1498641967773,38.1498641967773,38.1498641967773,49.034553527832,49.034553527832,49.034553527832,49.034553527832,63.2684478759766,63.2684478759766,63.2684478759766,63.2684478759766,20.7342681884766,20.7342681884766,20.7342681884766,20.7342681884766,36.4752426147461,36.4752426147461,36.4752426147461,36.4752426147461,49.8719024658203,49.8719024658203,49.8719024658203,49.8719024658203,63.9383392333984,63.9383392333984,63.9383392333984,63.9383392333984,63.9383392333984,28.6047973632812,28.6047973632812,28.6047973632812,28.6047973632812,44.0108413696289,44.0108413696289,44.0108413696289,44.0108413696289,57.7423629760742,57.7423629760742,57.7423629760742,57.7423629760742,63.7709426879883,63.7709426879883,63.7709426879883,63.7709426879883,63.7709426879883,30.9491577148438,30.9491577148438,30.9491577148438,30.9491577148438,45.3505630493164,45.3505630493164,45.3505630493164,45.3505630493164,60.4216918945312,60.4216918945312,60.4216918945312,60.4216918945312,41.17138671875,41.17138671875,41.17138671875,41.17138671875,41.17138671875,33.6285400390625,33.6285400390625,33.6285400390625,33.6285400390625,47.5275192260742,47.5275192260742,47.5275192260742,47.5275192260742,61.2589874267578,61.2589874267578,61.2589874267578,61.2589874267578,34.8100357055664,34.8100357055664,34.8100357055664,34.8100357055664,34.8100357055664,31.6188430786133,31.6188430786133,31.6188430786133,31.6188430786133,46.8574829101562,46.8574829101562,46.8574829101562,46.8574829101562,62.0961227416992,62.0961227416992,62.0961227416992,62.0961227416992,22.924186706543,22.924186706543,22.924186706543,22.924186706543,22.924186706543,36.1402587890625,36.1402587890625,36.1402587890625,36.1402587890625,50.374153137207,50.374153137207,50.374153137207,50.374153137207,63.9382171630859,63.9382171630859,63.9382171630859,63.9382171630859,63.9382171630859,24.9205551147461,24.9205551147461,24.9205551147461,24.9205551147461,39.824333190918,39.824333190918,39.824333190918,39.824333190918,55.3978881835938,55.3978881835938,55.3978881835938,55.3978881835938,63.7708206176758,63.7708206176758,63.7708206176758,63.7708206176758,63.7708206176758,30.6141738891602,30.6141738891602,30.6141738891602,30.6141738891602,45.3504409790039,45.3504409790039,45.3504409790039,45.3504409790039,59.5842819213867,59.5842819213867,59.5842819213867,59.5842819213867,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,49.2066650390625,49.2066650390625,49.2066650390625,49.2066650390625,49.2066650390625,27.432487487793,27.432487487793,27.432487487793,27.432487487793,43.005989074707,43.005989074707,43.005989074707,43.005989074707,57.5748519897461,57.5748519897461,57.5748519897461,57.5748519897461,60.4227523803711,60.4227523803711,60.4227523803711,60.4227523803711,60.4227523803711,29.7769012451172,29.7769012451172,29.7769012451172,29.7769012451172,44.1782531738281,44.1782531738281,44.1782531738281,44.1782531738281,58.0771789550781,58.0771789550781,58.0771789550781,58.0771789550781,60.0879516601562,60.0879516601562,60.0879516601562,60.0879516601562,60.0879516601562,30.6141967773438,30.6141967773438,30.6141967773438,30.6141967773438,45.6853256225586,45.6853256225586,45.6853256225586,45.6853256225586,60.0866775512695,60.0866775512695,60.0866775512695,60.0866775512695,40.166862487793,40.166862487793,40.166862487793,40.166862487793,40.166862487793,33.9633560180664,33.9633560180664,33.9633560180664,33.9633560180664,49.0344848632812,49.0344848632812,49.0344848632812,49.0344848632812,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,24.9206008911133,24.9206008911133,24.9206008911133,24.9206008911133,39.9918365478516,39.9918365478516,39.9918365478516,39.9918365478516,55.2304763793945,55.2304763793945,55.2304763793945,55.2304763793945,63.770866394043,63.770866394043,63.770866394043,63.770866394043,63.770866394043,30.781623840332,30.781623840332,30.781623840332,30.781623840332,45.0155715942383,45.0155715942383,45.0155715942383,45.0155715942383,60.2542114257812,60.2542114257812,60.2542114257812,60.2542114257812,37.9906311035156,37.9906311035156,37.9906311035156,37.9906311035156,37.9906311035156,33.9633255004883,33.9633255004883,33.9633255004883,33.9633255004883,49.202018737793,49.202018737793,49.202018737793,49.202018737793,63.770881652832,63.770881652832,63.770881652832,63.770881652832,63.770881652832,30.6142349243164,30.6142349243164,30.6142349243164,30.6142349243164,45.685417175293,45.685417175293,45.685417175293,45.685417175293,60.9240036010742,60.9240036010742,60.9240036010742,60.9240036010742,33.8055419921875,33.8055419921875,33.8055419921875,33.8055419921875,33.8055419921875,34.6332244873047,34.6332244873047,34.6332244873047,34.6332244873047,49.5368957519531,49.5368957519531,49.5368957519531,49.5368957519531,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,63.7708969116211,30.9491653442383,30.9491653442383,30.9491653442383,30.9491653442383,46.0202941894531,46.0202941894531,46.0202941894531,46.0202941894531,60.9240188598633,60.9240188598633,60.9240188598633,60.9240188598633,40.6691284179688,40.6691284179688,40.6691284179688,40.6691284179688,40.6691284179688,33.7958984375,33.7958984375,33.7958984375,33.7958984375,49.034538269043,49.034538269043,49.034538269043,49.034538269043,63.9383163452148,63.9383163452148,63.9383163452148,63.9383163452148,63.9383163452148,25.2556228637695,25.2556228637695,25.2556228637695,25.2556228637695,39.8243789672852,39.8243789672852,39.8243789672852,39.8243789672852,54.5606994628906,54.5606994628906,54.5606994628906,54.5606994628906,63.7709197998047,63.7709197998047,63.7709197998047,63.7709197998047,63.7709197998047,30.2793045043945,30.2793045043945,30.2793045043945,30.2793045043945,44.5132522583008,44.5132522583008,44.5132522583008,44.5132522583008,58.7471466064453,58.7471466064453,58.7471466064453,58.7471466064453,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,48.871955871582,48.871955871582,48.871955871582,48.871955871582,48.871955871582,32.9586334228516,32.9586334228516,32.9586334228516,32.9586334228516,46.8576126098633,46.8576126098633,46.8576126098633,46.8576126098633,61.593879699707,61.593879699707,61.593879699707,61.593879699707,35.6470336914062,35.6470336914062,35.6470336914062,35.6470336914062,35.6470336914062,33.9633865356445,33.9633865356445,33.9633865356445,33.9633865356445,48.5322494506836,48.5322494506836,48.5322494506836,48.5322494506836,63.2685165405273,63.2685165405273,63.2685165405273,63.2685165405273,24.0961532592773,24.0961532592773,24.0961532592773,24.0961532592773,24.0961532592773,34.9681396484375,34.9681396484375,34.9681396484375,34.9681396484375,49.8718643188477,49.8718643188477,49.8718643188477,49.8718643188477,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,23.9160003662109,23.9160003662109,23.9160003662109,23.9160003662109,38.6522674560547,38.6522674560547,38.6522674560547,38.6522674560547,53.8909072875977,53.8909072875977,53.8909072875977,53.8909072875977,63.938362121582,63.938362121582,63.938362121582,63.938362121582,63.938362121582,29.9442672729492,29.9442672729492,29.9442672729492,29.9442672729492,44.1782150268555,44.1782150268555,44.1782150268555,44.1782150268555,58.7469711303711,58.7469711303711,58.7469711303711,58.7469711303711,52.7221298217773,52.7221298217773,52.7221298217773,52.7221298217773,52.7221298217773,32.623649597168,32.623649597168,32.623649597168,32.623649597168,47.0249481201172,47.0249481201172,47.0249481201172,47.0249481201172,61.5938110351562,61.5938110351562,61.5938110351562,61.5938110351562,30.6247863769531,30.6247863769531,30.6247863769531,30.6247863769531,30.6247863769531,32.0157470703125,32.0157470703125,32.0157470703125,32.0157470703125,47.0868759155273,47.0868759155273,47.0868759155273,47.0868759155273,62.3255157470703,62.3255157470703,62.3255157470703,62.3255157470703,24.0303421020508,24.0303421020508,24.0303421020508,24.0303421020508,24.0303421020508,36.2422790527344,36.2422790527344,36.2422790527344,36.2422790527344,51.3134078979492,51.3134078979492,51.3134078979492,51.3134078979492,63.8727798461914,63.8727798461914,63.8727798461914,63.8727798461914,63.8727798461914,28.2042694091797,28.2042694091797,28.2042694091797,28.2042694091797,42.6056213378906,42.6056213378906,42.6056213378906,42.6056213378906,45.6198577880859,45.6198577880859,45.6198577880859,45.6198577880859,56.3371429443359,56.3371429443359,56.3371429443359,56.3371429443359,63.7053833007812,63.7053833007812,63.7053833007812,63.7053833007812,63.7053833007812,31.0511093139648,31.0511093139648,31.0511093139648,31.0511093139648,46.2896957397461,46.2896957397461,46.2896957397461,46.2896957397461,60.1886749267578,60.1886749267578,60.1886749267578,60.1886749267578,63.8727951049805,63.8727951049805,63.8727951049805,63.8727951049805,63.8727951049805,23.8503875732422,23.8503875732422,23.8503875732422,23.8503875732422,29.5439453125,29.5439453125,29.5439453125,29.5439453125,34.2328109741211,34.2328109741211,34.2328109741211,34.2328109741211,48.8016204833984,48.8016204833984,48.8016204833984,48.8016204833984,63.7052917480469,63.7052917480469,63.7052917480469,63.7052917480469,22.5239715576172,22.5239715576172,22.5239715576172,22.5239715576172,22.5239715576172,36.0747985839844,36.0747985839844,36.0747985839844,36.0747985839844,51.1460342407227,51.1460342407227,51.1460342407227,51.1460342407227,63.7054061889648,63.7054061889648,63.7054061889648,63.7054061889648,63.7054061889648,31.3859939575195,31.3859939575195,31.3859939575195,31.3859939575195,46.2897720336914,46.2897720336914,46.2897720336914,46.2897720336914,61.5284118652344,61.5284118652344,61.5284118652344,61.5284118652344,25.7046661376953,25.7046661376953,25.7046661376953,25.7046661376953,25.7046661376953,35.5724411010742,35.5724411010742,35.5724411010742,35.5724411010742,50.3087615966797,50.3087615966797,50.3087615966797,50.3087615966797,63.8728256225586,63.8728256225586,63.8728256225586,63.8728256225586,63.8728256225586,25.357536315918,25.357536315918,25.357536315918,25.357536315918,40.2613143920898,40.2613143920898,40.2613143920898,40.2613143920898,55.3324432373047,55.3324432373047,55.3324432373047,55.3324432373047,63.8728332519531,63.8728332519531,63.8728332519531,63.8728332519531,63.8728332519531,29.8788986206055,29.8788986206055,29.8788986206055,29.8788986206055,44.2803039550781,44.2803039550781,44.2803039550781,44.2803039550781,58.5141448974609,58.5141448974609,58.5141448974609,58.5141448974609,57.0092697143555,57.0092697143555,57.0092697143555,57.0092697143555,57.0092697143555,31.5535354614258,31.5535354614258,31.5535354614258,31.5535354614258,46.6247177124023,46.6247177124023,46.6247177124023,46.6247177124023,61.6958999633789,61.6958999633789,61.6958999633789,61.6958999633789,27.546142578125,27.546142578125,27.546142578125,27.546142578125,27.546142578125,36.0748977661133,36.0748977661133,36.0748977661133,36.0748977661133,51.6483993530273,51.6483993530273,51.6483993530273,51.6483993530273,63.8728561401367,63.8728561401367,63.8728561401367,63.8728561401367,63.8728561401367,30.0464324951172,30.0464324951172,30.0464324951172,30.0464324951172,44.9501571655273,44.9501571655273,44.9501571655273,44.9501571655273,60.1887969970703,60.1887969970703,60.1887969970703,60.1887969970703,40.2688751220703,40.2688751220703,40.2688751220703,40.2688751220703,40.2688751220703,33.8979644775391,33.8979644775391,33.8979644775391,33.8979644775391,49.136604309082,49.136604309082,49.136604309082,49.136604309082,63.8728713989258,63.8728713989258,63.8728713989258,63.8728713989258,63.8728713989258,24.3528900146484,24.3528900146484,24.3528900146484,24.3528900146484,39.5915298461914,39.5915298461914,39.5915298461914,39.5915298461914,54.662712097168,54.662712097168,54.662712097168,54.662712097168,63.7054748535156,63.7054748535156,63.7054748535156,63.7054748535156,63.7054748535156,28.5392837524414,28.5392837524414,28.5392837524414,28.5392837524414,31.8884353637695,31.8884353637695,31.8884353637695,31.8884353637695,45.9548721313477,45.9548721313477,45.9548721313477,45.9548721313477,61.0260543823242,61.0260543823242,61.0260543823242,61.0260543823242,37.7578353881836,37.7578353881836,37.7578353881836,37.7578353881836,37.7578353881836,33.5630722045898,33.5630722045898,33.5630722045898,33.5630722045898,48.2992858886719,48.2992858886719,48.2992858886719,48.2992858886719,62.7006912231445,62.7006912231445,62.7006912231445,62.7006912231445,30.0572509765625,30.0572509765625,30.0572509765625,30.0572509765625,30.0572509765625,35.7399749755859,35.7399749755859,35.7399749755859,35.7399749755859,49.6390075683594,49.6390075683594,49.6390075683594,49.6390075683594,63.7054977416992,63.7054977416992,63.7054977416992,63.7054977416992,63.7054977416992,30.5487976074219,30.5487976074219,30.5487976074219,30.5487976074219,45.2850646972656,45.2850646972656,45.2850646972656,45.2850646972656,60.1887893676758,60.1887893676758,60.1887893676758,60.1887893676758,48.8065338134766,48.8065338134766,48.8065338134766,48.8065338134766,48.8065338134766,29.0415267944336,29.0415267944336,29.0415267944336,29.0415267944336,43.6103897094727,43.6103897094727,43.6103897094727,43.6103897094727,58.6815185546875,58.6815185546875,58.6815185546875,58.6815185546875,54.3307189941406,54.3307189941406,54.3307189941406,54.3307189941406,54.3307189941406,32.3906860351562,32.3906860351562,32.3906860351562,32.3906860351562,47.1270065307617,47.1270065307617,47.1270065307617,47.1270065307617,62.5331039428711,62.5331039428711,62.5331039428711,62.5331039428711,23.3480377197266,23.3480377197266,23.3480377197266,23.3480377197266,38.5866775512695,38.5866775512695,38.5866775512695,38.5866775512695,53.6578063964844,53.6578063964844,53.6578063964844,53.6578063964844,63.7053680419922,63.7053680419922,63.7053680419922,63.7053680419922,63.7053680419922,30.716178894043,30.716178894043,30.716178894043,30.716178894043,45.7873077392578,45.7873077392578,45.7873077392578,45.7873077392578,60.5235748291016,60.5235748291016,60.5235748291016,60.5235748291016,40.1013870239258,40.1013870239258,40.1013870239258,40.1013870239258,40.1013870239258,34.0652847290039,34.0652847290039,34.0652847290039,34.0652847290039,48.4666366577148,48.4666366577148,48.4666366577148,48.4666366577148,60.0212097167969,60.0212097167969,60.0212097167969,60.0212097167969,63.8727874755859,63.8727874755859,63.8727874755859,63.8727874755859,63.8727874755859,23.3480606079102,23.3480606079102,23.3480606079102,23.3480606079102,38.4192428588867,38.4192428588867,38.4192428588867,38.4192428588867,53.1554565429688,53.1554565429688,53.1554565429688,53.1554565429688,63.7053909301758,63.7053909301758,63.7053909301758,63.7053909301758,63.7053909301758,30.8836059570312,30.8836059570312,30.8836059570312,30.8836059570312,45.9547882080078,45.9547882080078,45.9547882080078,45.9547882080078,60.1886825561523,60.1886825561523,60.1886825561523,60.1886825561523,44.4539184570312,44.4539184570312,44.4539184570312,44.4539184570312,44.4539184570312,34.0653076171875,34.0653076171875,34.0653076171875,34.0653076171875,47.7968826293945,47.7968826293945,47.7968826293945,47.7968826293945,62.5330963134766,62.5330963134766,62.5330963134766,62.5330963134766,21.1847457885742,21.1847457885742,21.1847457885742,21.1847457885742,21.1847457885742,36.7446899414062,36.7446899414062,36.7446899414062,36.7446899414062,51.3134994506836,51.3134994506836,51.3134994506836,51.3134994506836,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,63.8728179931641,28.5392227172852,28.5392227172852,28.5392227172852,28.5392227172852,43.9453201293945,43.9453201293945,43.9453201293945,43.9453201293945,58.5141296386719,58.5141296386719,58.5141296386719,58.5141296386719,54.1633834838867,54.1633834838867,54.1633834838867,54.1633834838867,54.1633834838867,33.0606384277344,33.0606384277344,33.0606384277344,33.0606384277344,48.6341400146484,48.6341400146484,48.6341400146484,48.6341400146484,63.8727798461914,63.8727798461914,63.8727798461914,63.8727798461914,23.3481063842773,23.3481063842773,23.3481063842773,23.3481063842773,38.4192886352539,38.4192886352539,38.4192886352539,38.4192886352539,53.3229598999023,53.3229598999023,53.3229598999023,53.3229598999023,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,63.8728408813477,29.041618347168,29.041618347168,29.041618347168,29.041618347168,43.9453430175781,43.9453430175781,43.9453430175781,43.9453430175781,58.3466949462891,58.3466949462891,58.3466949462891,58.3466949462891,58.8507232666016,58.8507232666016,58.8507232666016,58.8507232666016,58.8507232666016,32.0559158325195,32.0559158325195,32.0559158325195,32.0559158325195,47.1270446777344,47.1270446777344,47.1270446777344,47.1270446777344,62.3657379150391,62.3657379150391,62.3657379150391,62.3657379150391,23.3481292724609,23.3481292724609,23.3481292724609,23.3481292724609,37.9168853759766,37.9168853759766,37.9168853759766,37.9168853759766,52.8206634521484,52.8206634521484,52.8206634521484,52.8206634521484,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,63.7054595947266,31.5535583496094,31.5535583496094,31.5535583496094,31.5535583496094,46.2898254394531,46.2898254394531,46.2898254394531,46.2898254394531,61.1934967041016,61.1934967041016,61.1934967041016,61.1934967041016,34.5771408081055,34.5771408081055,34.5771408081055,34.5771408081055,34.5771408081055,35.2376327514648,35.2376327514648,35.2376327514648,35.2376327514648,50.4762725830078,50.4762725830078,50.4762725830078,50.4762725830078,63.8728790283203,63.8728790283203,63.8728790283203,63.8728790283203,63.8728790283203,27.1996231079102,27.1996231079102,27.1996231079102,27.1996231079102,42.6057205200195,42.6057205200195,42.6057205200195,42.6057205200195,57.5094985961914,57.5094985961914,57.5094985961914,57.5094985961914,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,63.7054824829102,22.5108184814453,22.5108184814453,22.5108184814453,22.5108184814453,32.390869140625,32.390869140625,32.390869140625,32.390869140625,46.7921676635742,46.7921676635742,46.7921676635742,46.7921676635742,61.3610305786133,61.3610305786133,61.3610305786133,61.3610305786133,35.4141845703125,35.4141845703125,35.4141845703125,35.4141845703125,35.4141845703125,33.5630798339844,33.5630798339844,33.5630798339844,33.5630798339844,47.2946014404297,47.2946014404297,47.2946014404297,47.2946014404297,61.3609848022461,61.3609848022461,61.3609848022461,61.3609848022461,44.6447830200195,44.6447830200195,44.6447830200195,44.6447830200195,44.6447830200195,33.1752014160156,33.1752014160156,33.1752014160156,33.1752014160156,47.4090423583984,47.4090423583984,47.4090423583984,47.4090423583984,62.480224609375,62.480224609375,62.480224609375,62.480224609375,26.4888610839844,26.4888610839844,26.4888610839844,26.4888610839844,26.4888610839844,36.5242004394531,36.5242004394531,36.5242004394531,36.5242004394531,52.0977554321289,52.0977554321289,52.0977554321289,52.0977554321289,63.8198394775391,63.8198394775391,63.8198394775391,63.8198394775391,63.8198394775391,31.5004272460938,31.5004272460938,31.5004272460938,31.5004272460938,45.734375,45.734375,45.734375,45.734375,60.470588684082,60.470588684082,60.470588684082,60.470588684082,44.0661544799805,44.0661544799805,44.0661544799805,44.0661544799805,44.0661544799805,34.3472137451172,34.3472137451172,34.3472137451172,34.3472137451172,48.9160232543945,48.9160232543945,48.9160232543945,48.9160232543945,63.9872589111328,63.9872589111328,63.9872589111328,63.9872589111328,63.9872589111328,23.462532043457,23.462532043457,23.462532043457,23.462532043457,38.0313415527344,38.0313415527344,38.0313415527344,38.0313415527344,52.9350128173828,52.9350128173828,52.9350128173828,52.9350128173828,63.8198623657227,63.8198623657227,63.8198623657227,63.8198623657227,63.8198623657227,31.3330459594727,31.3330459594727,31.3330459594727,31.3330459594727,46.0692596435547,46.0692596435547,46.0692596435547,46.0692596435547,61.140495300293,61.140495300293,61.140495300293,61.140495300293,43.0617523193359,43.0617523193359,43.0617523193359,43.0617523193359,43.0617523193359,34.1797790527344,34.1797790527344,34.1797790527344,34.1797790527344,49.0835571289062,49.0835571289062,49.0835571289062,49.0835571289062,55.4469451904297,55.4469451904297,55.4469451904297,55.4469451904297,63.9872817993164,63.9872817993164,63.9872817993164,63.9872817993164,63.9872817993164,23.4625549316406,23.4625549316406,23.4625549316406,23.4625549316406,37.3614807128906,37.3614807128906,37.3614807128906,37.3614807128906,52.2652587890625,52.2652587890625,52.2652587890625,52.2652587890625,63.9872894287109,63.9872894287109,63.9872894287109,63.9872894287109,63.9872894287109,26.8116607666016,26.8116607666016,26.8116607666016,26.8116607666016,41.547981262207,41.547981262207,41.547981262207,41.547981262207,56.1167373657227,56.1167373657227,56.1167373657227,56.1167373657227,63.8198928833008,63.8198928833008,63.8198928833008,63.8198928833008,63.8198928833008,30.998161315918,30.998161315918,30.998161315918,30.998161315918,46.2368011474609,46.2368011474609,46.2368011474609,46.2368011474609,60.9730682373047,60.9730682373047,60.9730682373047,60.9730682373047,33.8545532226562,33.8545532226562,33.8545532226562,33.8545532226562,33.8545532226562,35.6869812011719,35.6869812011719,35.6869812011719,35.6869812011719,50.9255676269531,50.9255676269531,50.9255676269531,50.9255676269531,63.9873123168945,63.9873123168945,63.9873123168945,63.9873123168945,63.9873123168945,24.4672775268555,24.4672775268555,24.4672775268555,24.4672775268555,34.682243347168,34.682243347168,34.682243347168,34.682243347168,41.0455780029297,41.0455780029297,41.0455780029297,41.0455780029297,53.4374389648438,53.4374389648438,53.4374389648438,53.4374389648438,63.9873199462891,63.9873199462891,63.9873199462891,63.9873199462891,63.9873199462891,25.6394882202148,25.6394882202148,25.6394882202148,25.6394882202148,40.8781280517578,40.8781280517578,40.8781280517578,40.8781280517578,55.2794799804688,55.2794799804688,55.2794799804688,55.2794799804688,63.8199234008789,63.8199234008789,63.8199234008789,63.8199234008789,63.8199234008789,31.1655960083008,31.1655960083008,31.1655960083008,31.1655960083008,45.5669479370117,45.5669479370117,45.5669479370117,45.5669479370117,59.8008422851562,59.8008422851562,59.8008422851562,59.8008422851562,50.2601928710938,50.2601928710938,50.2601928710938,50.2601928710938,50.2601928710938,32.5052642822266,32.5052642822266,32.5052642822266,32.5052642822266,47.7439041137695,47.7439041137695,47.7439041137695,47.7439041137695,62.9825973510742,62.9825973510742,62.9825973510742,62.9825973510742,23.4626159667969,23.4626159667969,23.4626159667969,23.4626159667969,38.7012557983398,38.7012557983398,38.7012557983398,38.7012557983398,53.60498046875,53.60498046875,53.60498046875,53.60498046875,63.9873504638672,63.9873504638672,63.9873504638672,63.9873504638672,63.9873504638672,30.3283843994141,30.3283843994141,30.3283843994141,30.3283843994141,45.9018859863281,45.9018859863281,45.9018859863281,45.9018859863281,60.4706954956055,60.4706954956055,60.4706954956055,60.4706954956055,38.8767318725586,38.8767318725586,38.8767318725586,38.8767318725586,38.8767318725586,34.6822357177734,34.6822357177734,34.6822357177734,34.6822357177734,49.5859603881836,49.5859603881836,49.5859603881836,49.5859603881836,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,63.9873657226562,23.4626388549805,23.4626388549805,23.4626388549805,23.4626388549805,38.7012786865234,38.7012786865234,38.7012786865234,38.7012786865234,52.7677154541016,52.7677154541016,52.7677154541016,52.7677154541016,63.9873733520508,63.9873733520508,63.9873733520508,63.9873733520508,63.9873733520508,29.9934387207031,29.9934387207031,29.9934387207031,29.9934387207031,44.059928894043,44.059928894043,44.059928894043,44.059928894043,47.7439422607422,47.7439422607422,47.7439422607422,47.7439422607422,59.4660263061523,59.4660263061523,59.4660263061523,59.4660263061523,47.7491760253906,47.7491760253906,47.7491760253906,47.7491760253906,47.7491760253906,33.3426513671875,33.3426513671875,33.3426513671875,33.3426513671875,48.0788650512695,48.0788650512695,48.0788650512695,48.0788650512695,62.1453018188477,62.1453018188477,62.1453018188477,62.1453018188477,32.0131912231445,32.0131912231445,32.0131912231445,32.0131912231445,32.0131912231445,35.1846389770508,35.1846389770508,35.1846389770508,35.1846389770508,49.4185333251953,49.4185333251953,49.4185333251953,49.4185333251953,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,63.9873962402344,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,25.1791152954102,25.1791152954102,25.1791152954102,25.1791152954102,39.24560546875,39.24560546875,39.24560546875,39.24560546875,54.3167343139648,54.3167343139648,54.3167343139648,54.3167343139648,63.694465637207,63.694465637207,63.694465637207,63.694465637207,63.694465637207,29.7004776000977,29.7004776000977,29.7004776000977,29.7004776000977,40.250358581543,40.250358581543,40.250358581543,40.250358581543,55.4889450073242,55.4889450073242,55.4889450073242,55.4889450073242,63.6944732666016,63.6944732666016,63.6944732666016,63.6944732666016,63.6944732666016,30.3703689575195,30.3703689575195,30.3703689575195,30.3703689575195,45.1066360473633,45.1066360473633,45.1066360473633,45.1066360473633,60.1778182983398,60.1778182983398,60.1778182983398,60.1778182983398,38.9186630249023,38.9186630249023,38.9186630249023,38.9186630249023,38.9186630249023,33.5520172119141,33.5520172119141,33.5520172119141,33.5520172119141,48.6231994628906,48.6231994628906,48.6231994628906,48.6231994628906,61.6848907470703,61.6848907470703,61.6848907470703,61.6848907470703,43.6059875488281,43.6059875488281,43.6059875488281,43.6059875488281,43.6059875488281,33.3846206665039,33.3846206665039,33.3846206665039,33.3846206665039,48.6232604980469,48.6232604980469,48.6232604980469,48.6232604980469,63.6944427490234,63.6944427490234,63.6944427490234,63.6944427490234,50.4695663452148,50.4695663452148,50.4695663452148,50.4695663452148,50.4695663452148,23.5046310424805,23.5046310424805,23.5046310424805,23.5046310424805,35.2266616821289,35.2266616821289,35.2266616821289,35.2266616821289,49.7954711914062,49.7954711914062,49.7954711914062,49.7954711914062,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,63.6945037841797,30.3703460693359,30.3703460693359,30.3703460693359,30.3703460693359,44.939208984375,44.939208984375,44.939208984375,44.939208984375,58.6706771850586,58.6706771850586,58.6706771850586,58.6706771850586,56.9983444213867,56.9983444213867,56.9983444213867,56.9983444213867,56.9983444213867,30.8727798461914,30.8727798461914,30.8727798461914,30.8727798461914,45.6090469360352,45.6090469360352,45.6090469360352,45.6090469360352,59.3405151367188,59.3405151367188,59.3405151367188,59.3405151367188,50.4695892333984,50.4695892333984,50.4695892333984,50.4695892333984,50.4695892333984,32.8822784423828,32.8822784423828,32.8822784423828,32.8822784423828,47.1161193847656,47.1161193847656,47.1161193847656,47.1161193847656,62.0198440551758,62.0198440551758,62.0198440551758,62.0198440551758,32.5573501586914,32.5573501586914,32.5573501586914,32.5573501586914,32.5573501586914,34.389404296875,34.389404296875,34.389404296875,34.389404296875,49.2930755615234,49.2930755615234,49.2930755615234,49.2930755615234,63.6945343017578,63.6945343017578,63.6945343017578,63.6945343017578,63.6945343017578,31.0402069091797,31.0402069091797,31.0402069091797,31.0402069091797,46.2789001464844,46.2789001464844,46.2789001464844,46.2789001464844,61.5175399780273,61.5175399780273,61.5175399780273,61.5175399780273,34.398811340332,34.398811340332,34.398811340332,34.398811340332,34.398811340332,34.2219619750977,34.2219619750977,34.2219619750977,34.2219619750977,49.628059387207,49.628059387207,49.628059387207,49.628059387207,63.8619537353516,63.8619537353516,63.8619537353516,63.8619537353516,63.8619537353516,25.1792602539062,25.1792602539062,25.1792602539062,25.1792602539062,34.2219696044922,34.2219696044922,34.2219696044922,34.2219696044922,47.1161499023438,47.1161499023438,47.1161499023438,47.1161499023438,61.8524703979492,61.8524703979492,61.8524703979492,61.8524703979492,29.2092971801758,29.2092971801758,29.2092971801758,29.2092971801758,29.2092971801758,35.3941802978516,35.3941802978516,35.3941802978516,35.3941802978516,50.4653091430664,50.4653091430664,50.4653091430664,50.4653091430664,63.6945648193359,63.6945648193359,63.6945648193359,63.6945648193359,63.6945648193359,30.3704071044922,30.3704071044922,30.3704071044922,30.3704071044922,44.7717590332031,44.7717590332031,44.7717590332031,44.7717590332031,59.8429412841797,59.8429412841797,59.8429412841797,59.8429412841797,44.7779006958008,44.7779006958008,44.7779006958008,44.7779006958008,44.7779006958008,32.8822784423828,32.8822784423828,32.8822784423828,32.8822784423828,47.9535140991211,47.9535140991211,47.9535140991211,47.9535140991211,63.1921005249023,63.1921005249023,63.1921005249023,63.1921005249023,21.1602935791016,21.1602935791016,21.1602935791016,21.1602935791016,37.0687789916992,37.0687789916992,37.0687789916992,37.0687789916992,50.5970306396484,50.5970306396484,50.5970306396484,50.5970306396484,62.4865188598633,62.4865188598633,62.4865188598633,62.4865188598633,44.9096145629883,44.9096145629883,44.9096145629883,44.9096145629883,44.9096145629883,28.7955551147461,28.7955551147461,28.7955551147461,28.7955551147461,33.4843139648438,33.4843139648438,33.4843139648438,33.4843139648438,42.359619140625,42.359619140625,42.359619140625,42.359619140625,53.7466812133789,53.7466812133789,53.7466812133789,53.7466812133789,63.7942428588867,63.7942428588867,63.7942428588867,63.7942428588867,63.7942428588867,29.2979354858398,29.2979354858398,29.2979354858398,29.2979354858398,44.20166015625,44.20166015625,44.20166015625,44.20166015625,59.440299987793,59.440299987793,59.440299987793,59.440299987793,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,30.3026885986328,30.3026885986328,30.3026885986328,30.3026885986328,45.8762435913086,45.8762435913086,45.8762435913086,45.8762435913086,60.4450531005859,60.4450531005859,60.4450531005859,60.4450531005859,56.2610702514648,56.2610702514648,56.2610702514648,56.2610702514648,56.2610702514648,32.3121871948242,32.3121871948242,32.3121871948242,32.3121871948242,47.8857421875,47.8857421875,47.8857421875,47.8857421875,63.2918395996094,63.2918395996094,63.2918395996094,63.2918395996094,32.9918975830078,32.9918975830078,32.9918975830078,32.9918975830078,32.9918975830078,35.3262710571289,35.3262710571289,35.3262710571289,35.3262710571289,49.7275695800781,49.7275695800781,49.7275695800781,49.7275695800781,63.7941131591797,63.7941131591797,63.7941131591797,63.7941131591797,63.7941131591797,30.9723281860352,30.9723281860352,30.9723281860352,30.9723281860352,45.7086486816406,45.7086486816406,45.7086486816406,45.7086486816406,60.277458190918,60.277458190918,60.277458190918,60.277458190918,58.1023788452148,58.1023788452148,58.1023788452148,58.1023788452148,58.1023788452148,31.8096771240234,31.8096771240234,31.8096771240234,31.8096771240234,46.880859375,46.880859375,46.880859375,46.880859375,62.6218185424805,62.6218185424805,62.6218185424805,62.6218185424805,44.8774566650391,44.8774566650391,44.8774566650391,44.8774566650391,44.8774566650391,33.484260559082,33.484260559082,33.484260559082,33.484260559082,48.5553894042969,48.5553894042969,48.5553894042969,48.5553894042969,63.4591674804688,63.4591674804688,63.4591674804688,63.4591674804688,35.000617980957,35.000617980957,35.000617980957,35.000617980957,35.000617980957,34.9913330078125,34.9913330078125,34.9913330078125,34.9913330078125,43.1967544555664,43.1967544555664,43.1967544555664,43.1967544555664,48.8903121948242,48.8903121948242,48.8903121948242,48.8903121948242,60.2774810791016,60.2774810791016,60.2774810791016,60.2774810791016,63.9615478515625,63.9615478515625,63.9615478515625,63.9615478515625,63.9615478515625,28.1255798339844,28.1255798339844,28.1255798339844,28.1255798339844,42.1920166015625,42.1920166015625,42.1920166015625,42.1920166015625,57.4307098388672,57.4307098388672,57.4307098388672,57.4307098388672,63.7941513061523,63.7941513061523,63.7941513061523,63.7941513061523,63.7941513061523,30.1350784301758,30.1350784301758,30.1350784301758,30.1350784301758,44.5364303588867,44.5364303588867,44.5364303588867,44.5364303588867,59.607666015625,59.607666015625,59.607666015625,59.607666015625,60.1112670898438,60.1112670898438,60.1112670898438,60.1112670898438,60.1112670898438,30.9724273681641,30.9724273681641,30.9724273681641,30.9724273681641,46.3785247802734,46.3785247802734,46.3785247802734,46.3785247802734,60.9473342895508,60.9473342895508,60.9473342895508,60.9473342895508,53.5825119018555,53.5825119018555,53.5825119018555,53.5825119018555,53.5825119018555,32.8144149780273,32.8144149780273,32.8144149780273,32.8144149780273,47.7181396484375,47.7181396484375,47.7181396484375,47.7181396484375,62.2869491577148,62.2869491577148,62.2869491577148,62.2869491577148,44.8775024414062,44.8775024414062,44.8775024414062,44.8775024414062,44.8775024414062,33.9866256713867,33.9866256713867,33.9866256713867,33.9866256713867,48.8903503417969,48.8903503417969,48.8903503417969,48.8903503417969,62.7893829345703,62.7893829345703,62.7893829345703,62.7893829345703,39.3531723022461,39.3531723022461,39.3531723022461,39.3531723022461,39.3531723022461,34.3215484619141,34.3215484619141,34.3215484619141,34.3215484619141,49.3927307128906,49.3927307128906,49.3927307128906,49.3927307128906,63.9615936279297,63.9615936279297,63.9615936279297,63.9615936279297,63.9615936279297,26.4510498046875,26.4510498046875,26.4510498046875,26.4510498046875,41.8571472167969,41.8571472167969,41.8571472167969,41.8571472167969,57.0958404541016,57.0958404541016,57.0958404541016,57.0958404541016,63.7941970825195,63.7941970825195,63.7941970825195,63.7941970825195,63.7941970825195,30.8049545288086,30.8049545288086,30.8049545288086,30.8049545288086,46.3785095214844,46.3785095214844,46.3785095214844,46.3785095214844,60.779914855957,60.779914855957,60.779914855957,60.779914855957,55.256591796875,55.256591796875,55.256591796875,55.256591796875,55.256591796875,32.6469955444336,32.6469955444336,32.6469955444336,32.6469955444336,47.7182312011719,47.7182312011719,47.7182312011719,47.7182312011719,63.2917327880859,63.2917327880859,63.2917327880859,63.2917327880859,35.6703109741211,35.6703109741211,35.6703109741211,35.6703109741211,35.6703109741211,34.9914627075195,34.9914627075195,34.9914627075195,34.9914627075195,50.3975067138672,50.3975067138672,50.3975067138672,50.3975067138672,63.9616241455078,63.9616241455078,63.9616241455078,63.9616241455078,63.9616241455078,29.2979125976562,29.2979125976562,29.2979125976562,29.2979125976562,44.5364990234375,44.5364990234375,44.5364990234375,44.5364990234375,59.9425964355469,59.9425964355469,59.9425964355469,59.9425964355469,60.7809524536133,60.7809524536133,60.7809524536133,60.7809524536133,60.7809524536133,30.9724426269531,30.9724426269531,30.9724426269531,30.9724426269531,46.2110824584961,46.2110824584961,46.2110824584961,46.2110824584961,60.612434387207,60.612434387207,60.612434387207,60.612434387207,56.9306640625,56.9306640625,56.9306640625,56.9306640625,56.9306640625,23.2694396972656,23.2694396972656,23.2694396972656,23.2694396972656,35.1588897705078,35.1588897705078,35.1588897705078,35.1588897705078,46.5460052490234,46.5460052490234,46.5460052490234,46.5460052490234,61.1148147583008,61.1148147583008,61.1148147583008,61.1148147583008,57.9350967407227,57.9350967407227,57.9350967407227,57.9350967407227,57.9350967407227,31.4748840332031,31.4748840332031,31.4748840332031,31.4748840332031,45.8761825561523,45.8761825561523,45.8761825561523,45.8761825561523,60.2775344848633,60.2775344848633,60.2775344848633,60.2775344848633,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,63.7942504882812,29.6328582763672,29.6328582763672,29.6328582763672,29.6328582763672,44.2016525268555,44.2016525268555,44.2016525268555,44.2016525268555,58.4355087280273,58.4355087280273,58.4355087280273,58.4355087280273,63.7942581176758,63.7942581176758,63.7942581176758,63.7942581176758,63.7942581176758,30.6375579833984,30.6375579833984,30.6375579833984,30.6375579833984,46.0437088012695,46.0437088012695,46.0437088012695,46.0437088012695,59.9426879882812,59.9426879882812,59.9426879882812,59.9426879882812,58.604736328125,58.604736328125,58.604736328125,58.604736328125,58.604736328125,28.7954254150391,28.7954254150391,28.7954254150391,28.7954254150391,44.2015228271484,44.2015228271484,44.2015228271484,44.2015228271484,59.6075668334961,59.6075668334961,59.6075668334961,59.6075668334961,63.7941131591797,63.7941131591797,63.7941131591797,63.7941131591797,63.7941131591797,30.9723815917969,30.9723815917969,30.9723815917969,30.9723815917969,45.7086486816406,45.7086486816406,45.7086486816406,45.7086486816406,60.1099472045898,60.1099472045898,60.1099472045898,60.1099472045898,57.0979537963867,57.0979537963867,57.0979537963867,57.0979537963867,57.0979537963867,31.8096237182617,31.8096237182617,31.8096237182617,31.8096237182617,46.880859375,46.880859375,46.880859375,46.880859375,62.119499206543,62.119499206543,62.119499206543,62.119499206543,41.3619689941406,41.3619689941406,41.3619689941406,41.3619689941406,41.3619689941406,33.8191223144531,33.8191223144531,33.8191223144531,33.8191223144531,48.3879318237305,48.3879318237305,48.3879318237305,48.3879318237305,63.6265716552734,63.6265716552734,63.6265716552734,63.6265716552734,31.6525344848633,31.6525344848633,31.6525344848633,31.6525344848633,31.6525344848633,35.1587905883789,35.1587905883789,35.1587905883789,35.1587905883789,38.6753997802734,38.6753997802734,38.6753997802734,38.6753997802734,49.0578231811523,49.0578231811523,49.0578231811523,49.0578231811523,62.7892913818359,62.7892913818359,62.7892913818359,62.7892913818359,41.5293884277344,41.5293884277344,41.5293884277344,41.5293884277344,41.5293884277344,33.8191375732422,33.8191375732422,33.8191375732422,33.8191375732422,47.7181167602539,47.7181167602539,47.7181167602539,47.7181167602539,62.4543838500977,62.4543838500977,62.4543838500977,62.4543838500977,51.5736465454102,51.5736465454102,51.5736465454102,51.5736465454102,51.5736465454102,32.1446228027344,32.1446228027344,32.1446228027344,32.1446228027344,46.7134323120117,46.7134323120117,46.7134323120117,46.7134323120117,60.9472732543945,60.9472732543945,60.9472732543945,60.9472732543945,56.2609710693359,56.2609710693359,56.2609710693359,56.2609710693359,56.2609710693359,32.1445770263672,32.1445770263672,32.1445770263672,32.1445770263672,47.5507278442383,47.5507278442383,47.5507278442383,47.5507278442383,63.1242828369141,63.1242828369141,63.1242828369141,63.1242828369141,34.8332443237305,34.8332443237305,34.8332443237305,34.8332443237305,34.8332443237305,34.3215866088867,34.3215866088867,34.3215866088867,34.3215866088867,49.7276306152344,49.7276306152344,49.7276306152344,49.7276306152344,63.9615783691406,63.9615783691406,63.9615783691406,63.9615783691406,63.9615783691406,25.1114273071289,25.1114273071289,25.1114273071289,25.1114273071289,40.3500671386719,40.3500671386719,40.3500671386719,40.3500671386719,55.5887069702148,55.5887069702148,55.5887069702148,55.5887069702148,63.7941818237305,63.7941818237305,63.7941818237305,63.7941818237305,63.7941818237305,30.6375350952148,30.6375350952148,30.6375350952148,30.6375350952148,45.3738021850586,45.3738021850586,45.3738021850586,45.3738021850586,59.6076431274414,59.6076431274414,59.6076431274414,59.6076431274414,63.794189453125,63.794189453125,63.794189453125,63.794189453125,63.794189453125,30.9724044799805,30.9724044799805,30.9724044799805,30.9724044799805,45.8761825561523,45.8761825561523,45.8761825561523,45.8761825561523,60.9473648071289,60.9473648071289,60.9473648071289,60.9473648071289,53.7499465942383,53.7499465942383,53.7499465942383,53.7499465942383,53.7499465942383,32.312126159668,32.312126159668,32.312126159668,32.312126159668,47.5507659912109,47.5507659912109,47.5507659912109,47.5507659912109,62.4544372558594,62.4544372558594,62.4544372558594,62.4544372558594,42.3664703369141,42.3664703369141,42.3664703369141,42.3664703369141,42.3664703369141,34.1774749755859,34.1774749755859,34.1774749755859,34.1774749755859,49.5835723876953,49.5835723876953,49.5835723876953,49.5835723876953,63.984977722168,63.984977722168,63.984977722168,63.984977722168,63.984977722168,23.383918762207,23.383918762207,23.383918762207,23.383918762207,38.2875900268555,38.2875900268555,38.2875900268555,38.2875900268555,53.6936874389648,53.6936874389648,53.6936874389648,53.6936874389648,63.9086532592773,63.9086532592773,63.9086532592773,63.9086532592773,63.9086532592773,30.2496337890625,30.2496337890625,30.2496337890625,30.2496337890625,45.3208694458008,45.3208694458008,45.3208694458008,45.3208694458008,60.3919982910156,60.3919982910156,60.3919982910156,60.3919982910156,55.7058563232422,55.7058563232422,55.7058563232422,55.7058563232422,55.7058563232422,32.5940475463867,32.5940475463867,32.5940475463867,32.5940475463867,47.6652297973633,47.6652297973633,47.6652297973633,47.6652297973633,62.903923034668,62.903923034668,62.903923034668,62.903923034668,58.0495223999023,58.0495223999023,58.0495223999023,58.0495223999023,58.0495223999023,27.7493667602539,27.7493667602539,27.7493667602539,27.7493667602539,27.7493667602539,33.0964813232422,33.0964813232422,33.0964813232422,33.0964813232422,47.3303756713867,47.3303756713867,47.3303756713867,47.3303756713867,62.4015045166016,62.4015045166016,62.4015045166016,62.4015045166016,44.8246002197266,44.8246002197266,44.8246002197266,44.8246002197266,44.8246002197266,32.5940628051758,32.5940628051758,32.5940628051758,32.5940628051758,47.1628723144531,47.1628723144531,47.1628723144531,47.1628723144531,61.3968200683594,61.3968200683594,61.3968200683594,61.3968200683594,48.0052871704102,48.0052871704102,48.0052871704102,48.0052871704102,48.0052871704102,32.2591552734375,32.2591552734375,32.2591552734375,32.2591552734375,46.3256454467773,46.3256454467773,46.3256454467773,46.3256454467773,61.5642318725586,61.5642318725586,61.5642318725586,61.5642318725586,57.2125244140625,57.2125244140625,57.2125244140625,57.2125244140625,57.2125244140625,31.9243011474609,31.9243011474609,31.9243011474609,31.9243011474609,47.1629409790039,47.1629409790039,47.1629409790039,47.1629409790039,61.8991546630859,61.8991546630859,61.8991546630859,61.8991546630859,49.0097274780273,49.0097274780273,49.0097274780273,49.0097274780273,49.0097274780273,33.0962982177734,33.0962982177734,33.0962982177734,33.0962982177734,48.5023956298828,48.5023956298828,48.5023956298828,48.5023956298828,63.5735778808594,63.5735778808594,63.5735778808594,63.5735778808594,35.449836730957,35.449836730957,35.449836730957,35.449836730957,35.449836730957,34.9383926391602,34.9383926391602,34.9383926391602,34.9383926391602,50.3444366455078,50.3444366455078,50.3444366455078,50.3444366455078,63.9085540771484,63.9085540771484,63.9085540771484,63.9085540771484,63.9085540771484,25.5607223510742,25.5607223510742,25.5607223510742,25.5607223510742,40.6319046020508,40.6319046020508,40.6319046020508,40.6319046020508,55.7030868530273,55.7030868530273,55.7030868530273,55.7030868530273,63.7411575317383,63.7411575317383,63.7411575317383,63.7411575317383,63.7411575317383,30.9194259643555,30.9194259643555,30.9194259643555,30.9194259643555,46.3255233764648,46.3255233764648,46.3255233764648,46.3255233764648,61.3966522216797,61.3966522216797,61.3966522216797,61.3966522216797,58.7190399169922,58.7190399169922,58.7190399169922,58.7190399169922,58.7190399169922,31.4218063354492,31.4218063354492,31.4218063354492,31.4218063354492,38.2875671386719,38.2875671386719,38.2875671386719,38.2875671386719,45.655647277832,45.655647277832,45.655647277832,45.655647277832,60.3919143676758,60.3919143676758,60.3919143676758,60.3919143676758,57.2124099731445,57.2124099731445,57.2124099731445,57.2124099731445,57.2124099731445,30.7519302368164,30.7519302368164,30.7519302368164,30.7519302368164,44.8183670043945,44.8183670043945,44.8183670043945,44.8183670043945,58.5498886108398,58.5498886108398,58.5498886108398,58.5498886108398,63.7411804199219,63.7411804199219,63.7411804199219,63.7411804199219,63.7411804199219,30.9194488525391,30.9194488525391,30.9194488525391,30.9194488525391,45.1533432006836,45.1533432006836,45.1533432006836,45.1533432006836,60.3919830322266,60.3919830322266,60.3919830322266,60.3919830322266,56.8776168823242,56.8776168823242,56.8776168823242,56.8776168823242,56.8776168823242,31.5892868041992,31.5892868041992,31.5892868041992,31.5892868041992,46.8279266357422,46.8279266357422,46.8279266357422,46.8279266357422,62.4014282226562,62.4014282226562,62.4014282226562,62.4014282226562,42.1460571289062,42.1460571289062,42.1460571289062,42.1460571289062,42.1460571289062,34.1011047363281,34.1011047363281,34.1011047363281,34.1011047363281,49.6747131347656,49.6747131347656,49.6747131347656,49.6747131347656,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,24.5560302734375,24.5560302734375,24.5560302734375,24.5560302734375,39.6272659301758,39.6272659301758,39.6272659301758,39.6272659301758,54.0286178588867,54.0286178588867,54.0286178588867,54.0286178588867,63.9086151123047,63.9086151123047,63.9086151123047,63.9086151123047,63.9086151123047,30.4170532226562,30.4170532226562,30.4170532226562,30.4170532226562,44.8184051513672,44.8184051513672,44.8184051513672,44.8184051513672,59.2197570800781,59.2197570800781,59.2197570800781,59.2197570800781,63.7412185668945,63.7412185668945,63.7412185668945,63.7412185668945,63.7412185668945,30.9194869995117,30.9194869995117,30.9194869995117,30.9194869995117,46.158073425293,46.158073425293,46.158073425293,46.158073425293,60.8943405151367,60.8943405151367,60.8943405151367,60.8943405151367,57.7146759033203,57.7146759033203,57.7146759033203,57.7146759033203,57.7146759033203,31.5893249511719,31.5893249511719,31.5893249511719,31.5893249511719,46.9954223632812,46.9954223632812,46.9954223632812,46.9954223632812,61.8990936279297,61.8990936279297,61.8990936279297,61.8990936279297,46.6660079956055,46.6660079956055,46.6660079956055,46.6660079956055,46.6660079956055,33.9337387084961,33.9337387084961,33.9337387084961,33.9337387084961,48.8374099731445,48.8374099731445,48.8374099731445,48.8374099731445,63.7411880493164,63.7411880493164,63.7411880493164,63.7411880493164,31.9344482421875,31.9344482421875,31.9344482421875,31.9344482421875,31.9344482421875,35.4408111572266,35.4408111572266,35.4408111572266,35.4408111572266,50.0096740722656,50.0096740722656,50.0096740722656,50.0096740722656,63.7412490844727,63.7412490844727,63.7412490844727,63.7412490844727,63.7412490844727,31.0869750976562,31.0869750976562,31.0869750976562,31.0869750976562,46.1581039428711,46.1581039428711,46.1581039428711,46.1581039428711,60.7269668579102,60.7269668579102,60.7269668579102,60.7269668579102,54.7014312744141,54.7014312744141,54.7014312744141,54.7014312744141,54.7014312744141,32.5940475463867,32.5940475463867,32.5940475463867,32.5940475463867,47.8326873779297,47.8326873779297,47.8326873779297,47.8326873779297,62.9038696289062,62.9038696289062,62.9038696289062,62.9038696289062,40.3046798706055,40.3046798706055,40.3046798706055,40.3046798706055,40.3046798706055,23.3839416503906,23.3839416503906,23.3839416503906,23.3839416503906,35.2733764648438,35.2733764648438,35.2733764648438,35.2733764648438,48.8374938964844,48.8374938964844,48.8374938964844,48.8374938964844,63.2387924194336,63.2387924194336,63.2387924194336,63.2387924194336,37.7936248779297,37.7936248779297,37.7936248779297,37.7936248779297,37.7936248779297,33.0964889526367,33.0964889526367,33.0964889526367,33.0964889526367,47.6652450561523,47.6652450561523,47.6652450561523,47.6652450561523,62.7364273071289,62.7364273071289,62.7364273071289,62.7364273071289,44.6572036743164,44.6572036743164,44.6572036743164,44.6572036743164,44.6572036743164,33.2639541625977,33.2639541625977,33.2639541625977,33.2639541625977,48.670051574707,48.670051574707,48.670051574707,48.670051574707,63.2388610839844,63.2388610839844,63.2388610839844,63.2388610839844,46.6660614013672,46.6660614013672,46.6660614013672,46.6660614013672,46.6660614013672,33.4313659667969,33.4313659667969,33.4313659667969,33.4313659667969,48.8374633789062,48.8374633789062,48.8374633789062,48.8374633789062,63.4062728881836,63.4062728881836,63.4062728881836,63.4062728881836,33.2737350463867,33.2737350463867,33.2737350463867,33.2737350463867,33.2737350463867,32.2590103149414,32.2590103149414,32.2590103149414,32.2590103149414,47.1627883911133,47.1627883911133,47.1627883911133,47.1627883911133,62.5688323974609,62.5688323974609,62.5688323974609,62.5688323974609,39.6349411010742,39.6349411010742,39.6349411010742,39.6349411010742,39.6349411010742,34.2685089111328,34.2685089111328,34.2685089111328,34.2685089111328,49.172233581543,49.172233581543,49.172233581543,49.172233581543,63.9085540771484,63.9085540771484,63.9085540771484,63.9085540771484,63.9085540771484,30.2495880126953,30.2495880126953,30.2495880126953,30.2495880126953,45.3207702636719,45.3207702636719,45.3207702636719,45.3207702636719,60.8942718505859,60.8942718505859,60.8942718505859,60.8942718505859,53.3620986938477,53.3620986938477,53.3620986938477,53.3620986938477,53.3620986938477,32.9288635253906,32.9288635253906,32.9288635253906,32.9288635253906,47.6651840209961,47.6651840209961,47.6651840209961,47.6651840209961,61.8990783691406,61.8990783691406,61.8990783691406,61.8990783691406,49.6792144775391,49.6792144775391,49.6792144775391,49.6792144775391,49.6792144775391,32.5939559936523,32.5939559936523,32.5939559936523,32.5939559936523,40.9668350219727,40.9668350219727,40.9668350219727,40.9668350219727,47.1627655029297,47.1627655029297,47.1627655029297,47.1627655029297,62.4014053344727,62.4014053344727,62.4014053344727,62.4014053344727,42.1460342407227,42.1460342407227,42.1460342407227,42.1460342407227,42.1460342407227,33.0963363647461,33.0963363647461,33.0963363647461,33.0963363647461,47.6651458740234,47.6651458740234,47.6651458740234,47.6651458740234,62.5689239501953,62.5689239501953,62.5689239501953,62.5689239501953,43.6526794433594,43.6526794433594,43.6526794433594,43.6526794433594,43.6526794433594,33.5987167358398,33.5987167358398,33.5987167358398,33.5987167358398,48.3350372314453,48.3350372314453,48.3350372314453,48.3350372314453,62.5688781738281,62.5688781738281,62.5688781738281,62.5688781738281,42.4808578491211,42.4808578491211,42.4808578491211,42.4808578491211,42.4808578491211,33.5987777709961,33.5987777709961,33.5987777709961,33.5987777709961,48.6699600219727,48.6699600219727,48.6699600219727,48.6699600219727,63.7411422729492,63.7411422729492,63.7411422729492,63.7411422729492,30.0929565429688,30.0929565429688,30.0929565429688,30.0929565429688,30.0929565429688,35.7757339477539,35.7757339477539,35.7757339477539,35.7757339477539,51.1817779541016,51.1817779541016,51.1817779541016,51.1817779541016,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,63.9086074829102,23.3838806152344,23.3838806152344,23.3838806152344,23.3838806152344,38.1200942993164,38.1200942993164,38.1200942993164,38.1200942993164,52.8563613891602,52.8563613891602,52.8563613891602,52.8563613891602,63.8259506225586,63.8259506225586,63.8259506225586,63.8259506225586,27.9057083129883,27.9057083129883,27.9057083129883,27.9057083129883,42.8094024658203,42.8094024658203,42.8094024658203,42.8094024658203,57.8805618286133,57.8805618286133,57.8805618286133,57.8805618286133,63.8327941894531,63.8327941894531,63.8327941894531,63.8327941894531,63.8327941894531,31.379638671875,31.379638671875,31.379638671875,31.379638671875,46.1159057617188,46.1159057617188,46.1159057617188,46.1159057617188,60.8521728515625,60.8521728515625,60.8521728515625,60.8521728515625,57.170295715332,57.170295715332,57.170295715332,57.170295715332,57.170295715332,32.0495300292969,32.0495300292969,32.0495300292969,32.0495300292969,47.4556274414062,47.4556274414062,47.4556274414062,47.4556274414062,62.5267562866211,62.5267562866211,62.5267562866211,62.5267562866211,42.6061401367188,42.6061401367188,42.6061401367188,42.6061401367188,42.6061401367188,34.8962631225586,34.8962631225586,34.8962631225586,34.8962631225586,50.1349563598633,50.1349563598633,50.1349563598633,50.1349563598633,63.8664779663086,63.8664779663086,63.8664779663086,63.8664779663086,63.8664779663086,30.2075119018555,30.2075119018555,30.2075119018555,30.2075119018555,45.4461517333984,45.4461517333984,45.4461517333984,45.4461517333984,60.8522338867188,60.8522338867188,60.8522338867188,60.8522338867188,53.1526184082031,53.1526184082031,53.1526184082031,53.1526184082031,53.1526184082031,33.2217025756836,33.2217025756836,33.2217025756836,33.2217025756836,48.4603424072266,48.4603424072266,48.4603424072266,48.4603424072266,63.6989822387695,63.6989822387695,63.6989822387695,63.6989822387695,30.0508499145508,30.0508499145508,30.0508499145508,30.0508499145508,30.0508499145508,36.2359466552734,36.2359466552734,36.2359466552734,36.2359466552734,50.8047561645508,50.8047561645508,50.8047561645508,50.8047561645508,63.8665008544922,63.8665008544922,63.8665008544922,63.8665008544922,63.8665008544922,23.8441467285156,23.8441467285156,23.8441467285156,23.8441467285156,31.0448226928711,31.0448226928711,31.0448226928711,31.0448226928711,41.9295120239258,41.9295120239258,41.9295120239258,41.9295120239258,53.3166809082031,53.3166809082031,53.3166809082031,53.3166809082031,63.8665084838867,63.8665084838867,63.8665084838867,63.8665084838867,63.8665084838867,26.3560180664062,26.3560180664062,26.3560180664062,26.3560180664062,41.0922317504883,41.0922317504883,41.0922317504883,41.0922317504883,55.3261260986328,55.3261260986328,55.3261260986328,55.3261260986328,63.8665161132812,63.8665161132812,63.8665161132812,63.8665161132812,63.8665161132812,29.0352935791016,29.0352935791016,29.0352935791016,29.0352935791016,43.2692413330078,43.2692413330078,43.2692413330078,43.2692413330078,57.8379974365234,57.8379974365234,57.8379974365234,57.8379974365234,63.6991195678711,63.6991195678711,63.6991195678711,63.6991195678711,63.6991195678711,30.3750152587891,30.3750152587891,30.3750152587891,30.3750152587891,45.7810592651367,45.7810592651367,45.7810592651367,45.7810592651367,61.0196990966797,61.0196990966797,61.0196990966797,61.0196990966797,63.8283843994141,63.8283843994141,63.8283843994141,63.8283843994141,63.8283843994141,29.3467788696289,29.3467788696289,29.3467788696289,29.3467788696289,41.9061508178711,41.9061508178711,41.9061508178711,41.9061508178711,54.6328735351562,54.6328735351562,54.6328735351562,54.6328735351562,63.8430938720703,63.8430938720703,63.8430938720703,63.8430938720703,63.8430938720703,27.6722106933594,27.6722106933594,27.6722106933594,27.6722106933594,42.5759887695312,42.5759887695312,42.5759887695312,42.5759887695312,58.1494903564453,58.1494903564453,58.1494903564453,58.1494903564453,63.6756973266602,63.6756973266602,63.6756973266602,63.6756973266602,63.6756973266602,30.3515930175781,30.3515930175781,30.3515930175781,30.3515930175781,44.9204025268555,44.9204025268555,44.9204025268555,44.9204025268555,58.8193283081055,58.8193283081055,58.8193283081055,58.8193283081055,63.6757049560547,63.6757049560547,63.6757049560547,63.6757049560547,63.6757049560547,31.6912612915039,31.6912612915039,31.6912612915039,31.6912612915039,46.5949325561523,46.5949325561523,46.5949325561523,46.5949325561523,60.9962844848633,60.9962844848633,60.9962844848633,60.9962844848633,53.9662704467773,53.9662704467773,53.9662704467773,53.9662704467773,53.9662704467773,33.1983871459961,33.1983871459961,33.1983871459961,33.1983871459961,45.0878753662109,45.0878753662109,45.0878753662109,45.0878753662109,48.4370269775391,48.4370269775391,48.4370269775391,48.4370269775391,61.8336334228516,61.8336334228516,61.8336334228516,61.8336334228516,43.9220275878906,43.9220275878906,43.9220275878906,43.9220275878906,43.9220275878906,33.7007675170898,33.7007675170898,33.7007675170898,33.7007675170898,48.7718963623047,48.7718963623047,48.7718963623047,48.7718963623047,63.340705871582,63.340705871582,63.340705871582,63.340705871582,37.058464050293,37.058464050293,37.058464050293,37.058464050293,37.058464050293,34.3705520629883,34.3705520629883,34.3705520629883,34.3705520629883,49.4417343139648,49.4417343139648,49.4417343139648,49.4417343139648,63.8431396484375,63.8431396484375,63.8431396484375,63.8431396484375,63.8431396484375,27.6722564697266,27.6722564697266,27.6722564697266,27.6722564697266,42.0736083984375,42.0736083984375,42.0736083984375,42.0736083984375,56.8098754882812,56.8098754882812,56.8098754882812,56.8098754882812,63.6757431030273,63.6757431030273,63.6757431030273,63.6757431030273,63.6757431030273,31.356330871582,31.356330871582,31.356330871582,31.356330871582,46.0926513671875,46.0926513671875,46.0926513671875,46.0926513671875,61.1638336181641,61.1638336181641,61.1638336181641,61.1638336181641,47.7723541259766,47.7723541259766,47.7723541259766,47.7723541259766,47.7723541259766,33.5333404541016,33.5333404541016,33.5333404541016,33.5333404541016,48.7719268798828,48.7719268798828,48.7719268798828,48.7719268798828,63.0058212280273,63.0058212280273,63.0058212280273,63.0058212280273,37.5607070922852,37.5607070922852,37.5607070922852,37.5607070922852,37.5607070922852,34.8729553222656,34.8729553222656,34.8729553222656,34.8729553222656,49.7766799926758,49.7766799926758,49.7766799926758,49.7766799926758,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,63.8431701660156,23.6533584594727,23.6533584594727,23.6533584594727,23.6533584594727,39.2268600463867,39.2268600463867,39.2268600463867,39.2268600463867,54.4655532836914,54.4655532836914,54.4655532836914,54.4655532836914,63.6757736206055,63.6757736206055,63.6757736206055,63.6757736206055,63.6757736206055,31.0214996337891,31.0214996337891,31.0214996337891,31.0214996337891,45.7577133178711,45.7577133178711,45.7577133178711,45.7577133178711,60.9963531494141,60.9963531494141,60.9963531494141,60.9963531494141,54.6359558105469,54.6359558105469,54.6359558105469,54.6359558105469,54.6359558105469,32.3611145019531,32.3611145019531,32.3611145019531,32.3611145019531,47.7672119140625,47.7672119140625,47.7672119140625,47.7672119140625,62.8383941650391,62.8383941650391,62.8383941650391,62.8383941650391,37.8955459594727,37.8955459594727,37.8955459594727,37.8955459594727,37.8955459594727,35.0404968261719,35.0404968261719,35.0404968261719,35.0404968261719,50.6139984130859,50.6139984130859,50.6139984130859,50.6139984130859,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,63.8432006835938,30.5190963745117,30.5190963745117,30.5190963745117,30.5190963745117,45.2553634643555,45.2553634643555,45.2553634643555,45.2553634643555,60.1591415405273,60.1591415405273,60.1591415405273,60.1591415405273,57.4818496704102,57.4818496704102,57.4818496704102,57.4818496704102,57.4818496704102,31.3564453125,31.3564453125,31.3564453125,31.3564453125,46.0927124023438,46.0927124023438,46.0927124023438,46.0927124023438,60.4940643310547,60.4940643310547,60.4940643310547,60.4940643310547,58.8210906982422,58.8210906982422,58.8210906982422,58.8210906982422,58.8210906982422,31.6913146972656,31.6913146972656,31.6913146972656,31.6913146972656,35.7103500366211,35.7103500366211,35.7103500366211,35.7103500366211,47.2649230957031,47.2649230957031,47.2649230957031,47.2649230957031,62.3361053466797,62.3361053466797,62.3361053466797,62.3361053466797,43.9221267700195,43.9221267700195,43.9221267700195,43.9221267700195,43.9221267700195,33.8682708740234,33.8682708740234,33.8682708740234,33.8682708740234,47.0974731445312,47.0974731445312,47.0974731445312,47.0974731445312,61.6662292480469,61.6662292480469,61.6662292480469,61.6662292480469,48.77685546875,48.77685546875,48.77685546875,48.77685546875,48.77685546875,33.1984481811523,33.1984481811523,33.1984481811523,33.1984481811523,47.4323425292969,47.4323425292969,47.4323425292969,47.4323425292969,61.3313217163086,61.3313217163086,61.3313217163086,61.3313217163086,56.1426467895508,56.1426467895508,56.1426467895508,56.1426467895508,56.1426467895508,30.5191345214844,30.5191345214844,30.5191345214844,30.5191345214844,44.7530288696289,44.7530288696289,44.7530288696289,44.7530288696289,59.6568069458008,59.6568069458008,59.6568069458008,59.6568069458008,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.8432464599609,63.7669525146484,63.7669525146484,63.7669525146484,63.7669525146484,63.7669525146484,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,20.2847518920898,32.6766128540039,32.6766128540039,32.6766128540039,32.6766128540039,48.0826568603516,48.0826568603516,48.0826568603516,48.0826568603516,62.4840087890625,62.4840087890625,62.4840087890625,62.4840087890625,30.3429412841797,30.3429412841797,30.3429412841797,30.3429412841797,30.3429412841797,34.5186004638672,34.5186004638672,34.5186004638672,34.5186004638672,49.7572402954102,49.7572402954102,49.7572402954102,49.7572402954102,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,27.6528472900391,27.6528472900391,27.6528472900391,27.6528472900391,42.891487121582,42.891487121582,42.891487121582,42.891487121582,57.9627227783203,57.9627227783203,57.9627227783203,57.9627227783203,57.2950286865234,57.2950286865234,57.2950286865234,57.2950286865234,57.2950286865234,25.8108749389648,25.8108749389648,25.8108749389648,25.8108749389648,30.8345489501953,30.8345489501953,30.8345489501953,30.8345489501953,46.0731887817383,46.0731887817383,46.0731887817383,46.0731887817383,61.3118286132812,61.3118286132812,61.3118286132812,61.3118286132812,35.6998977661133,35.6998977661133,35.6998977661133,35.6998977661133,35.6998977661133,34.183708190918,34.183708190918,34.183708190918,34.183708190918,48.4176025390625,48.4176025390625,48.4176025390625,48.4176025390625,61.814208984375,61.814208984375,61.814208984375,61.814208984375,35.0302886962891,35.0302886962891,35.0302886962891,35.0302886962891,35.0302886962891,34.6860885620117,34.6860885620117,34.6860885620117,34.6860885620117,49.75732421875,49.75732421875,49.75732421875,49.75732421875,63.9912185668945,63.9912185668945,63.9912185668945,63.9912185668945,63.9912185668945,24.4712371826172,24.4712371826172,24.4712371826172,24.4712371826172,39.3749618530273,39.3749618530273,39.3749618530273,39.3749618530273,53.7763137817383,53.7763137817383,53.7763137817383,53.7763137817383,63.8471298217773,63.8471298217773,63.8471298217773,63.8471298217773,63.8471298217773,27.2650527954102,27.2650527954102,27.2650527954102,27.2650527954102,41.4989471435547,41.4989471435547,41.4989471435547,41.4989471435547,56.9049911499023,56.9049911499023,56.9049911499023,56.9049911499023,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,31.116584777832,31.116584777832,31.116584777832,31.116584777832,45.8527984619141,45.8527984619141,45.8527984619141,45.8527984619141,60.254150390625,60.254150390625,60.254150390625,60.254150390625,42.5105361938477,42.5105361938477,42.5105361938477,42.5105361938477,42.5105361938477,33.6284561157227,33.6284561157227,33.6284561157227,33.6284561157227,48.3646697998047,48.3646697998047,48.3646697998047,48.3646697998047,62.7660217285156,62.7660217285156,62.7660217285156,62.7660217285156,23.0786361694336,23.0786361694336,23.0786361694336,23.0786361694336,38.484733581543,38.484733581543,38.484733581543,38.484733581543,53.8908309936523,53.8908309936523,53.8908309936523,53.8908309936523,63.770881652832,63.770881652832,63.770881652832,63.770881652832,63.770881652832,30.4467239379883,30.4467239379883,30.4467239379883,30.4467239379883,45.6853637695312,45.6853637695312,45.6853637695312,45.6853637695312,60.0867691040039,60.0867691040039,60.0867691040039,60.0867691040039,45.5238342285156,45.5238342285156,45.5238342285156,45.5238342285156,45.5238342285156,33.7959365844727,33.7959365844727,33.7959365844727,33.7959365844727,49.2019805908203,49.2019805908203,49.2019805908203,49.2019805908203,63.9383010864258,63.9383010864258,63.9383010864258,63.9383010864258,63.9383010864258,25.4230651855469,25.4230651855469,25.4230651855469,25.4230651855469,40.1593322753906,40.1593322753906,40.1593322753906,40.1593322753906,55.2305145263672,55.2305145263672,55.2305145263672,55.2305145263672,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,29.2745971679688,29.2745971679688,29.2745971679688,29.2745971679688,44.6806945800781,44.6806945800781,44.6806945800781,44.6806945800781,60.2541961669922,60.2541961669922,60.2541961669922,60.2541961669922,43.1801986694336,43.1801986694336,43.1801986694336,43.1801986694336,43.1801986694336,33.7959594726562,33.7959594726562,33.7959594726562,33.7959594726562,48.3647155761719,48.3647155761719,48.3647155761719,48.3647155761719,63.1010360717773,63.1010360717773,63.1010360717773,63.1010360717773,21.5715103149414,21.5715103149414,21.5715103149414,21.5715103149414,30.4468154907227,30.4468154907227,30.4468154907227,30.4468154907227,39.1545562744141,39.1545562744141,39.1545562744141,39.1545562744141,51.211555480957,51.211555480957,51.211555480957,51.211555480957,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,27.767448425293,27.767448425293,27.767448425293,27.767448425293,41.6664276123047,41.6664276123047,41.6664276123047,41.6664276123047,56.2352905273438,56.2352905273438,56.2352905273438,56.2352905273438,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,30.2793197631836,30.2793197631836,30.2793197631836,30.2793197631836,45.3505020141602,45.3505020141602,45.3505020141602,45.3505020141602,60.0867691040039,60.0867691040039,60.0867691040039,60.0867691040039,42.3432083129883,42.3432083129883,42.3432083129883,42.3432083129883,42.3432083129883,33.7959365844727,33.7959365844727,33.7959365844727,33.7959365844727,49.0345764160156,49.0345764160156,49.0345764160156,49.0345764160156,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,63.9383544921875,24.9207458496094,24.9207458496094,24.9207458496094,24.9207458496094,39.8244171142578,39.8244171142578,39.8244171142578,39.8244171142578,54.3932800292969,54.3932800292969,54.3932800292969,54.3932800292969,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,30.9490661621094,30.9490661621094,30.9490661621094,30.9490661621094,40.996467590332,40.996467590332,40.996467590332,40.996467590332,54.0581588745117,54.0581588745117,54.0581588745117,54.0581588745117,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,31.1164779663086,31.1164779663086,31.1164779663086,31.1164779663086,45.8527984619141,45.8527984619141,45.8527984619141,45.8527984619141,60.5890121459961,60.5890121459961,60.5890121459961,60.5890121459961,44.6867370605469,44.6867370605469,44.6867370605469,44.6867370605469,44.6867370605469,33.1260299682617,33.1260299682617,33.1260299682617,33.1260299682617,47.6948394775391,47.6948394775391,47.6948394775391,47.6948394775391,63.1009368896484,63.1009368896484,63.1009368896484,63.1009368896484,23.0785827636719,23.0785827636719,23.0785827636719,23.0785827636719,38.4846267700195,38.4846267700195,38.4846267700195,38.4846267700195,53.3884048461914,53.3884048461914,53.3884048461914,53.3884048461914,60.0867080688477,60.0867080688477,60.0867080688477,60.0867080688477,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,25.4229431152344,25.4229431152344,25.4229431152344,25.4229431152344,40.4941787719727,40.4941787719727,40.4941787719727,40.4941787719727,55.2303924560547,55.2303924560547,55.2303924560547,55.2303924560547,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,30.7815933227539,30.7815933227539,30.7815933227539,30.7815933227539,45.8527755737305,45.8527755737305,45.8527755737305,45.8527755737305,60.7565536499023,60.7565536499023,60.7565536499023,60.7565536499023,35.1447296142578,35.1447296142578,35.1447296142578,35.1447296142578,35.1447296142578,34.8006362915039,34.8006362915039,34.8006362915039,34.8006362915039,48.8670196533203,48.8670196533203,48.8670196533203,48.8670196533203,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,63.9382553100586,24.9206466674805,24.9206466674805,24.9206466674805,24.9206466674805,39.9917755126953,39.9917755126953,39.9917755126953,39.9917755126953,55.3979263305664,55.3979263305664,55.3979263305664,55.3979263305664,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,30.1117858886719,30.1117858886719,30.1117858886719,30.1117858886719,43.0060195922852,43.0060195922852,43.0060195922852,43.0060195922852,55.9003067016602,55.9003067016602,55.9003067016602,55.9003067016602,63.7708129882812,63.7708129882812,63.7708129882812,63.7708129882812,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,24.585693359375,24.585693359375,24.585693359375,24.585693359375,36.140266418457,36.140266418457,36.140266418457,36.140266418457,51.0439910888672,51.0439910888672,51.0439910888672,51.0439910888672,63.9382781982422,63.9382781982422,63.9382781982422,63.9382781982422,63.9382781982422,26.7627029418945,26.7627029418945,26.7627029418945,26.7627029418945,41.3315124511719,41.3315124511719,41.3315124511719,41.3315124511719,56.235237121582,56.235237121582,56.235237121582,56.235237121582,63.770881652832,63.770881652832,63.770881652832,63.770881652832,63.770881652832,30.6141815185547,30.6141815185547,30.6141815185547,30.6141815185547,45.0155868530273,45.0155868530273,45.0155868530273,45.0155868530273,59.2494812011719,59.2494812011719,59.2494812011719,59.2494812011719,54.2288513183594,54.2288513183594,54.2288513183594,54.2288513183594,54.2288513183594,32.288818359375,32.288818359375,32.288818359375,32.288818359375,47.6949157714844,47.6949157714844,47.6949157714844,47.6949157714844,63.2684173583984,63.2684173583984,63.2684173583984,63.2684173583984,21.4040298461914,21.4040298461914,21.4040298461914,21.4040298461914,37.3125,37.3125,37.3125,37.3125,52.7185974121094,52.7185974121094,52.7185974121094,52.7185974121094,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,63.9383087158203,30.2793426513672,30.2793426513672,30.2793426513672,30.2793426513672,45.5179824829102,45.5179824829102,45.5179824829102,45.5179824829102,60.9240798950195,60.9240798950195,60.9240798950195,60.9240798950195,42.6779861450195,42.6779861450195,42.6779861450195,42.6779861450195,42.6779861450195,33.1261291503906,33.1261291503906,33.1261291503906,33.1261291503906,47.6948852539062,47.6948852539062,47.6948852539062,47.6948852539062,61.9288330078125,61.9288330078125,61.9288330078125,61.9288330078125,27.9464263916016,27.9464263916016,27.9464263916016,27.9464263916016,27.9464263916016,35.3030319213867,35.3030319213867,35.3030319213867,35.3030319213867,41.1640472412109,41.1640472412109,41.1640472412109,41.1640472412109,49.536979675293,49.536979675293,49.536979675293,49.536979675293,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,63.9383316040039,26.0928726196289,26.0928726196289,26.0928726196289,26.0928726196289,40.4942779541016,40.4942779541016,40.4942779541016,40.4942779541016,53.8908309936523,53.8908309936523,53.8908309936523,53.8908309936523,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,63.7709350585938,30.1118621826172,30.1118621826172,30.1118621826172,30.1118621826172,44.1782989501953,44.1782989501953,44.1782989501953,44.1782989501953,59.0820236206055,59.0820236206055,59.0820236206055,59.0820236206055,53.0570755004883,53.0570755004883,53.0570755004883,53.0570755004883,53.0570755004883,31.6189880371094,31.6189880371094,31.6189880371094,31.6189880371094,46.5227661132812,46.5227661132812,46.5227661132812,46.5227661132812,61.7614059448242,61.7614059448242,61.7614059448242,61.7614059448242,25.4353942871094,25.4353942871094,25.4353942871094,25.4353942871094,25.4353942871094,36.1403503417969,36.1403503417969,36.1403503417969,36.1403503417969,50.3742446899414,50.3742446899414,50.3742446899414,50.3742446899414,63.938362121582,63.938362121582,63.938362121582,63.938362121582,63.938362121582,22.7436294555664,22.7436294555664,22.7436294555664,22.7436294555664,38.1496887207031,38.1496887207031,38.1496887207031,38.1496887207031,52.8860092163086,52.8860092163086,52.8860092163086,52.8860092163086,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,63.7708053588867,30.6141052246094,30.6141052246094,30.6141052246094,30.6141052246094,46.1876602172852,46.1876602172852,46.1876602172852,46.1876602172852,61.2588958740234,61.2588958740234,61.2588958740234,61.2588958740234,35.1446990966797,35.1446990966797,35.1446990966797,35.1446990966797,35.1446990966797,34.1307220458984,34.1307220458984,34.1307220458984,34.1307220458984,49.201904296875,49.201904296875,49.201904296875,49.201904296875,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,63.9382247924805,28.1022567749023,28.1022567749023,28.1022567749023,28.1022567749023,42.9702224731445,42.9702224731445,42.9702224731445,42.9702224731445,55.6969985961914,55.6969985961914,55.6969985961914,55.6969985961914,63.902473449707,63.902473449707,63.902473449707,63.902473449707,63.902473449707,26.1924209594727,26.1924209594727,26.1924209594727,26.1924209594727,28.8717422485352,28.8717422485352,28.8717422485352,28.8717422485352,33.3930969238281,33.3930969238281,33.3930969238281,33.3930969238281,35.5700836181641,35.5700836181641,35.5700836181641,35.5700836181641,44.1103820800781,44.1103820800781,44.1103820800781,44.1103820800781,56.1673278808594,56.1673278808594,56.1673278808594,56.1673278808594,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,27.5320892333984,27.5320892333984,27.5320892333984,27.5320892333984,42.603271484375,42.603271484375,42.603271484375,42.603271484375,56.1673355102539,56.1673355102539,56.1673355102539,56.1673355102539,63.8704376220703,63.8704376220703,63.8704376220703,63.8704376220703,63.8704376220703,23.3457107543945,23.3457107543945,23.3457107543945,23.3457107543945,38.0819244384766,38.0819244384766,38.0819244384766,38.0819244384766,52.818244934082,52.818244934082,52.818244934082,52.818244934082,63.8704452514648,63.8704452514648,63.8704452514648,63.8704452514648,63.8704452514648,25.690071105957,25.690071105957,25.690071105957,25.690071105957,39.9240188598633,39.9240188598633,39.9240188598633,39.9240188598633,55.1626052856445,55.1626052856445,55.1626052856445,55.1626052856445,63.7030487060547,63.7030487060547,63.7030487060547,63.7030487060547,63.7030487060547,30.8813171386719,30.8813171386719,30.8813171386719,30.8813171386719,45.6175842285156,45.6175842285156,45.6175842285156,45.6175842285156,60.1863403320312,60.1863403320312,60.1863403320312,60.1863403320312,59.015739440918,59.015739440918,59.015739440918,59.015739440918,59.015739440918,31.8860702514648,31.8860702514648,31.8860702514648,31.8860702514648,47.1246566772461,47.1246566772461,47.1246566772461,47.1246566772461,62.5307540893555,62.5307540893555,62.5307540893555,62.5307540893555,38.0902252197266,38.0902252197266,38.0902252197266,38.0902252197266,38.0902252197266,34.5653457641602,34.5653457641602,34.5653457641602,34.5653457641602,49.6365814208984,49.6365814208984,49.6365814208984,49.6365814208984,63.870475769043,63.870475769043,63.870475769043,63.870475769043,63.870475769043,24.3504943847656,24.3504943847656,24.3504943847656,24.3504943847656,39.0867614746094,39.0867614746094,39.0867614746094,39.0867614746094,54.1578903198242,54.1578903198242,54.1578903198242,54.1578903198242,63.7030792236328,63.7030792236328,63.7030792236328,63.7030792236328,63.7030792236328,31.0488052368164,31.0488052368164,31.0488052368164,31.0488052368164,45.4501037597656,45.4501037597656,45.4501037597656,45.4501037597656,60.3538818359375,60.3538818359375,60.3538818359375,60.3538818359375,58.1787490844727,58.1787490844727,58.1787490844727,58.1787490844727,58.1787490844727,31.383674621582,31.383674621582,31.383674621582,31.383674621582,46.2874526977539,46.2874526977539,46.2874526977539,46.2874526977539,60.353889465332,60.353889465332,60.353889465332,60.353889465332,60.3550109863281,60.3550109863281,60.3550109863281,60.3550109863281,60.3550109863281,30.8813095092773,30.8813095092773,30.8813095092773,30.8813095092773,45.9525451660156,45.9525451660156,45.9525451660156,45.9525451660156,60.6887588500977,60.6887588500977,60.6887588500977,60.6887588500977,56.0025100708008,56.0025100708008,56.0025100708008,56.0025100708008,56.0025100708008,32.3884353637695,32.3884353637695,32.3884353637695,32.3884353637695,46.7897872924805,46.7897872924805,46.7897872924805,46.7897872924805,62.0284271240234,62.0284271240234,62.0284271240234,62.0284271240234,46.6278839111328,46.6278839111328,46.6278839111328,46.6278839111328,46.6278839111328,24.0155639648438,24.0155639648438,24.0155639648438,24.0155639648438,30.7138671875,30.7138671875,30.7138671875,30.7138671875,45.7851028442383,45.7851028442383,45.7851028442383,45.7851028442383,60.3539123535156,60.3539123535156,60.3539123535156,60.3539123535156,59.5180130004883,59.5180130004883,59.5180130004883,59.5180130004883,59.5180130004883,31.5512161254883,31.5512161254883,31.5512161254883,31.5512161254883,45.1152801513672,45.1152801513672,45.1152801513672,45.1152801513672,60.3538665771484,60.3538665771484,60.3538665771484,60.3538665771484,57.1743621826172,57.1743621826172,57.1743621826172,57.1743621826172,57.1743621826172,32.2210006713867,32.2210006713867,32.2210006713867,32.2210006713867,47.6271514892578,47.6271514892578,47.6271514892578,47.6271514892578,63.0331954956055,63.0331954956055,63.0331954956055,63.0331954956055,38.5925064086914,38.5925064086914,38.5925064086914,38.5925064086914,38.5925064086914,33.895637512207,33.895637512207,33.895637512207,33.895637512207,48.9668197631836,48.9668197631836,48.9668197631836,48.9668197631836,63.8705444335938,63.8705444335938,63.8705444335938,63.8705444335938,63.8705444335938,30.7139511108398,30.7139511108398,30.7139511108398,30.7139511108398,46.2874526977539,46.2874526977539,46.2874526977539,46.2874526977539,61.0237731933594,61.0237731933594,61.0237731933594,61.0237731933594,51.8174514770508,51.8174514770508,51.8174514770508,51.8174514770508,51.8174514770508,33.0582046508789,33.0582046508789,33.0582046508789,33.0582046508789,47.7944183349609,47.7944183349609,47.7944183349609,47.7944183349609,62.6981964111328,62.6981964111328,62.6981964111328,62.6981964111328,35.4116897583008,35.4116897583008,35.4116897583008,35.4116897583008,35.4116897583008,34.9002456665039,34.9002456665039,34.9002456665039,34.9002456665039,50.1388320922852,50.1388320922852,50.1388320922852,50.1388320922852,63.8704071044922,63.8704071044922,63.8704071044922,63.8704071044922,63.8704071044922,25.0202026367188,25.0202026367188,25.0202026367188,25.0202026367188,40.091438293457,40.091438293457,40.091438293457,40.091438293457,54.8276519775391,54.8276519775391,54.8276519775391,54.8276519775391,63.703010559082,63.703010559082,63.703010559082,63.703010559082,63.703010559082,30.8812789916992,30.8812789916992,30.8812789916992,30.8812789916992,45.7850036621094,45.7850036621094,45.7850036621094,45.7850036621094,49.4690170288086,49.4690170288086,49.4690170288086,49.4690170288086,60.5212173461914,60.5212173461914,60.5212173461914,60.5212173461914,57.1742553710938,57.1742553710938,57.1742553710938,57.1742553710938,57.1742553710938,30.881233215332,30.881233215332,30.881233215332,30.881233215332,44.7802124023438,44.7802124023438,44.7802124023438,44.7802124023438,59.5165328979492,59.5165328979492,59.5165328979492,59.5165328979492,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,30.3788681030273,30.3788681030273,30.3788681030273,30.3788681030273,45.2826461791992,45.2826461791992,45.2826461791992,45.2826461791992,60.3538284301758,60.3538284301758,60.3538284301758,60.3538284301758,55.6676330566406,55.6676330566406,55.6676330566406,55.6676330566406,55.6676330566406,32.5558776855469,32.5558776855469,32.5558776855469,32.5558776855469,47.459602355957,47.459602355957,47.459602355957,47.459602355957,62.8656463623047,62.8656463623047,62.8656463623047,62.8656463623047,35.5791397094727,35.5791397094727,35.5791397094727,35.5791397094727,35.5791397094727,33.7280349731445,33.7280349731445,33.7280349731445,33.7280349731445,49.1341323852539,49.1341323852539,49.1341323852539,49.1341323852539,63.7029418945312,63.7029418945312,63.7029418945312,63.7029418945312,28.8829803466797,28.8829803466797,28.8829803466797,28.8829803466797,28.8829803466797,35.7375335693359,35.7375335693359,35.7375335693359,35.7375335693359,48.9667358398438,48.9667358398438,48.9667358398438,48.9667358398438,63.8704605102539,63.8704605102539,63.8704605102539,63.8704605102539,63.8704605102539,23.3457336425781,23.3457336425781,23.3457336425781,23.3457336425781,38.7518310546875,38.7518310546875,38.7518310546875,38.7518310546875,54.1578750610352,54.1578750610352,54.1578750610352,54.1578750610352,63.8704681396484,63.8704681396484,63.8704681396484,63.8704681396484,63.8704681396484,28.0345001220703,28.0345001220703,28.0345001220703,28.0345001220703,42.6033096313477,42.6033096313477,42.6033096313477,42.6033096313477,57.8420028686523,57.8420028686523,57.8420028686523,57.8420028686523,63.870475769043,63.870475769043,63.870475769043,63.870475769043,63.870475769043,30.5464248657227,30.5464248657227,30.5464248657227,30.5464248657227,45.2826385498047,45.2826385498047,45.2826385498047,45.2826385498047,60.0189590454102,60.0189590454102,60.0189590454102,60.0189590454102,58.3461456298828,58.3461456298828,58.3461456298828,58.3461456298828,58.3461456298828,31.0487518310547,31.0487518310547,31.0487518310547,31.0487518310547,46.119987487793,46.119987487793,46.119987487793,46.119987487793,61.693489074707,61.693489074707,61.693489074707,61.693489074707,46.2930526733398,46.2930526733398,46.2930526733398,46.2930526733398,46.2930526733398,33.2257614135742,33.2257614135742,33.2257614135742,33.2257614135742,48.6318588256836,48.6318588256836,48.6318588256836,48.6318588256836,63.8704452514648,63.8704452514648,63.8704452514648,63.8704452514648,31.0592803955078,31.0592803955078,31.0592803955078,31.0592803955078,31.0592803955078,34.9002914428711,34.9002914428711,34.9002914428711,34.9002914428711,50.3064422607422,50.3064422607422,50.3064422607422,50.3064422607422,63.8705062866211,63.8705062866211,63.8705062866211,63.8705062866211,63.8705062866211,23.3457794189453,23.3457794189453,23.3457794189453,23.3457794189453,38.2494506835938,38.2494506835938,38.2494506835938,38.2494506835938,53.1531753540039,53.1531753540039,53.1531753540039,53.1531753540039,63.8705139160156,63.8705139160156,63.8705139160156,63.8705139160156,63.8705139160156,30.0440902709961,30.0440902709961,30.0440902709961,30.0440902709961,32.5559539794922,32.5559539794922,32.5559539794922,32.5559539794922,43.7755584716797,43.7755584716797,43.7755584716797,43.7755584716797,58.0094528198242,58.0094528198242,58.0094528198242,58.0094528198242,63.7031173706055,63.7031173706055,63.7031173706055,63.7031173706055,63.7031173706055,30.8813323974609,30.8813323974609,30.8813323974609,30.8813323974609,45.4501419067383,45.4501419067383,45.4501419067383,45.4501419067383,60.1864624023438,60.1864624023438,60.1864624023438,60.1864624023438,63.703125,63.703125,63.703125,63.703125,63.703125,30.8813934326172,30.8813934326172,30.8813934326172,30.8813934326172,46.1199798583984,46.1199798583984,46.1199798583984,46.1199798583984,61.0237579345703,61.0237579345703,61.0237579345703,61.0237579345703,57.006965637207,57.006965637207,57.006965637207,57.006965637207,57.006965637207,31.2163162231445,31.2163162231445,31.2163162231445,31.2163162231445,46.2874450683594,46.2874450683594,46.2874450683594,46.2874450683594,60.8562545776367,60.8562545776367,60.8562545776367,60.8562545776367,51.8174438476562,51.8174438476562,51.8174438476562,51.8174438476562,51.8174438476562,32.8908996582031,32.8908996582031,32.8908996582031,32.8908996582031,47.6271667480469,47.6271667480469,47.6271667480469,47.6271667480469,63.3681793212891,63.3681793212891,63.3681793212891,63.3681793212891,36.2488632202148,36.2488632202148,36.2488632202148,36.2488632202148,36.2488632202148,31.2394790649414,31.2394790649414,31.2394790649414,31.2394790649414,45.9757461547852,45.9757461547852,45.9757461547852,45.9757461547852,61.0469284057617,61.0469284057617,61.0469284057617,61.0469284057617,56.1931686401367,56.1931686401367,56.1931686401367,56.1931686401367,56.1931686401367,32.0004959106445,32.0004959106445,32.0004959106445,32.0004959106445,46.7367095947266,46.7367095947266,46.7367095947266,46.7367095947266,61.6404876708984,61.6404876708984,61.6404876708984,61.6404876708984,47.5792846679688,47.5792846679688,47.5792846679688,47.5792846679688,47.5792846679688,33.8425369262695,33.8425369262695,33.8425369262695,33.8425369262695,48.746208190918,48.746208190918,48.746208190918,48.746208190918,63.3150177001953,63.3150177001953,63.3150177001953,63.3150177001953,35.5261917114258,35.5261917114258,35.5261917114258,35.5261917114258,35.5261917114258,35.0146942138672,35.0146942138672,35.0146942138672,35.0146942138672,47.5740127563477,47.5740127563477,47.5740127563477,47.5740127563477,52.4302825927734,52.4302825927734,52.4302825927734,52.4302825927734,63.4824829101562,63.4824829101562,63.4824829101562,63.4824829101562,38.5394744873047,38.5394744873047,38.5394744873047,38.5394744873047,38.5394744873047,34.5123291015625,34.5123291015625,34.5123291015625,34.5123291015625,49.248649597168,49.248649597168,49.248649597168,49.248649597168,62.9801712036133,62.9801712036133,62.9801712036133,62.9801712036133,49.0859451293945,49.0859451293945,49.0859451293945,49.0859451293945,49.0859451293945,33.1726760864258,33.1726760864258,33.1726760864258,33.1726760864258,47.2391128540039,47.2391128540039,47.2391128540039,47.2391128540039,62.1428909301758,62.1428909301758,62.1428909301758,62.1428909301758,44.9008483886719,44.9008483886719,44.9008483886719,44.9008483886719,44.9008483886719,34.0099716186523,34.0099716186523,34.0099716186523,34.0099716186523,48.9137496948242,48.9137496948242,48.9137496948242,48.9137496948242,63.9848785400391,63.9848785400391,63.9848785400391,63.9848785400391,27.3234176635742,27.3234176635742,27.3234176635742,27.3234176635742,27.3234176635742,36.0195236206055,36.0195236206055,36.0195236206055,36.0195236206055,51.2581100463867,51.2581100463867,51.2581100463867,51.2581100463867,63.8175354003906,63.8175354003906,63.8175354003906,63.8175354003906,63.8175354003906,30.9958038330078,30.9958038330078,30.9958038330078,30.9958038330078,46.7367630004883,46.7367630004883,46.7367630004883,46.7367630004883,60.8032531738281,60.8032531738281,60.8032531738281,60.8032531738281,54.777717590332,54.777717590332,54.777717590332,54.777717590332,54.777717590332,32.8377914428711,32.8377914428711,32.8377914428711,32.8377914428711,46.9042282104492,46.9042282104492,46.9042282104492,46.9042282104492,61.3055801391602,61.3055801391602,61.3055801391602,61.3055801391602,51.0948333740234,51.0948333740234,51.0948333740234,51.0948333740234,51.0948333740234,33.3402252197266,33.3402252197266,33.3402252197266,33.3402252197266,48.7463226318359,48.7463226318359,48.7463226318359,48.7463226318359,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,25.8045883178711,25.8045883178711,25.8045883178711,25.8045883178711,41.3781433105469,41.3781433105469,41.3781433105469,41.3781433105469,55.1096649169922,55.1096649169922,55.1096649169922,55.1096649169922,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,30.3260040283203,30.3260040283203,30.3260040283203,30.3260040283203,45.8995590209961,45.8995590209961,45.8995590209961,45.8995590209961,61.3056564331055,61.3056564331055,61.3056564331055,61.3056564331055,51.4296646118164,51.4296646118164,51.4296646118164,51.4296646118164,51.4296646118164,33.172737121582,33.172737121582,33.172737121582,33.172737121582,47.0717697143555,47.0717697143555,47.0717697143555,47.0717697143555,62.142951965332,62.142951965332,62.142951965332,62.142951965332,43.2268676757812,43.2268676757812,43.2268676757812,43.2268676757812,43.2268676757812,34.177490234375,34.177490234375,34.177490234375,34.177490234375,48.9138107299805,48.9138107299805,48.9138107299805,48.9138107299805,63.8175354003906,63.8175354003906,63.8175354003906,63.8175354003906,30.5041580200195,30.5041580200195,30.5041580200195,30.5041580200195,30.5041580200195,35.6846694946289,35.6846694946289,35.6846694946289,35.6846694946289,50.9233093261719,50.9233093261719,50.9233093261719,50.9233093261719,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,30.9958114624023,30.9958114624023,30.9958114624023,30.9958114624023,36.8568267822266,36.8568267822266,36.8568267822266,36.8568267822266,46.0670471191406,46.0670471191406,46.0670471191406,46.0670471191406,61.3056869506836,61.3056869506836,61.3056869506836,61.3056869506836,53.6059494018555,53.6059494018555,53.6059494018555,53.6059494018555,53.6059494018555,32.3354797363281,32.3354797363281,32.3354797363281,32.3354797363281,46.5694274902344,46.5694274902344,46.5694274902344,46.5694274902344,60.9707794189453,60.9707794189453,60.9707794189453,60.9707794189453,60.9717407226562,60.9717407226562,60.9717407226562,60.9717407226562,60.9717407226562,30.8284225463867,30.8284225463867,30.8284225463867,30.8284225463867,45.0623168945312,45.0623168945312,45.0623168945312,45.0623168945312,57.9565505981445,57.9565505981445,57.9565505981445,57.9565505981445,63.8176193237305,63.8176193237305,63.8176193237305,63.8176193237305,63.8176193237305,29.9910888671875,29.9910888671875,29.9910888671875,29.9910888671875,44.3924942016602,44.3924942016602,44.3924942016602,44.3924942016602,59.2962188720703,59.2962188720703,59.2962188720703,59.2962188720703,63.817626953125,63.817626953125,63.817626953125,63.817626953125,63.817626953125,30.4934692382812,30.4934692382812,30.4934692382812,30.4934692382812,44.5599594116211,44.5599594116211,44.5599594116211,44.5599594116211,59.1287155151367,59.1287155151367,59.1287155151367,59.1287155151367,63.8176345825195,63.8176345825195,63.8176345825195,63.8176345825195,63.8176345825195,31.3306274414062,31.3306274414062,31.3306274414062,31.3306274414062,46.7367553710938,46.7367553710938,46.7367553710938,46.7367553710938,61.9753952026367,61.9753952026367,61.9753952026367,61.9753952026367,43.7289810180664,43.7289810180664,43.7289810180664,43.7289810180664,43.7289810180664,33.8424758911133,33.8424758911133,33.8424758911133,33.8424758911133,48.0764236450195,48.0764236450195,48.0764236450195,48.0764236450195,63.3150100708008,63.3150100708008,63.3150100708008,63.3150100708008,33.6847381591797,33.6847381591797,33.6847381591797,33.6847381591797,33.6847381591797,35.3496017456055,35.3496017456055,35.3496017456055,35.3496017456055,50.5882415771484,50.5882415771484,50.5882415771484,50.5882415771484,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,63.9849014282227,23.795036315918,23.795036315918,23.795036315918,23.795036315918,38.0289306640625,38.0289306640625,38.0289306640625,38.0289306640625,52.9327087402344,52.9327087402344,52.9327087402344,52.9327087402344,56.7842330932617,56.7842330932617,56.7842330932617,56.7842330932617,63.9849090576172,63.9849090576172,63.9849090576172,63.9849090576172,63.9849090576172,25.1347045898438,25.1347045898438,25.1347045898438,25.1347045898438,40.2058868408203,40.2058868408203,40.2058868408203,40.2058868408203,55.2770690917969,55.2770690917969,55.2770690917969,55.2770690917969,63.9849166870117,63.9849166870117,63.9849166870117,63.9849166870117,63.9849166870117,26.3069152832031,26.3069152832031,26.3069152832031,26.3069152832031,41.210693359375,41.210693359375,41.210693359375,41.210693359375,56.1143646240234,56.1143646240234,56.1143646240234,56.1143646240234,63.9849243164062,63.9849243164062,63.9849243164062,63.9849243164062,63.9849243164062,28.8188400268555,28.8188400268555,28.8188400268555,28.8188400268555,43.5550537109375,43.5550537109375,43.5550537109375,43.5550537109375,58.1238632202148,58.1238632202148,58.1238632202148,58.1238632202148,63.8175277709961,63.8175277709961,63.8175277709961,63.8175277709961,63.8175277709961,31.3306579589844,31.3306579589844,31.3306579589844,31.3306579589844,46.7368087768555,46.7368087768555,46.7368087768555,46.7368087768555,61.9753952026367,61.9753952026367,61.9753952026367,61.9753952026367,47.4119262695312,47.4119262695312,47.4119262695312,47.4119262695312,47.4119262695312,33.8425827026367,33.8425827026367,33.8425827026367,33.8425827026367,48.7463073730469,48.7463073730469,48.7463073730469,48.7463073730469,63.1476058959961,63.1476058959961,63.1476058959961,63.1476058959961,39.7113418579102,39.7113418579102,39.7113418579102,39.7113418579102,39.7113418579102,33.6751327514648,33.6751327514648,33.6751327514648,33.6751327514648,48.7463150024414,48.7463150024414,48.7463150024414,48.7463150024414,63.1476669311523,63.1476669311523,63.1476669311523,63.1476669311523,41.3853912353516,41.3853912353516,41.3853912353516,41.3853912353516,41.3853912353516,33.507682800293,33.507682800293,33.507682800293,33.507682800293,48.5788116455078,48.5788116455078,48.5788116455078,48.5788116455078,63.6500473022461,63.6500473022461,63.6500473022461,63.6500473022461,34.6892318725586,34.6892318725586,34.6892318725586,34.6892318725586,34.6892318725586,35.0148086547852,35.0148086547852,35.0148086547852,35.0148086547852,50.2534484863281,50.2534484863281,50.2534484863281,50.2534484863281,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,24.9673080444336,24.9673080444336,24.9673080444336,24.9673080444336,40.0384902954102,40.0384902954102,40.0384902954102,40.0384902954102,55.2771301269531,55.2771301269531,55.2771301269531,55.2771301269531,63.8175735473633,63.8175735473633,63.8175735473633,63.8175735473633,63.8175735473633,31.1632461547852,31.1632461547852,31.1632461547852,31.1632461547852,46.0669708251953,46.0669708251953,46.0669708251953,46.0669708251953,60.3008651733398,60.3008651733398,60.3008651733398,60.3008651733398,55.6147766113281,55.6147766113281,55.6147766113281,55.6147766113281,55.6147766113281,32.1680526733398,32.1680526733398,32.1680526733398,32.1680526733398,47.2391815185547,47.2391815185547,47.2391815185547,47.2391815185547,62.310417175293,62.310417175293,62.310417175293,62.310417175293,40.7158126831055,40.7158126831055,40.7158126831055,40.7158126831055,40.7158126831055,34.5124664306641,34.5124664306641,34.5124664306641,34.5124664306641,49.9185104370117,49.9185104370117,49.9185104370117,49.9185104370117,63.9850006103516,63.9850006103516,63.9850006103516,63.9850006103516,63.9850006103516,24.2975082397461,24.2975082397461,24.2975082397461,24.2975082397461,38.698860168457,38.698860168457,38.698860168457,38.698860168457,42.3829803466797,42.3829803466797,42.3829803466797,42.3829803466797,53.2677230834961,53.2677230834961,53.2677230834961,53.2677230834961,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,63.9850082397461,27.9816360473633,27.9816360473633,27.9816360473633,27.9816360473633,42.7178497314453,42.7178497314453,42.7178497314453,42.7178497314453,57.4541702270508,57.4541702270508,57.4541702270508,57.4541702270508,63.7646026611328,63.7646026611328,63.7646026611328,63.7646026611328,28.6752319335938,28.6752319335938,28.6752319335938,28.6752319335938,43.9138717651367,43.9138717651367,43.9138717651367,43.9138717651367,58.9850540161133,58.9850540161133,58.9850540161133,58.9850540161133,63.7650299072266,63.7650299072266,63.7650299072266,63.7650299072266,63.7650299072266,30.8392105102539,30.8392105102539,30.8392105102539,30.8392105102539,46.0779037475586,46.0779037475586,46.0779037475586,46.0779037475586,61.3164901733398,61.3164901733398,61.3164901733398,61.3164901733398,53.4494018554688,53.4494018554688,53.4494018554688,53.4494018554688,53.4494018554688,33.5185394287109,33.5185394287109,33.5185394287109,33.5185394287109,48.2548065185547,48.2548065185547,48.2548065185547,48.2548065185547,62.9911270141602,62.9911270141602,62.9911270141602,62.9911270141602,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,63.9958724975586,32.8540954589844,32.8540954589844,32.8540954589844,32.8540954589844,32.8540954589844,22.9640731811523,22.9640731811523,22.9640731811523,22.9640731811523,37.1979675292969,37.1979675292969,37.1979675292969,37.1979675292969,52.1016387939453,52.1016387939453,52.1016387939453,52.1016387939453,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,63.9911804199219,28.1552124023438,28.1552124023438,28.1552124023438,28.1552124023438,42.8914794921875,42.8914794921875,42.8914794921875,42.8914794921875,57.627799987793,57.627799987793,57.627799987793,57.627799987793,63.8237838745117,63.8237838745117,63.8237838745117,63.8237838745117,63.8237838745117,28.3226776123047,28.3226776123047,28.3226776123047,28.3226776123047,32.3416595458984,32.3416595458984,32.3416595458984,32.3416595458984,45.2358932495117,45.2358932495117,45.2358932495117,45.2358932495117,60.1396179199219,60.1396179199219,60.1396179199219,60.1396179199219,46.5811614990234,46.5811614990234,46.5811614990234,46.5811614990234,46.5811614990234,32.0068054199219,32.0068054199219,32.0068054199219,32.0068054199219,45.4034118652344,45.4034118652344,45.4034118652344,45.4034118652344,59.6373062133789,59.6373062133789,59.6373062133789,59.6373062133789,53.1099319458008,53.1099319458008,53.1099319458008,53.1099319458008,53.1099319458008,32.0067596435547,32.0067596435547,32.0067596435547,32.0067596435547,46.9104843139648,46.9104843139648,46.9104843139648,46.9104843139648,61.6467514038086,61.6467514038086,61.6467514038086,61.6467514038086,29.3385467529297,29.3385467529297,29.3385467529297,29.3385467529297,29.3385467529297,35.1884613037109,35.1884613037109,35.1884613037109,35.1884613037109,50.594612121582,50.594612121582,50.594612121582,50.594612121582,63.8238143920898,63.8238143920898,63.8238143920898,63.8238143920898,63.8238143920898,30.6671676635742,30.6671676635742,30.6671676635742,30.6671676635742,46.2406692504883,46.2406692504883,46.2406692504883,46.2406692504883,61.479362487793,61.479362487793,61.479362487793,61.479362487793,33.8584747314453,33.8584747314453,33.8584747314453,33.8584747314453,33.8584747314453,34.6861572265625,34.6861572265625,34.6861572265625,34.6861572265625,49.2549133300781,49.2549133300781,49.2549133300781,49.2549133300781,63.6563186645508,63.6563186645508,63.6563186645508,63.6563186645508,22.9641342163086,22.9641342163086,22.9641342163086,22.9641342163086,38.5376892089844,38.5376892089844,38.5376892089844,38.5376892089844,53.2739028930664,53.2739028930664,53.2739028930664,53.2739028930664,63.8238372802734,63.8238372802734,63.8238372802734,63.8238372802734,63.8238372802734,30.8345947265625,30.8345947265625,30.8345947265625,30.8345947265625,45.9058303833008,45.9058303833008,45.9058303833008,45.9058303833008,61.4793319702148,61.4793319702148,61.4793319702148,61.4793319702148,35.5325393676758,35.5325393676758,35.5325393676758,35.5325393676758,35.5325393676758,34.3512115478516,34.3512115478516,34.3512115478516,34.3512115478516,48.5851593017578,48.5851593017578,48.5851593017578,48.5851593017578,63.4888305664062,63.4888305664062,63.4888305664062,63.4888305664062,22.9641571044922,22.9641571044922,22.9641571044922,22.9641571044922,38.537712097168,38.537712097168,38.537712097168,38.537712097168,53.9437561035156,53.9437561035156,53.9437561035156,53.9437561035156,63.9912643432617,63.9912643432617,63.9912643432617,63.9912643432617,63.9912643432617,29.9973297119141,29.9973297119141,29.9973297119141,29.9973297119141,44.0637664794922,44.0637664794922,44.0637664794922,44.0637664794922,59.1350021362305,59.1350021362305,59.1350021362305,59.1350021362305,50.0967254638672,50.0967254638672,50.0967254638672,50.0967254638672,50.0967254638672,32.6767120361328,32.6767120361328,32.6767120361328,32.6767120361328,47.2455215454102,47.2455215454102,47.2455215454102,47.2455215454102,61.6468734741211,61.6468734741211,61.6468734741211,61.6468734741211,33.858528137207,33.858528137207,33.858528137207,33.858528137207,33.858528137207,34.8536148071289,34.8536148071289,34.8536148071289,34.8536148071289,49.9248504638672,49.9248504638672,49.9248504638672,49.9248504638672,63.9912872314453,63.9912872314453,63.9912872314453,63.9912872314453,63.9912872314453,27.8204040527344,27.8204040527344,27.8204040527344,27.8204040527344,31.8394393920898,31.8394393920898,31.8394393920898,31.8394393920898,42.5567245483398,42.5567245483398,42.5567245483398,42.5567245483398,58.1302261352539,58.1302261352539,58.1302261352539,58.1302261352539,60.8106155395508,60.8106155395508,60.8106155395508,60.8106155395508,60.8106155395508,29.6624450683594,29.6624450683594,29.6624450683594,29.6624450683594,44.0637969970703,44.0637969970703,44.0637969970703,44.0637969970703,57.9628295898438,57.9628295898438,57.9628295898438,57.9628295898438,63.8238983154297,63.8238983154297,63.8238983154297,63.8238983154297,63.8238983154297,29.8299102783203,29.8299102783203,29.8299102783203,29.8299102783203,44.3987731933594,44.3987731933594,44.3987731933594,44.3987731933594,58.6326141357422,58.6326141357422,58.6326141357422,58.6326141357422,59.3039932250977,59.3039932250977,59.3039932250977,59.3039932250977,59.3039932250977,30.8346633911133,30.8346633911133,30.8346633911133,30.8346633911133,45.9058990478516,45.9058990478516,45.9058990478516,45.9058990478516,61.4794006347656,61.4794006347656,61.4794006347656,61.4794006347656,31.5149078369141,31.5149078369141,31.5149078369141,31.5149078369141,31.5149078369141,35.0211639404297,35.0211639404297,35.0211639404297,35.0211639404297,49.4225158691406,49.4225158691406,49.4225158691406,49.4225158691406,63.991325378418,63.991325378418,63.991325378418,63.991325378418,63.991325378418,28.1553573608398,28.1553573608398,28.1553573608398,28.1553573608398,43.05908203125,43.05908203125,43.05908203125,43.05908203125,57.7954025268555,57.7954025268555,57.7954025268555,57.7954025268555,59.3040161132812,59.3040161132812,59.3040161132812,59.3040161132812,59.3040161132812,31.1694946289062,31.1694946289062,31.1694946289062,31.1694946289062,46.4080810546875,46.4080810546875,46.4080810546875,46.4080810546875,61.3118057250977,61.3118057250977,61.3118057250977,61.3118057250977,33.0214080810547,33.0214080810547,33.0214080810547,33.0214080810547,33.0214080810547,34.6861114501953,34.6861114501953,34.6861114501953,34.6861114501953,49.9247512817383,49.9247512817383,49.9247512817383,49.9247512817383,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,63.9911880493164,25.3084945678711,25.3084945678711,25.3084945678711,25.3084945678711,39.3748779296875,39.3748779296875,39.3748779296875,39.3748779296875,54.111198425293,54.111198425293,54.111198425293,54.111198425293,61.4792785644531,61.4792785644531,61.4792785644531,61.4792785644531,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,63.9911956787109,26.4806518554688,26.4806518554688,26.4806518554688,26.4806518554688,41.3844299316406,41.3844299316406,41.3844299316406,41.3844299316406,55.4508666992188,55.4508666992188,55.4508666992188,55.4508666992188,63.8237991333008,63.8237991333008,63.8237991333008,63.8237991333008,63.8237991333008,29.3274917602539,29.3274917602539,29.3274917602539,29.3274917602539,44.5661315917969,44.5661315917969,44.5661315917969,44.5661315917969,59.3023986816406,59.3023986816406,59.3023986816406,59.3023986816406,55.1187896728516,55.1187896728516,55.1187896728516,55.1187896728516,55.1187896728516,32.3417358398438,32.3417358398438,32.3417358398438,32.3417358398438,47.4129180908203,47.4129180908203,47.4129180908203,47.4129180908203,62.3165893554688,62.3165893554688,62.3165893554688,62.3165893554688,27.9993209838867,27.9993209838867,27.9993209838867,27.9993209838867,27.9993209838867,35.6908416748047,35.6908416748047,35.6908416748047,35.6908416748047,50.9295349121094,50.9295349121094,50.9295349121094,50.9295349121094,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,63.9912261962891,28.1552581787109,28.1552581787109,28.1552581787109,28.1552581787109,43.3939514160156,43.3939514160156,43.3939514160156,43.3939514160156,58.6325912475586,58.6325912475586,58.6325912475586,58.6325912475586,56.792854309082,56.792854309082,56.792854309082,56.792854309082,56.792854309082,29.1600112915039,29.1600112915039,29.1600112915039,29.1600112915039,39.7098388671875,39.7098388671875,39.7098388671875,39.7098388671875,54.446159362793,54.446159362793,54.446159362793,54.446159362793,63.8238372802734,63.8238372802734,63.8238372802734,63.8238372802734,63.8238372802734,29.3274765014648,29.3274765014648,29.3274765014648,29.3274765014648,44.5661163330078,44.5661163330078,44.5661163330078,44.5661163330078,59.9722137451172,59.9722137451172,59.9722137451172,59.9722137451172,46.0790023803711,46.0790023803711,46.0790023803711,46.0790023803711,46.0790023803711,33.1790618896484,33.1790618896484,33.1790618896484,33.1790618896484,48.4177017211914,48.4177017211914,48.4177017211914,48.4177017211914,63.6563415527344,63.6563415527344,63.6563415527344,63.6563415527344,22.9641571044922,22.9641571044922,22.9641571044922,22.9641571044922,38.2027435302734,38.2027435302734,38.2027435302734,38.2027435302734,53.6088943481445,53.6088943481445,53.6088943481445,53.6088943481445,63.823860168457,63.823860168457,63.823860168457,63.823860168457,63.823860168457,30.499755859375,30.499755859375,30.499755859375,30.499755859375,46.0733108520508,46.0733108520508,46.0733108520508,46.0733108520508,61.311897277832,61.311897277832,61.311897277832,61.311897277832,36.0347747802734,36.0347747802734,36.0347747802734,36.0347747802734,36.0347747802734,34.5186920166016,34.5186920166016,34.5186920166016,34.5186920166016,49.5898742675781,49.5898742675781,49.5898742675781,49.5898742675781,63.8238754272461,63.8238754272461,63.8238754272461,63.8238754272461,63.8238754272461,30.6672286987305,30.6672286987305,30.6672286987305,30.6672286987305,45.5943145751953,45.5943145751953,45.5943145751953,45.5943145751953,60.8329544067383,60.8329544067383,60.8329544067383,60.8329544067383,36.8188247680664,36.8188247680664,36.8188247680664,36.8188247680664,36.8188247680664,34.2982788085938,34.2982788085938,34.2982788085938,34.2982788085938,49.2020568847656,49.2020568847656,49.2020568847656,49.2020568847656,57.5749359130859,57.5749359130859,57.5749359130859,57.5749359130859,63.2684936523438,63.2684936523438,63.2684936523438,63.2684936523438,23.0786819458008,23.0786819458008,23.0786819458008,23.0786819458008,38.4847259521484,38.4847259521484,38.4847259521484,38.4847259521484,53.2210464477539,53.2210464477539,53.2210464477539,53.2210464477539,63.7709274291992,63.7709274291992,63.7709274291992,63.7709274291992,63.7709274291992,30.2793121337891,30.2793121337891,30.2793121337891,30.2793121337891,45.0156326293945,45.0156326293945,45.0156326293945,45.0156326293945,59.5844421386719,59.5844421386719,59.5844421386719,59.5844421386719,51.0482177734375,51.0482177734375,51.0482177734375,51.0482177734375,51.0482177734375,32.7911834716797,32.7911834716797,32.7911834716797,32.7911834716797,47.5275039672852,47.5275039672852,47.5275039672852,47.5275039672852,61.9288558959961,61.9288558959961,61.9288558959961,61.9288558959961,34.8100204467773,34.8100204467773,34.8100204467773,34.8100204467773,34.8100204467773,33.9633941650391,33.9633941650391,33.9633941650391,33.9633941650391,49.202033996582,49.202033996582,49.202033996582,49.202033996582,61.7613525390625,61.7613525390625,61.7613525390625,61.7613525390625,45.6912994384766,45.6912994384766,45.6912994384766,45.6912994384766,45.6912994384766,31.2840805053711,31.2840805053711,31.2840805053711,31.2840805053711,43.8434524536133,43.8434524536133,43.8434524536133,43.8434524536133,57.0725479125977,57.0725479125977,57.0725479125977,57.0725479125977,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,63.7709579467773,27.5998611450195,27.5998611450195,27.5998611450195,27.5998611450195,42.8385009765625,42.8385009765625,42.8385009765625,42.8385009765625,57.7422256469727,57.7422256469727,57.7422256469727,57.7422256469727,59.2508926391602,59.2508926391602,59.2508926391602,59.2508926391602,59.2508926391602,30.6141052246094,30.6141052246094,30.6141052246094,30.6141052246094,45.1829681396484,45.1829681396484,45.1829681396484,45.1829681396484,60.7565231323242,60.7565231323242,60.7565231323242,60.7565231323242,37.1535491943359,37.1535491943359,37.1535491943359,37.1535491943359,37.1535491943359,33.963264465332,33.963264465332,33.963264465332,33.963264465332,49.3693618774414,49.3693618774414,49.3693618774414,49.3693618774414,62.9334259033203,62.9334259033203,62.9334259033203,62.9334259033203,22.5893936157227,22.5893936157227,22.5893936157227,22.5893936157227,22.5893936157227,25.4229888916016,25.4229888916016,25.4229888916016,25.4229888916016,35.3029327392578,35.3029327392578,35.3029327392578,35.3029327392578,50.0391998291016,50.0391998291016,50.0391998291016,50.0391998291016,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,25.0880279541016,25.0880279541016,25.0880279541016,25.0880279541016,38.3172302246094,38.3172302246094,38.3172302246094,38.3172302246094,52.5510711669922,52.5510711669922,52.5510711669922,52.5510711669922,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,30.1117630004883,30.1117630004883,30.1117630004883,30.1117630004883,44.8480834960938,44.8480834960938,44.8480834960938,44.8480834960938,59.4168395996094,59.4168395996094,59.4168395996094,59.4168395996094,54.2288055419922,54.2288055419922,54.2288055419922,54.2288055419922,54.2288055419922,32.1213150024414,32.1213150024414,32.1213150024414,32.1213150024414,47.1924438476562,47.1924438476562,47.1924438476562,47.1924438476562,61.5938491821289,61.5938491821289,61.5938491821289,61.5938491821289,28.1137619018555,28.1137619018555,28.1137619018555,28.1137619018555,28.1137619018555,35.4704742431641,35.4704742431641,35.4704742431641,35.4704742431641,50.0392303466797,50.0392303466797,50.0392303466797,50.0392303466797,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,63.7708587646484,30.1118392944336,30.1118392944336,30.1118392944336,30.1118392944336,43.6759033203125,43.6759033203125,43.6759033203125,43.6759033203125,58.9145431518555,58.9145431518555,58.9145431518555,58.9145431518555,52.0525741577148,52.0525741577148,52.0525741577148,52.0525741577148,52.0525741577148,32.4562530517578,32.4562530517578,32.4562530517578,32.4562530517578,47.6948394775391,47.6948394775391,47.6948394775391,47.6948394775391,62.5985641479492,62.5985641479492,62.5985641479492,62.5985641479492,25.7701263427734,25.7701263427734,25.7701263427734,25.7701263427734,25.7701263427734,36.1402740478516,36.1402740478516,36.1402740478516,36.1402740478516,50.2067108154297,50.2067108154297,50.2067108154297,50.2067108154297,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,63.9382858276367,25.4229965209961,25.4229965209961,25.4229965209961,25.4229965209961,40.8290939331055,40.8290939331055,40.8290939331055,40.8290939331055,55.5654144287109,55.5654144287109,55.5654144287109,55.5654144287109,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,63.7708892822266,30.7816467285156,30.7816467285156,30.7816467285156,30.7816467285156,46.1877975463867,46.1877975463867,46.1877975463867,46.1877975463867,61.5938415527344,61.5938415527344,61.5938415527344,61.5938415527344,30.7922744750977,30.7922744750977,30.7922744750977,30.7922744750977,30.7922744750977,34.2982635498047,34.2982635498047,34.2982635498047,34.2982635498047,49.3694458007812,49.3694458007812,49.3694458007812,49.3694458007812,63.4358825683594,63.4358825683594,63.4358825683594,63.4358825683594,23.0786666870117,23.0786666870117,23.0786666870117,23.0786666870117,38.6521682739258,38.6521682739258,38.6521682739258,38.6521682739258,53.8908615112305,53.8908615112305,53.8908615112305,53.8908615112305,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,63.7709121704102,30.6142654418945,30.6142654418945,30.6142654418945,30.6142654418945,46.0203628540039,46.0203628540039,46.0203628540039,46.0203628540039,60.086799621582,60.086799621582,60.086799621582,60.086799621582,46.1934814453125,46.1934814453125,46.1934814453125,46.1934814453125,46.1934814453125,23.7485122680664,23.7485122680664,23.7485122680664,23.7485122680664,32.1213912963867,32.1213912963867,32.1213912963867,32.1213912963867,47.3600311279297,47.3600311279297,47.3600311279297,47.3600311279297,61.7613830566406,61.7613830566406,61.7613830566406,61.7613830566406,34.3077926635742,34.3077926635742,34.3077926635742,34.3077926635742,34.3077926635742,33.4610595703125,33.4610595703125,33.4610595703125,33.4610595703125,47.694953918457,47.694953918457,47.694953918457,47.694953918457,62.2637634277344,62.2637634277344,62.2637634277344,62.2637634277344,25.9375915527344,25.9375915527344,25.9375915527344,25.9375915527344,25.9375915527344,35.1355895996094,35.1355895996094,35.1355895996094,35.1355895996094,49.536994934082,49.536994934082,49.536994934082,49.536994934082,63.938346862793,63.938346862793,63.938346862793,63.938346862793,63.938346862793,29.9444122314453,29.9444122314453,29.9444122314453,29.9444122314453,45.0155944824219,45.0155944824219,45.0155944824219,45.0155944824219,59.4169464111328,59.4169464111328,59.4169464111328,59.4169464111328,47.0305328369141,47.0305328369141,47.0305328369141,47.0305328369141,47.0305328369141,32.9586563110352,32.9586563110352,32.9586563110352,32.9586563110352,47.5274658203125,47.5274658203125,47.5274658203125,47.5274658203125,62.2637329101562,62.2637329101562,62.2637329101562,62.2637329101562,30.7923355102539,30.7923355102539,30.7923355102539,30.7923355102539,30.7923355102539,35.3029098510742,35.3029098510742,35.3029098510742,35.3029098510742,50.2066345214844,50.2066345214844,50.2066345214844,50.2066345214844,63.9382095336914,63.9382095336914,63.9382095336914,63.9382095336914,63.9382095336914,24.5856857299805,24.5856857299805,24.5856857299805,24.5856857299805,39.4894104003906,39.4894104003906,39.4894104003906,39.4894104003906,54.3931350708008,54.3931350708008,54.3931350708008,54.3931350708008,63.7708129882812,63.7708129882812,63.7708129882812,63.7708129882812,63.7708129882812,30.7815704345703,30.7815704345703,30.7815704345703,30.7815704345703,45.3504333496094,45.3504333496094,45.3504333496094,45.3504333496094,60.4216156005859,60.4216156005859,60.4216156005859,60.4216156005859,38.1579818725586,38.1579818725586,38.1579818725586,38.1579818725586,38.1579818725586,34.4656448364258,34.4656448364258,34.4656448364258,34.4656448364258,49.5368270874023,49.5368270874023,49.5368270874023,49.5368270874023,55.565299987793,55.565299987793,55.565299987793,55.565299987793,63.938232421875,63.938232421875,63.938232421875,63.938232421875,63.938232421875,23.0785903930664,23.0785903930664,23.0785903930664,23.0785903930664,37.9823150634766,37.9823150634766,37.9823150634766,37.9823150634766,52.2162094116211,52.2162094116211,52.2162094116211,52.2162094116211,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,63.7708358764648,29.9443588256836,29.9443588256836,29.9443588256836,29.9443588256836,44.848030090332,44.848030090332,44.848030090332,44.848030090332,59.4168930053711,59.4168930053711,59.4168930053711,59.4168930053711,55.0658264160156,55.0658264160156,55.0658264160156,55.0658264160156,55.0658264160156,31.953857421875,31.953857421875,31.953857421875,31.953857421875,47.5273590087891,47.5273590087891,47.5273590087891,47.5273590087891,61.2588806152344,61.2588806152344,61.2588806152344,61.2588806152344,34.4751205444336,34.4751205444336,34.4751205444336,34.4751205444336,34.4751205444336,35.1355056762695,35.1355056762695,35.1355056762695,35.1355056762695,50.3741989135742,50.3741989135742,50.3741989135742,50.3741989135742,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,63.9382629394531,24.0833129882812,24.0833129882812,24.0833129882812,24.0833129882812,39.4894104003906,39.4894104003906,39.4894104003906,39.4894104003906,54.5606460571289,54.5606460571289,54.5606460571289,54.5606460571289,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,63.9382705688477,28.9396438598633,28.9396438598633,28.9396438598633,28.9396438598633,43.5083999633789,43.5083999633789,43.5083999633789,43.5083999633789,58.5795822143555,58.5795822143555,58.5795822143555,58.5795822143555,58.5813446044922,58.5813446044922,58.5813446044922,58.5813446044922,58.5813446044922,31.1166000366211,31.1166000366211,31.1166000366211,31.1166000366211,46.0203247070312,46.0203247070312,46.0203247070312,46.0203247070312,60.5533218383789,60.5533218383789,60.5533218383789,60.5533218383789,63.7351226806641,63.7351226806641,63.7351226806641,63.7351226806641,63.7351226806641,30.3789138793945,30.3789138793945,30.3789138793945,30.3789138793945,40.9287948608398,40.9287948608398,40.9287948608398,40.9287948608398,45.7850112915039,45.7850112915039,45.7850112915039,45.7850112915039,52.9857406616211,52.9857406616211,52.9857406616211,52.9857406616211,63.8704833984375,63.8704833984375,63.8704833984375,63.8704833984375,63.8704833984375,27.6996002197266,27.6996002197266,27.6996002197266,27.6996002197266,42.4358673095703,42.4358673095703,42.4358673095703,42.4358673095703,56.5023574829102,56.5023574829102,56.5023574829102,56.5023574829102,63.870491027832,63.870491027832,63.870491027832,63.870491027832,63.870491027832,28.8718643188477,28.8718643188477,28.8718643188477,28.8718643188477,43.1057586669922,43.1057586669922,43.1057586669922,43.1057586669922,58.5118026733398,58.5118026733398,58.5118026733398,58.5118026733398,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,30.8813095092773,30.8813095092773,30.8813095092773,30.8813095092773,45.9524917602539,45.9524917602539,45.9524917602539,45.9524917602539,61.358642578125,61.358642578125,61.358642578125,61.358642578125,48.1345138549805,48.1345138549805,48.1345138549805,48.1345138549805,48.1345138549805,32.7234039306641,32.7234039306641,32.7234039306641,32.7234039306641,48.2969589233398,48.2969589233398,48.2969589233398,48.2969589233398,63.7030029296875,63.7030029296875,63.7030029296875,63.7030029296875,29.8874664306641,29.8874664306641,29.8874664306641,29.8874664306641,29.8874664306641,26.0250549316406,26.0250549316406,26.0250549316406,26.0250549316406,35.402717590332,35.402717590332,35.402717590332,35.402717590332,49.3016586303711,49.3016586303711,49.3016586303711,49.3016586303711,63.8704681396484,63.8704681396484,63.8704681396484,63.8704681396484,30.222282409668,30.222282409668,30.222282409668,30.222282409668,30.222282409668,35.0677719116211,35.0677719116211,35.0677719116211,35.0677719116211,49.6366348266602,49.6366348266602,49.6366348266602,49.6366348266602,63.8705291748047,63.8705291748047,63.8705291748047,63.8705291748047,63.8705291748047,24.6854095458984,24.6854095458984,24.6854095458984,24.6854095458984,39.9240493774414,39.9240493774414,39.9240493774414,39.9240493774414,55.1627426147461,55.1627426147461,55.1627426147461,55.1627426147461,63.8705368041992,63.8705368041992,63.8705368041992,63.8705368041992,63.8705368041992,27.3647918701172,27.3647918701172,27.3647918701172,27.3647918701172,42.435920715332,42.435920715332,42.435920715332,42.435920715332,57.6746139526367,57.6746139526367,57.6746139526367,57.6746139526367,63.7031402587891,63.7031402587891,63.7031402587891,63.7031402587891,63.7031402587891,31.0488128662109,31.0488128662109,31.0488128662109,31.0488128662109,45.61767578125,45.61767578125,45.61767578125,45.61767578125,61.1912307739258,61.1912307739258,61.1912307739258,61.1912307739258,48.8041763305664,48.8041763305664,48.8041763305664,48.8041763305664,48.8041763305664,30.5462875366211,30.5462875366211,30.5462875366211,30.5462875366211,45.7849807739258,45.7849807739258,45.7849807739258,45.7849807739258,60.6887054443359,60.6887054443359,60.6887054443359,60.6887054443359,53.9935531616211,53.9935531616211,53.9935531616211,53.9935531616211,53.9935531616211,32.5558395385742,32.5558395385742,32.5558395385742,32.5558395385742,48.12939453125,48.12939453125,48.12939453125,48.12939453125,63.2005233764648,63.2005233764648,63.2005233764648,63.2005233764648,38.257568359375,38.257568359375,38.257568359375,38.257568359375,38.257568359375,34.0629653930664,34.0629653930664,34.0629653930664,34.0629653930664,49.134147644043,49.134147644043,49.134147644043,49.134147644043,63.7029037475586,63.7029037475586,63.7029037475586,63.7029037475586,29.8873672485352,29.8873672485352,29.8873672485352,29.8873672485352,29.8873672485352,35.7374954223633,35.7374954223633,35.7374954223633,35.7374954223633,49.4690704345703,49.4690704345703,49.4690704345703,49.4690704345703,52.9856796264648,52.9856796264648,52.9856796264648,52.9856796264648,63.8704223632812,63.8704223632812,63.8704223632812,63.8704223632812,63.8704223632812,23.5130996704102,23.5130996704102,23.5130996704102,23.5130996704102,38.2494201660156,38.2494201660156,38.2494201660156,38.2494201660156,53.4880065917969,53.4880065917969,53.4880065917969,53.4880065917969,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,63.8704299926758,30.0439529418945,30.0439529418945,30.0439529418945,30.0439529418945,44.9477310180664,44.9477310180664,44.9477310180664,44.9477310180664,60.018913269043,60.018913269043,60.018913269043,60.018913269043,56.6720581054688,56.6720581054688,56.6720581054688,56.6720581054688,56.6720581054688,32.5558242797852,32.5558242797852,32.5558242797852,32.5558242797852,47.2921447753906,47.2921447753906,47.2921447753906,47.2921447753906,62.1958694458008,62.1958694458008,62.1958694458008,62.1958694458008,38.7598190307617,38.7598190307617,38.7598190307617,38.7598190307617,38.7598190307617,34.9002380371094,34.9002380371094,34.9002380371094,34.9002380371094,49.9714202880859,49.9714202880859,49.9714202880859,49.9714202880859,63.8704528808594,63.8704528808594,63.8704528808594,63.8704528808594,63.8704528808594,24.5179290771484,24.5179290771484,24.5179290771484,24.5179290771484,40.0914840698242,40.0914840698242,40.0914840698242,40.0914840698242,55.4975814819336,55.4975814819336,55.4975814819336,55.4975814819336,63.7030563354492,63.7030563354492,63.7030563354492,63.7030563354492,63.7030563354492,30.8813247680664,30.8813247680664,30.8813247680664,30.8813247680664,45.2826232910156,45.2826232910156,45.2826232910156,45.2826232910156,59.6840286254883,59.6840286254883,59.6840286254883,59.6840286254883,59.6853637695312,59.6853637695312,59.6853637695312,59.6853637695312,59.6853637695312,31.216194152832,31.216194152832,31.216194152832,31.216194152832,46.6222915649414,46.6222915649414,46.6222915649414,46.6222915649414,61.1911544799805,61.1911544799805,61.1911544799805,61.1911544799805,49.9759292602539,49.9759292602539,49.9759292602539,49.9759292602539,49.9759292602539,33.2257461547852,33.2257461547852,33.2257461547852,33.2257461547852,46.9572677612305,46.9572677612305,46.9572677612305,46.9572677612305,62.0283966064453,62.0283966064453,62.0283966064453,62.0283966064453,60.0201873779297,60.0201873779297,60.0201873779297,60.0201873779297,60.0201873779297,26.0250778198242,26.0250778198242,26.0250778198242,26.0250778198242,37.9145126342773,37.9145126342773,37.9145126342773,37.9145126342773,47.4595947265625,47.4595947265625,47.4595947265625,47.4595947265625,58.5117950439453,58.5117950439453,58.5117950439453,58.5117950439453,63.7030868530273,63.7030868530273,63.7030868530273,63.7030868530273,63.7030868530273,29.5416946411133,29.5416946411133,29.5416946411133,29.5416946411133,43.4406204223633,43.4406204223633,43.4406204223633,43.4406204223633,58.1769409179688,58.1769409179688,58.1769409179688,58.1769409179688,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,63.7030944824219,30.7138519287109,30.7138519287109,30.7138519287109,30.7138519287109,45.7850875854492,45.7850875854492,45.7850875854492,45.7850875854492,61.3585891723633,61.3585891723633,61.3585891723633,61.3585891723633,55.332893371582,55.332893371582,55.332893371582,55.332893371582,55.332893371582,32.3884353637695,32.3884353637695,32.3884353637695,32.3884353637695,47.6270751953125,47.6270751953125,47.6270751953125,47.6270751953125,63.0331726074219,63.0331726074219,63.0331726074219,63.0331726074219,56.8395385742188,56.8395385742188,56.8395385742188,56.8395385742188,56.8395385742188,26.3719787597656,26.3719787597656,26.3719787597656,26.3719787597656,26.3719787597656,31.8860702514648,31.8860702514648,31.8860702514648,31.8860702514648,45.7850494384766,45.7850494384766,45.7850494384766,45.7850494384766,60.3538589477539,60.3538589477539,60.3538589477539,60.3538589477539,59.0158004760742,59.0158004760742,59.0158004760742,59.0158004760742,59.0158004760742,31.3837051391602,31.3837051391602,31.3837051391602,31.3837051391602,46.7898559570312,46.7898559570312,46.7898559570312,46.7898559570312,61.8609848022461,61.8609848022461,61.8609848022461,61.8609848022461,45.7908782958984,45.7908782958984,45.7908782958984,45.7908782958984,45.7908782958984,32.5559692382812,32.5559692382812,32.5559692382812,32.5559692382812,47.7946090698242,47.7946090698242,47.7946090698242,47.7946090698242,63.5356216430664,63.5356216430664,63.5356216430664,63.5356216430664,36.7510604858398,36.7510604858398,36.7510604858398,36.7510604858398,36.7510604858398,34.7328720092773,34.7328720092773,34.7328720092773,34.7328720092773,49.3017349243164,49.3017349243164,49.3017349243164,49.3017349243164,63.8705444335938,63.8705444335938,63.8705444335938,63.8705444335938,63.8705444335938,26.527458190918,26.527458190918,26.527458190918,26.527458190918,40.7614059448242,40.7614059448242,40.7614059448242,40.7614059448242,55.6650772094727,55.6650772094727,55.6650772094727,55.6650772094727,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,63.8705520629883,27.8669662475586,27.8669662475586,27.8669662475586,27.8669662475586,42.7706909179688,42.7706909179688,42.7706909179688,42.7706909179688,57.3395004272461,57.3395004272461,57.3395004272461,57.3395004272461,63.702995300293,63.702995300293,63.702995300293,63.702995300293,63.702995300293,31.0487213134766,31.0487213134766,31.0487213134766,31.0487213134766,46.4547653198242,46.4547653198242,46.4547653198242,46.4547653198242,61.6934051513672,61.6934051513672,61.6934051513672,61.6934051513672,46.4603729248047,46.4603729248047,46.4603729248047,46.4603729248047,46.4603729248047,33.8954544067383,33.8954544067383,33.8954544067383,33.8954544067383,49.3015518188477,49.3015518188477,49.3015518188477,49.3015518188477,63.7029571533203,63.7029571533203,63.7029571533203,63.7029571533203,30.8917922973633,30.8917922973633,30.8917922973633,30.8917922973633,30.8917922973633,34.2303771972656,34.2303771972656,34.2303771972656,34.2303771972656,41.7660217285156,41.7660217285156,41.7660217285156,41.7660217285156,50.8086776733398,50.8086776733398,50.8086776733398,50.8086776733398,63.7030181884766,63.7030181884766,63.7030181884766,63.7030181884766,63.7030181884766,30.2114562988281,30.2114562988281,30.2114562988281,30.2114562988281,45.282585144043,45.282585144043,45.282585144043,45.282585144043,58.8467025756836,58.8467025756836,58.8467025756836,58.8467025756836,63.7030258178711,63.7030258178711,63.7030258178711,63.7030258178711,63.7030258178711,29.8765487670898,29.8765487670898,29.8765487670898,29.8765487670898,45.4500503540039,45.4500503540039,45.4500503540039,45.4500503540039,60.5212326049805,60.5212326049805,60.5212326049805,60.5212326049805,58.680908203125,58.680908203125,58.680908203125,58.680908203125,58.680908203125,31.5510787963867,31.5510787963867,31.5510787963867,31.5510787963867,46.6222610473633,46.6222610473633,46.6222610473633,46.6222610473633,62.0284118652344,62.0284118652344,62.0284118652344,62.0284118652344,42.1079025268555,42.1079025268555,42.1079025268555,42.1079025268555,42.1079025268555,34.0630035400391,34.0630035400391,34.0630035400391,34.0630035400391,48.9518890380859,48.9518890380859,48.9518890380859,48.9518890380859,63.7263565063477,63.7263565063477,63.7263565063477,63.7263565063477,28.3278350830078,28.3278350830078,28.3278350830078,28.3278350830078,28.3278350830078,36.1869354248047,36.1869354248047,36.1869354248047,36.1869354248047,50.2533721923828,50.2533721923828,50.2533721923828,50.2533721923828,63.9849472045898,63.9849472045898,63.9849472045898,63.9849472045898,63.9849472045898,23.4602203369141,23.4602203369141,23.4602203369141,23.4602203369141,38.5313491821289,38.5313491821289,38.5313491821289,38.5313491821289,52.7652435302734,52.7652435302734,52.7652435302734,52.7652435302734,63.9849548339844,63.9849548339844,63.9849548339844,63.9849548339844,63.9849548339844,30.8283081054688,30.8283081054688,30.8283081054688,30.8283081054688,44.5598297119141,44.5598297119141,44.5598297119141,44.5598297119141,56.4493179321289,56.4493179321289,56.4493179321289,56.4493179321289,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,63.9849624633789,23.4731521606445,23.4731521606445,23.4731521606445,23.4731521606445,23.4731521606445,35.5171279907227,35.5171279907227,35.5171279907227,35.5171279907227,50.5883102416992,50.5883102416992,50.5883102416992,50.5883102416992,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,63.9849700927734,27.311767578125,27.311767578125,27.311767578125,27.311767578125,38.1965103149414,38.1965103149414,38.1965103149414,38.1965103149414,53.1001815795898,53.1001815795898,53.1001815795898,53.1001815795898,63.984977722168,63.984977722168,63.984977722168,63.984977722168,63.984977722168,27.8141479492188,27.8141479492188,27.8141479492188,27.8141479492188,42.8852767944336,42.8852767944336,42.8852767944336,42.8852767944336,57.2866821289062,57.2866821289062,57.2866821289062,57.2866821289062,63.8175811767578,63.8175811767578,63.8175811767578,63.8175811767578,63.8175811767578,31.3307113647461,31.3307113647461,31.3307113647461,31.3307113647461,46.234489440918,46.234489440918,46.234489440918,46.234489440918,61.3056716918945,61.3056716918945,61.3056716918945,61.3056716918945,55.2799758911133,55.2799758911133,55.2799758911133,55.2799758911133,55.2799758911133,32.0005493164062,32.0005493164062,32.0005493164062,32.0005493164062,45.5646667480469,45.5646667480469,45.5646667480469,45.5646667480469,51.5930862426758,51.5930862426758,51.5930862426758,51.5930862426758,59.6310501098633,59.6310501098633,59.6310501098633,59.6310501098633,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,63.8175964355469,30.1585235595703,30.1585235595703,30.1585235595703,30.1585235595703,44.7273330688477,44.7273330688477,44.7273330688477,44.7273330688477,59.6310577392578,59.6310577392578,59.6310577392578,59.6310577392578,63.8176040649414,63.8176040649414,63.8176040649414,63.8176040649414,63.8176040649414,31.3307876586914,31.3307876586914,31.3307876586914,31.3307876586914,46.4019165039062,46.4019165039062,46.4019165039062,46.4019165039062,60.8033218383789,60.8033218383789,60.8033218383789,60.8033218383789,63.9850158691406,63.9850158691406,63.9850158691406,63.9850158691406,63.9850158691406,26.6419296264648,26.6419296264648,26.6419296264648,26.6419296264648,38.6988754272461,38.6988754272461,38.6988754272461,38.6988754272461,52.9328231811523,52.9328231811523,52.9328231811523,52.9328231811523,63.8176193237305,63.8176193237305,63.8176193237305,63.8176193237305,63.8176193237305,30.9958877563477,30.9958877563477,30.9958877563477,30.9958877563477,45.564697265625,45.564697265625,45.564697265625,45.564697265625,59.6310806274414,59.6310806274414,59.6310806274414,59.6310806274414,59.6325225830078,59.6325225830078,59.6325225830078,59.6325225830078,59.6325225830078,31.8331832885742,31.8331832885742,31.8331832885742,31.8331832885742,47.0717697143555,47.0717697143555,47.0717697143555,47.0717697143555,62.4779205322266,62.4779205322266,62.4779205322266,62.4779205322266,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,63.9850387573242,58.839958190918,58.839958190918,58.839958190918,58.839958190918,58.839958190918,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,20.3228988647461,32.2123336791992,32.2123336791992,32.2123336791992,32.2123336791992,47.1160583496094,47.1160583496094,47.1160583496094,47.1160583496094,61.6848678588867,61.6848678588867,61.6848678588867,61.6848678588867,26.5307388305664,26.5307388305664,26.5307388305664,26.5307388305664,26.5307388305664,33.0496826171875,33.0496826171875,33.0496826171875,33.0496826171875,36.5662384033203,36.5662384033203,36.5662384033203,36.5662384033203,48.1208114624023,48.1208114624023,48.1208114624023,48.1208114624023,62.522216796875,62.522216796875,62.522216796875,62.522216796875,22.8478546142578,22.8478546142578,22.8478546142578,22.8478546142578,22.8478546142578,36.0638732910156,36.0638732910156,36.0638732910156,36.0638732910156,50.1303634643555,50.1303634643555,50.1303634643555,50.1303634643555,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,63.6944808959961,30.5377807617188,30.5377807617188,30.5377807617188,30.5377807617188,45.4415588378906,45.4415588378906,45.4415588378906,45.4415588378906,60.3452835083008,60.3452835083008,60.3452835083008,60.3452835083008,46.2844543457031,46.2844543457031,46.2844543457031,46.2844543457031,46.2844543457031,33.0496520996094,33.0496520996094,33.0496520996094,33.0496520996094,47.7859191894531,47.7859191894531,47.7859191894531,47.7859191894531,61.852409362793,61.852409362793,61.852409362793,61.852409362793,30.3810653686523,30.3810653686523,30.3810653686523,30.3810653686523,30.3810653686523,35.0592041015625,35.0592041015625,35.0592041015625,35.0592041015625,49.9629287719727,49.9629287719727,49.9629287719727,49.9629287719727,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,63.8619079589844,28.025993347168,28.025993347168,28.025993347168,28.025993347168,43.4320373535156,43.4320373535156,43.4320373535156,43.4320373535156,57.8333892822266,57.8333892822266,57.8333892822266,57.8333892822266,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,63.6945114135742,30.8727264404297,30.8727264404297,30.8727264404297,30.8727264404297,45.6089935302734,45.6089935302734,45.6089935302734,45.6089935302734,60.0103988647461,60.0103988647461,60.0103988647461,60.0103988647461,47.6237182617188,47.6237182617188,47.6237182617188,47.6237182617188,47.6237182617188,32.3798522949219,32.3798522949219,32.3798522949219,32.3798522949219,47.786003112793,47.786003112793,47.786003112793,47.786003112793,62.6897277832031,62.6897277832031,62.6897277832031,62.6897277832031,22.5130996704102,22.5130996704102,22.5130996704102,22.5130996704102,22.5130996704102,35.8964691162109,35.8964691162109,35.8964691162109,35.8964691162109,51.1351089477539,51.1351089477539,51.1351089477539,51.1351089477539,63.8619384765625,63.8619384765625,63.8619384765625,63.8619384765625,63.8619384765625,27.1886825561523,27.1886825561523,27.1886825561523,27.1886825561523,42.2599182128906,42.2599182128906,42.2599182128906,42.2599182128906,57.4985580444336,57.4985580444336,57.4985580444336,57.4985580444336,59.1746292114258,59.1746292114258,59.1746292114258,59.1746292114258,59.1746292114258,31.2076721191406,31.2076721191406,31.2076721191406,31.2076721191406,46.7812271118164,46.7812271118164,46.7812271118164,46.7812271118164,62.0198669433594,62.0198669433594,62.0198669433594,62.0198669433594,31.0507354736328,31.0507354736328,31.0507354736328,31.0507354736328,31.0507354736328,33.8870544433594,33.8870544433594,33.8870544433594,33.8870544433594,48.2884063720703,48.2884063720703,48.2884063720703,48.2884063720703,63.3595886230469,63.3595886230469,63.3595886230469,63.3595886230469,21.6761093139648,21.6761093139648,21.6761093139648,21.6761093139648,21.6761093139648,35.8964996337891,35.8964996337891,35.8964996337891,35.8964996337891,50.1303939819336,50.1303939819336,50.1303939819336,50.1303939819336,63.8619689941406,63.8619689941406,63.8619689941406,63.8619689941406,63.8619689941406,26.3514251708984,26.3514251708984,26.3514251708984,26.3514251708984,33.7195587158203,33.7195587158203,33.7195587158203,33.7195587158203,40.7527770996094,40.7527770996094,40.7527770996094,40.7527770996094,53.6470642089844,53.6470642089844,53.6470642089844,53.6470642089844,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,63.8619766235352,29.7005844116211,29.7005844116211,29.7005844116211,29.7005844116211,44.4368515014648,44.4368515014648,44.4368515014648,44.4368515014648,59.1731185913086,59.1731185913086,59.1731185913086,59.1731185913086,55.3243713378906,55.3243713378906,55.3243713378906,55.3243713378906,55.3243713378906,32.2124557495117,32.2124557495117,32.2124557495117,32.2124557495117,47.1162338256836,47.1162338256836,47.1162338256836,47.1162338256836,62.5222778320312,62.5222778320312,62.5222778320312,62.5222778320312,23.0023498535156,23.0023498535156,23.0023498535156,23.0023498535156,38.2409362792969,38.2409362792969,38.2409362792969,38.2409362792969,52.8097991943359,52.8097991943359,52.8097991943359,52.8097991943359,63.8619995117188,63.8619995117188,63.8619995117188,63.8619995117188,63.8619995117188,26.5189666748047,26.5189666748047,26.5189666748047,26.5189666748047,41.9250640869141,41.9250640869141,41.9250640869141,41.9250640869141,56.4938735961914,56.4938735961914,56.4938735961914,56.4938735961914,63.6946029663086,63.6946029663086,63.6946029663086,63.6946029663086,63.6946029663086,30.7053604125977,30.7053604125977,30.7053604125977,30.7053604125977,45.9440536499023,45.9440536499023,45.9440536499023,45.9440536499023,61.3501510620117,61.3501510620117,61.3501510620117,61.3501510620117,30.7159881591797,30.7159881591797,30.7159881591797,30.7159881591797,30.7159881591797,35.0593185424805,35.0593185424805,35.0593185424805,35.0593185424805,50.4653625488281,50.4653625488281,50.4653625488281,50.4653625488281,63.8620223999023,63.8620223999023,63.8620223999023,63.8620223999023,63.8620223999023,26.3513717651367,26.3513717651367,26.3513717651367,26.3513717651367,41.7574691772461,41.7574691772461,41.7574691772461,41.7574691772461,57.3309707641602,57.3309707641602,57.3309707641602,57.3309707641602,59.1745529174805,59.1745529174805,59.1745529174805,59.1745529174805,59.1745529174805,31.207649230957,31.207649230957,31.207649230957,31.207649230957,46.2788314819336,46.2788314819336,46.2788314819336,46.2788314819336,61.3500137329102,61.3500137329102,61.3500137329102,61.3500137329102,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,63.8618774414062,23.3371505737305,23.3371505737305,23.3371505737305,23.3371505737305,35.2265853881836,35.2265853881836,35.2265853881836,35.2265853881836,50.1303634643555,50.1303634643555,50.1303634643555,50.1303634643555,63.8618850708008,63.8618850708008,63.8618850708008,63.8618850708008,63.8618850708008,24.3418502807617,24.3418502807617,24.3418502807617,24.3418502807617,39.2455749511719,39.2455749511719,39.2455749511719,39.2455749511719,54.4842681884766,54.4842681884766,54.4842681884766,54.4842681884766,63.6944885253906,63.6944885253906,63.6944885253906,63.6944885253906,63.6944885253906,30.3872756958008,30.3872756958008,30.3872756958008,42.6567077636719,42.6567077636719,42.6567077636719,42.6567077636719,57.0580596923828,57.0580596923828,57.0580596923828,57.0580596923828,60.408332824707,60.408332824707,60.408332824707,60.408332824707,60.408332824707,31.1421737670898,31.1421737670898,31.1421737670898,31.1421737670898,46.0459518432617,46.0459518432617,46.0459518432617,46.0459518432617,61.4520492553711,61.4520492553711,61.4520492553711,61.4520492553711,31.3200988769531,31.3200988769531,31.3200988769531,31.3200988769531,31.3200988769531,35.66357421875,35.66357421875,35.66357421875,35.66357421875,51.0696868896484,51.0696868896484,51.0696868896484,51.0696868896484,63.796516418457,63.796516418457,63.796516418457,63.796516418457,63.796516418457,30.472412109375,30.472412109375,30.472412109375,30.472412109375,45.8784561157227,45.8784561157227,45.8784561157227,45.8784561157227,61.2846069335938,61.2846069335938,61.2846069335938,61.2846069335938,32.491943359375,32.491943359375,32.491943359375,32.491943359375,32.491943359375,35.3286895751953,35.3286895751953,35.3286895751953,35.3286895751953,50.2323608398438,50.2323608398438,50.2323608398438,50.2323608398438,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,26.4534454345703,26.4534454345703,26.4534454345703,26.4534454345703,40.6873397827148,40.6873397827148,40.6873397827148,40.6873397827148,55.4235534667969,55.4235534667969,55.4235534667969,55.4235534667969,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,30.9748077392578,30.9748077392578,30.9748077392578,30.9748077392578,45.7110748291016,45.7110748291016,45.7110748291016,45.7110748291016,60.7822036743164,60.7822036743164,60.7822036743164,60.7822036743164,38.183708190918,38.183708190918,38.183708190918,38.183708190918,38.183708190918,34.6588821411133,34.6588821411133,34.6588821411133,34.6588821411133,49.7300109863281,49.7300109863281,49.7300109863281,49.7300109863281,63.9639587402344,63.9639587402344,63.9639587402344,63.9639587402344,63.9639587402344,26.6209259033203,26.6209259033203,26.6209259033203,26.6209259033203,40.8548202514648,40.8548202514648,40.8548202514648,40.8548202514648,55.758544921875,55.758544921875,55.758544921875,55.758544921875,63.7965621948242,63.7965621948242,63.7965621948242,63.7965621948242,63.7965621948242,30.3050003051758,30.3050003051758,30.3050003051758,30.3050003051758,45.5436401367188,45.5436401367188,45.5436401367188,45.5436401367188,60.7822799682617,60.7822799682617,60.7822799682617,60.7822799682617,34.8356475830078,34.8356475830078,34.8356475830078,34.8356475830078,34.8356475830078,34.9938201904297,34.9938201904297,34.9938201904297,34.9938201904297,50.2324600219727,50.2324600219727,50.2324600219727,50.2324600219727,63.963981628418,63.963981628418,63.963981628418,63.963981628418,63.963981628418,28.4742965698242,28.4742965698242,28.4742965698242,28.4742965698242,28.4742965698242,24.1090316772461,24.1090316772461,24.1090316772461,24.1090316772461,37.673095703125,37.673095703125,37.673095703125,37.673095703125,52.9117889404297,52.9117889404297,52.9117889404297,52.9117889404297,63.9639892578125,63.9639892578125,63.9639892578125,63.9639892578125,63.9639892578125,27.4582443237305,27.4582443237305,27.4582443237305,27.4582443237305,42.6968841552734,42.6968841552734,42.6968841552734,42.6968841552734,57.2656402587891,57.2656402587891,57.2656402587891,57.2656402587891,60.4485092163086,60.4485092163086,60.4485092163086,60.4485092163086,60.4485092163086,30.6399459838867,30.6399459838867,30.6399459838867,30.6399459838867,46.0460433959961,46.0460433959961,46.0460433959961,46.0460433959961,61.4521408081055,61.4521408081055,61.4521408081055,61.4521408081055,34.8356781005859,34.8356781005859,34.8356781005859,34.8356781005859,34.8356781005859,34.1565093994141,34.1565093994141,34.1565093994141,34.1565093994141,49.3952026367188,49.3952026367188,49.3952026367188,49.3952026367188,63.9639587402344,63.9639587402344,63.9639587402344,63.9639587402344,23.2718276977539,23.2718276977539,23.2718276977539,23.2718276977539,38.3430099487305,38.3430099487305,38.3430099487305,38.3430099487305,52.4094467163086,52.4094467163086,52.4094467163086,52.4094467163086,63.7966156005859,63.7966156005859,63.7966156005859,63.7966156005859,63.7966156005859,30.807373046875,30.807373046875,30.807373046875,30.807373046875,45.8786087036133,45.8786087036133,45.8786087036133,45.8786087036133,61.2846527099609,61.2846527099609,61.2846527099609,61.2846527099609,33.9986801147461,33.9986801147461,33.9986801147461,33.9986801147461,33.9986801147461,31.6445617675781,31.6445617675781,31.6445617675781,31.6445617675781,47.0506591796875,47.0506591796875,47.0506591796875,47.0506591796875,61.284553527832,61.284553527832,61.284553527832,61.284553527832,32.3244857788086,32.3244857788086,32.3244857788086,32.3244857788086,32.3244857788086,35.6634979248047,35.6634979248047,35.6634979248047,35.6634979248047,49.8974456787109,49.8974456787109,49.8974456787109,49.8974456787109,63.7964782714844,63.7964782714844,63.7964782714844,63.7964782714844,63.7964782714844,29.9700012207031,29.9700012207031,29.9700012207031,29.9700012207031,44.0364379882812,44.0364379882812,44.0364379882812,44.0364379882812,52.0744018554688,52.0744018554688,52.0744018554688,52.0744018554688,60.9496002197266,60.9496002197266,60.9496002197266,60.9496002197266,55.9284896850586,55.9284896850586,55.9284896850586,55.9284896850586,55.9284896850586,32.6492767333984,32.6492767333984,32.6492767333984,32.6492767333984,47.2180862426758,47.2180862426758,47.2180862426758,47.2180862426758,61.4519805908203,61.4519805908203,61.4519805908203,61.4519805908203,42.5361633300781,42.5361633300781,42.5361633300781,42.5361633300781,42.5361633300781,32.3143692016602,32.3143692016602,32.3143692016602,32.3143692016602,46.3808059692383,46.3808059692383,46.3808059692383,46.3808059692383,61.4519882202148,61.4519882202148,61.4519882202148,61.4519882202148,36.3422164916992,36.3422164916992,36.3422164916992,36.3422164916992,36.3422164916992,34.4913787841797,34.4913787841797,34.4913787841797,34.4913787841797,49.8974761962891,49.8974761962891,49.8974761962891,49.8974761962891,63.9639129638672,63.9639129638672,63.9639129638672,63.9639129638672,63.9639129638672,25.4486236572266,25.4486236572266,25.4486236572266,25.4486236572266,40.5198593139648,40.5198593139648,40.5198593139648,40.5198593139648,56.2608184814453,56.2608184814453,56.2608184814453,56.2608184814453,63.796516418457,63.796516418457,63.796516418457,63.796516418457,63.796516418457,30.8073272705078,30.8073272705078,30.8073272705078,30.8073272705078,46.2134246826172,46.2134246826172,46.2134246826172,46.2134246826172,61.786979675293,61.786979675293,61.786979675293,61.786979675293,29.1438598632812,29.1438598632812,29.1438598632812,29.1438598632812,29.1438598632812,34.9937210083008,34.9937210083008,34.9937210083008,34.9937210083008,49.7300415039062,49.7300415039062,49.7300415039062,49.7300415039062,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,63.9639358520508,24.4439010620117,24.4439010620117,24.4439010620117,24.4439010620117,39.6825942993164,39.6825942993164,39.6825942993164,39.6825942993164,55.0886917114258,55.0886917114258,55.0886917114258,55.0886917114258,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,63.7965393066406,30.1375198364258,30.1375198364258,30.1375198364258,30.1375198364258,44.8737335205078,44.8737335205078,44.8737335205078,44.8737335205078,59.777458190918,59.777458190918,59.777458190918,59.777458190918,60.2810592651367,60.2810592651367,60.2810592651367,60.2810592651367,60.2810592651367,30.9748153686523,30.9748153686523,30.9748153686523,30.9748153686523,46.3809127807617,46.3809127807617,46.3809127807617,46.3809127807617,61.7869567871094,61.7869567871094,61.7869567871094,61.7869567871094,31.3201446533203,31.3201446533203,31.3201446533203,31.3201446533203,31.3201446533203,35.6635818481445,35.6635818481445,35.6635818481445,35.6635818481445,50.2324447631836,50.2324447631836,50.2324447631836,50.2324447631836,63.9639663696289,63.9639663696289,63.9639663696289,63.9639663696289,63.9639663696289,29.4677124023438,29.4677124023438,29.4677124023438,29.4677124023438,44.706298828125,44.706298828125,44.706298828125,44.706298828125,59.1077041625977,59.1077041625977,59.1077041625977,59.1077041625977,54.9241485595703,54.9241485595703,54.9241485595703,54.9241485595703,54.9241485595703,31.4772109985352,31.4772109985352,31.4772109985352,31.4772109985352,47.0507125854492,47.0507125854492,47.0507125854492,47.0507125854492,61.6195755004883,61.6195755004883,61.6195755004883,61.6195755004883,31.3201675415039,31.3201675415039,31.3201675415039,31.3201675415039,31.3201675415039,34.9938278198242,34.9938278198242,34.9938278198242,34.9938278198242,49.227668762207,49.227668762207,49.227668762207,49.227668762207,55.7585144042969,55.7585144042969,55.7585144042969,55.7585144042969,62.6243286132812,62.6243286132812,62.6243286132812,62.6243286132812,24.7914123535156,24.7914123535156,24.7914123535156,24.7914123535156,24.7914123535156,36.1660385131836,36.1660385131836,36.1660385131836,36.1660385131836,50.7348480224609,50.7348480224609,50.7348480224609,50.7348480224609,63.963996887207,63.963996887207,63.963996887207,63.963996887207,63.963996887207,26.9558258056641,26.9558258056641,26.9558258056641,26.9558258056641,42.0270080566406,42.0270080566406,42.0270080566406,42.0270080566406,57.0981903076172,57.0981903076172,57.0981903076172,57.0981903076172,63.7966003417969,63.7966003417969,63.7966003417969,63.7966003417969,63.7966003417969,30.8074111938477,30.8074111938477,30.8074111938477,30.8074111938477,44.538932800293,44.538932800293,44.538932800293,44.538932800293,59.1077423095703,59.1077423095703,59.1077423095703,59.1077423095703,55.0915908813477,55.0915908813477,55.0915908813477,55.0915908813477,55.0915908813477,32.6493988037109,32.6493988037109,32.6493988037109,32.6493988037109,47.8880386352539,47.8880386352539,47.8880386352539,47.8880386352539,62.9592742919922,62.9592742919922,62.9592742919922,62.9592742919922,21.5972290039062,21.5972290039062,21.5972290039062,21.5972290039062,36.8358993530273,36.8358993530273,36.8358993530273,36.8358993530273,52.2419967651367,52.2419967651367,52.2419967651367,52.2419967651367,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,63.9640274047852,26.7882385253906,26.7882385253906,26.7882385253906,26.7882385253906,42.0269317626953,42.0269317626953,42.0269317626953,42.0269317626953,56.4282836914062,56.4282836914062,56.4282836914062,56.4282836914062,63.8198318481445,63.8198318481445,63.8198318481445,63.8198318481445,63.8198318481445,30.586799621582,30.586799621582,30.586799621582,30.586799621582,45.4905776977539,45.4905776977539,45.4905776977539,45.4905776977539,60.7291641235352,60.7291641235352,60.7291641235352,60.7291641235352,37.1262435913086,37.1262435913086,37.1262435913086,37.1262435913086,37.1262435913086,34.7732467651367,34.7732467651367,34.7732467651367,34.7732467651367,49.844482421875,49.844482421875,49.844482421875,49.844482421875,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,30.7543258666992,30.7543258666992,30.7543258666992,30.7543258666992,36.9502029418945,36.9502029418945,36.9502029418945,36.9502029418945,46.8302536010742,46.8302536010742,46.8302536010742,46.8302536010742,56.5427932739258,56.5427932739258,56.5427932739258,56.5427932739258,63.743522644043,63.743522644043,63.743522644043,63.743522644043,63.743522644043,26.4003829956055,26.4003829956055,26.4003829956055,26.4003829956055,37.2851257324219,37.2851257324219,37.2851257324219,37.2851257324219,50.6817321777344,50.6817321777344,50.6817321777344,50.6817321777344,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,63.9109344482422,23.8885803222656,23.8885803222656,23.8885803222656,23.8885803222656,37.954963684082,37.954963684082,37.954963684082,37.954963684082,53.3610610961914,53.3610610961914,53.3610610961914,53.3610610961914,63.743537902832,63.743537902832,63.743537902832,63.743537902832,63.743537902832,30.5868911743164,30.5868911743164,30.5868911743164,30.5868911743164,45.6580200195312,45.6580200195312,45.6580200195312,45.6580200195312,60.8967132568359,60.8967132568359,60.8967132568359,60.8967132568359,33.2759857177734,33.2759857177734,33.2759857177734,33.2759857177734,33.2759857177734,35.1082534790039,35.1082534790039,35.1082534790039,35.1082534790039,49.5095520019531,49.5095520019531,49.5095520019531,49.5095520019531,63.9109573364258,63.9109573364258,63.9109573364258,63.9109573364258,63.9109573364258,27.0702438354492,27.0702438354492,27.0702438354492,27.0702438354492,41.8065643310547,41.8065643310547,41.8065643310547,41.8065643310547,56.7102355957031,56.7102355957031,56.7102355957031,56.7102355957031,63.7435607910156,63.7435607910156,63.7435607910156,63.7435607910156,63.7435607910156,30.9217758178711,30.9217758178711,30.9217758178711,30.9217758178711,44.8207550048828,44.8207550048828,44.8207550048828,44.8207550048828,59.8919906616211,59.8919906616211,59.8919906616211,59.8919906616211,40.6417922973633,40.6417922973633,40.6417922973633,40.6417922973633,40.6417922973633,34.2709350585938,34.2709350585938,34.2709350585938,34.2709350585938,49.342170715332,49.342170715332,49.342170715332,49.342170715332,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,25.7306594848633,25.7306594848633,25.7306594848633,25.7306594848633,41.1367568969727,41.1367568969727,41.1367568969727,41.1367568969727,56.3753967285156,56.3753967285156,56.3753967285156,56.3753967285156,63.7435836791992,63.7435836791992,63.7435836791992,63.7435836791992,63.7435836791992,31.0892562866211,31.0892562866211,31.0892562866211,31.0892562866211,45.9929809570312,45.9929809570312,45.9929809570312,45.9929809570312,59.8920135498047,59.8920135498047,59.8920135498047,59.8920135498047,43.4876861572266,43.4876861572266,43.4876861572266,43.4876861572266,43.4876861572266,34.2709579467773,34.2709579467773,34.2709579467773,34.2709579467773,49.1746826171875,49.1746826171875,49.1746826171875,49.1746826171875,63.911003112793,63.911003112793,63.911003112793,63.911003112793,63.911003112793,24.8933944702148,24.8933944702148,24.8933944702148,24.8933944702148,39.797119140625,39.797119140625,39.797119140625,39.797119140625,55.2032165527344,55.2032165527344,55.2032165527344,55.2032165527344,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,63.9110107421875,30.921875,30.921875,30.921875,30.921875,45.8255996704102,45.8255996704102,45.8255996704102,45.8255996704102,60.5618133544922,60.5618133544922,60.5618133544922,60.5618133544922,44.659538269043,44.659538269043,44.659538269043,44.659538269043,44.659538269043,33.2662887573242,33.2662887573242,33.2662887573242,33.2662887573242,36.2804718017578,36.2804718017578,36.2804718017578,36.2804718017578,49.1747589111328,49.1747589111328,49.1747589111328,49.1747589111328,63.7436218261719,63.7436218261719,63.7436218261719,63.7436218261719,63.7436218261719,30.5869750976562,30.5869750976562,30.5869750976562,30.5869750976562,44.1510391235352,44.1510391235352,44.1510391235352,44.1510391235352,58.384880065918,58.384880065918,58.384880065918,58.384880065918,58.8889083862305,58.8889083862305,58.8889083862305,58.8889083862305,58.8889083862305,31.5917282104492,31.5917282104492,31.5917282104492,31.5917282104492,46.6628570556641,46.6628570556641,46.6628570556641,46.6628570556641,61.7340927124023,61.7340927124023,61.7340927124023,61.7340927124023,27.0821228027344,27.0821228027344,27.0821228027344,27.0821228027344,27.0821228027344,35.1083450317383,35.1083450317383,35.1083450317383,35.1083450317383,49.6771011352539,49.6771011352539,49.6771011352539,49.6771011352539,63.9109954833984,63.9109954833984,63.9109954833984,63.9109954833984,23.3863220214844,23.3863220214844,23.3863220214844,23.3863220214844,37.955078125,37.955078125,37.955078125,37.955078125,53.193717956543,53.193717956543,53.193717956543,53.193717956543,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,63.9110565185547,24.3909149169922,24.3909149169922,24.3909149169922,24.3909149169922,39.7969589233398,39.7969589233398,39.7969589233398,39.7969589233398,54.8681945800781,54.8681945800781,54.8681945800781,54.8681945800781,63.7434997558594,63.7434997558594,63.7434997558594,63.7434997558594,63.7434997558594,30.0844802856445,30.0844802856445,30.0844802856445,30.0844802856445,44.6532897949219,44.6532897949219,44.6532897949219,44.6532897949219,59.7244186401367,59.7244186401367,59.7244186401367,59.7244186401367,46.3334732055664,46.3334732055664,46.3334732055664,46.3334732055664,46.3334732055664,33.6010437011719,33.6010437011719,33.6010437011719,33.6010437011719,49.1746520996094,49.1746520996094,49.1746520996094,49.1746520996094,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,63.7435150146484,31.0891876220703,31.0891876220703,31.0891876220703,31.0891876220703,46.3278274536133,46.3278274536133,46.3278274536133,46.3278274536133,61.0641479492188,61.0641479492188,61.0641479492188,61.0641479492188,63.9109268188477,63.9109268188477,63.9109268188477,63.9109268188477,63.9109268188477,23.7211151123047,23.7211151123047,23.7211151123047,23.7211151123047,35.6106033325195,35.6106033325195,35.6106033325195,35.6106033325195,51.1841049194336,51.1841049194336,51.1841049194336,51.1841049194336,63.7435302734375,63.7435302734375,63.7435302734375,63.7435302734375,63.7435302734375,29.0797119140625,29.0797119140625,29.0797119140625,29.0797119140625,43.1461486816406,43.1461486816406,43.1461486816406,43.1461486816406,57.3800964355469,57.3800964355469,57.3800964355469,57.3800964355469,63.743537902832,63.743537902832,63.743537902832,63.743537902832,63.743537902832,29.9170074462891,29.9170074462891,29.9170074462891,29.9170074462891,44.8207855224609,44.8207855224609,44.8207855224609,44.8207855224609,60.2268829345703,60.2268829345703,60.2268829345703,60.2268829345703,52.0252532958984,52.0252532958984,52.0252532958984,52.0252532958984,52.0252532958984,32.9313049316406,32.9313049316406,32.9313049316406,32.9313049316406,48.5048065185547,48.5048065185547,48.5048065185547,48.5048065185547,63.9109573364258,63.9109573364258,63.9109573364258,63.9109573364258,63.9109573364258,28.0749893188477,28.0749893188477,28.0749893188477,28.0749893188477,42.4763946533203,42.4763946533203,42.4763946533203,42.4763946533203,58.0498962402344,58.0498962402344,58.0498962402344,58.0498962402344,56.8799896240234,56.8799896240234,56.8799896240234,56.8799896240234,56.8799896240234,32.0939788818359,32.0939788818359,32.0939788818359,32.0939788818359,47.1652145385742,47.1652145385742,47.1652145385742,47.1652145385742,62.5712585449219,62.5712585449219,62.5712585449219,62.5712585449219,21.5577163696289,21.5577163696289,21.5577163696289,21.5577163696289,21.5577163696289,35.6106491088867,35.6106491088867,35.6106491088867,35.6106491088867,50.6818313598633,50.6818313598633,50.6818313598633,50.6818313598633,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,63.9109802246094,26.9028625488281,26.9028625488281,26.9028625488281,26.9028625488281,41.8065872192383,41.8065872192383,41.8065872192383,41.8065872192383,56.5428009033203,56.5428009033203,56.5428009033203,56.5428009033203,63.7435836791992,63.7435836791992,63.7435836791992,63.7435836791992,63.7435836791992,30.9218521118164,30.9218521118164,30.9218521118164,30.9218521118164,46.1604919433594,46.1604919433594,46.1604919433594,46.1604919433594,61.3991317749023,61.3991317749023,61.3991317749023,61.3991317749023,28.4213104248047,28.4213104248047,28.4213104248047,28.4213104248047,28.4213104248047,35.7781295776367,35.7781295776367,35.7781295776367,35.7781295776367,51.0167694091797,51.0167694091797,51.0167694091797,51.0167694091797,63.911003112793,63.911003112793,63.911003112793,63.911003112793,63.911003112793,26.7354278564453,26.7354278564453,26.7354278564453,26.7354278564453,41.4716415405273,41.4716415405273,41.4716415405273,41.4716415405273,56.8777389526367,56.8777389526367,56.8777389526367,56.8777389526367,63.7436065673828,63.7436065673828,63.7436065673828,63.7436065673828,63.7436065673828,31.0892791748047,31.0892791748047,31.0892791748047,31.0892791748047,46.3279190063477,46.3279190063477,46.3279190063477,46.3279190063477,61.5666122436523,61.5666122436523,61.5666122436523,61.5666122436523,27.9191207885742,27.9191207885742,27.9191207885742,27.9191207885742,27.9191207885742,35.9456100463867,35.9456100463867,35.9456100463867,35.9456100463867,50.0120468139648,50.0120468139648,50.0120468139648,50.0120468139648,63.9110260009766,63.9110260009766,63.9110260009766,63.9110260009766,63.9110260009766,24.0688323974609,24.0688323974609,24.0688323974609,24.0688323974609,24.0688323974609,25.2282791137695,25.2282791137695,25.2282791137695,25.2282791137695,38.6249389648438,38.6249389648438,38.6249389648438,38.6249389648438,53.5286636352539,53.5286636352539,53.5286636352539,53.5286636352539,63.9110336303711,63.9110336303711,63.9110336303711,63.9110336303711,63.9110336303711,28.4100341796875,28.4100341796875,28.4100341796875,28.4100341796875,42.4764709472656,42.4764709472656,42.4764709472656,42.4764709472656],"meminc":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.165679931640625,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9.11337280273438,0,0,0,6.02841949462891,0,0,0,7.53559112548828,0,0,0,14.2338943481445,0,0,0,6.59383392333984,0,0,0,0,-33.7138519287109,0,0,0,14.9037246704102,0,0,0,14.9037780761719,0,0,0,3.85157775878906,0,0,0,0,-33.1567001342773,0,0,0,15.2386932373047,0,0,0,14.736213684082,0,0,0,-4.35138702392578,0,0,0,0,-24.7862243652344,0,0,0,15.0711822509766,0,0,0,15.0712356567383,0,0,0,-10.5457153320312,0,0,0,0,-21.1038131713867,0,0,0,14.7362670898438,0,0,0,15.4060974121094,0,0,0,-0.6683349609375,0,0,0,0,-28.9716491699219,0,0,0,14.4013519287109,0,0,0,14.5688095092773,0,0,0,4.52140808105469,0,0,0,0,-20.2559051513672,0,0,0,0,-16.9197235107422,0,0,0,2.67937469482422,0,0,0,6.19587707519531,0,0,0,2.84681701660156,0,0,0,6.69826507568359,0,0,0,3.51666259765625,0,0,0,4.18638610839844,0,0,0,4.85626983642578,0,0,0,2.17697143554688,0,0,0,4.01901245117188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-19.5862884521484,0,0,0,0,-21.4408111572266,0,0,0,4.35384368896484,0,0,0,2.84677886962891,0,0,0,2.00949096679688,0,0,0,5.02372741699219,0,0,0,2.51186370849609,0,0,0,2.34445953369141,0,0,0,5.02367401123047,0,0,0,1.50711822509766,0,0,0,3.68412017822266,0,0,0,2.00943756103516,0,0,0,1.50711822509766,0,0,0,3.85152435302734,0,0,0,2.00954437255859,0,0,0,2.00946044921875,0,0,0,0.334945678710938,0,0,0,0,-18.9166717529297,0,0,0,0,-20.9382781982422,0,0,0,4.35389709472656,0,0,0,3.34915161132812,0,0,0,3.68406677246094,0,0,0,2.17694854736328,0,0,0,2.84683227539062,0,0,0,5.02367401123047,0,0,0,2.34445953369141,0,0,0,2.51181030273438,0,0,0,5.19118499755859,0,0,0,2.51191711425781,0,0,0,5.02367401123047,0,0,0,0.83734130859375,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-21.427734375,0,0,0,0,-21.9299468994141,0,0,0,0,2.49803924560547,0,0,0,3.85147094726562,0,0,0,3.18174743652344,0,0,0,2.84677886962891,0,0,0,3.01423645019531,0,0,0,6.86574554443359,0,0,0,2.00945281982422,0,0,0,1.67462921142578,0,0,0,2.34435272216797,0,0,0,3.01428985595703,0,0,0,1.67452239990234,0,0,0,2.6793212890625,0,0,0,6.19593048095703,0,0,0,1.50717163085938,0,0,0,0,0,0,0,0,0,-7.36578369140625,0,0,0,0,-25.1106262207031,0,0,0,0,-9.22057342529297,0,0,0,6.02847290039062,0,0,0,5.69361114501953,0,0,0,7.20067596435547,0,0,0,7.03316497802734,0,0,0,9.54508209228516,0,0,0,6.19598388671875,0,0,0,0,-38.3355560302734,0,0,0,0,6.51862335205078,0,0,0,14.4012985229492,0,0,0,14.7362670898438,0,0,0,-4.01679229736328,0,0,0,0,-26.7953414916992,0,0,0,14.5687561035156,0,0,0,14.5688629150391,0,0,0,-0.166015625,0,0,0,0,-28.4692230224609,0,0,0,14.9036712646484,0,0,0,10.3824234008789,0,0,0,7.70304870605469,0,0,0,0,-40.8596954345703,0,0,0,15.2386932373047,0,0,0,15.0711822509766,0,0,0,10.3824234008789,0,0,0,0,-38.8600845336914,0,0,0,15.5735015869141,0,0,0,14.4014053344727,0,0,0,8.87530517578125,0,0,0,0,-33.6590194702148,0,0,0,15.5735549926758,0,0,0,10.2148818969727,0,0,0,6.69833374023438,0,0,0,1.17225646972656,0,0,0,0,-33.8264770507812,0,0,0,14.9036712646484,0,0,0,14.7363204956055,0,0,0,4.18649291992188,0,0,0,0,-34.8312225341797,0,0,0,14.2338943481445,0,0,0,15.5735015869141,0,0,0,5.02383422851562,0,0,0,0,-33.4915618896484,0,0,0,15.238639831543,0,0,0,15.5735015869141,0,0,0,-8.20184326171875,0,0,0,0,-22.275390625,0,0,0,8.03797912597656,0,0,0,11.0521469116211,0,0,0,10.8847427368164,0,0,0,3.18180084228516,0,0,0,0,-34.6637649536133,0,0,0,14.2338409423828,0,0,0,14.7362670898438,0,0,0,5.86106872558594,0,0,0,0,-34.6637115478516,0,0,0,14.9036712646484,0,0,0,11.554573059082,0,0,0,8.20547485351562,0,0,0,0,-32.4764099121094,0,0,0,0,0.492019653320312,0,0,0,11.3870849609375,0,0,0,9.88085174560547,0,0,0,10.5498275756836,0,0,0,-14.7315139770508,0,0,0,0,-20.1004028320312,0,0,0,1.67462921142578,0,0,0,10.3823165893555,0,0,0,13.8989791870117,0,0,0,8.87535858154297,0,0,0,0,-35.1661911010742,0,0,0,14.9037246704102,0,0,0,11.7220306396484,0,0,0,8.54044342041016,0,0,0,0,-34.1614456176758,0,0,0,15.4061508178711,0,0,0,14.0663833618164,0,0,0,4.68891906738281,0,0,0,0,-33.324104309082,0,0,0,13.3966064453125,0,0,0,11.5545196533203,0,0,0,8.54039001464844,0,0,0,0,-40.0224075317383,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,10.7173385620117,0,0,0,0,-36.0034255981445,0,0,0,14.7362670898438,0,0,0,15.0712356567383,0,0,0,6.19593048095703,0,0,0,0,-34.9986801147461,0,0,0,14.5688095092773,0,0,0,14.2339477539062,0,0,0,6.19593048095703,0,0,0,0,-41.6836395263672,0,0,0,0,12.2110595703125,0,0,0,15.238639831543,0,0,0,14.2339477539062,0,0,0,0,-35.3335952758789,0,0,0,11.3871154785156,0,0,0,8.87525177001953,0,0,0,12.0569458007812,0,0,0,-5.69072723388672,0,0,0,0,-23.6143417358398,0,0,0,15.4061508178711,0,0,0,14.0663833618164,0,0,0,2.67942810058594,0,0,0,0,-36.8407135009766,0,0,0,9.04265594482422,0,0,0,12.7268295288086,0,0,0,14.4013519287109,0,0,0,-30.2998886108398,0,0,0,0,0.994819641113281,0,0,0,14.4012985229492,0,0,0,15.238639831543,0,0,0,-3.85008239746094,0,0,0,0,-36.6747512817383,0,0,0,7.70299530029297,0,0,0,10.8847427368164,0,0,0,13.3966598510742,0,0,0,9.04270935058594,0,0,0,0,-38.0129165649414,0,0,0,14.7363204956055,0,0,0,12.8941802978516,0,0,0,9.04276275634766,0,0,0,-16.9073944091797,0,0,0,0,-12.9001007080078,0,0,0,15.094596862793,0,0,0,15.2385864257812,0,0,0,-27.6976623535156,0,0,0,0,-1.68373870849609,0,0,0,14.9037246704102,0,0,0,14.9037780761719,0,0,0,-32.3088455200195,0,0,0,0,3.67359161376953,0,0,0,14.2338562011719,0,0,0,14.9037780761719,0,0,0,0,-38.682746887207,0,0,0,14.0664367675781,0,0,0,15.0711822509766,0,0,0,9.54513549804688,0,0,0,0,-39.0176086425781,0,0,0,15.2385864257812,0,0,0,15.238639831543,0,0,0,8.37298583984375,0,0,0,0,-33.324104309082,0,0,0,15.2385864257812,0,0,0,14.9037780761719,0,0,0,-4.51884460449219,0,0,0,0,-31.9869537353516,0,0,0,8.87530517578125,0,0,0,11.7219772338867,0,0,0,14.9037780761719,0,0,0,0.671005249023438,0,0,0,0,-29.8086700439453,0,0,0,14.7363204956055,0,0,0,14.7362670898438,0,0,0,0.6708984375,0,0,0,0,-30.3108825683594,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,-1.84032440185547,0,0,0,0,-27.6322021484375,0,0,0,13.8989791870117,0,0,0,15.238639831543,0,0,0,-1.17060089111328,0,0,0,0,-29.6415863037109,0,0,0,11.5545196533203,0,0,0,9.54513549804688,0,0,0,12.2243499755859,0,0,0,1.17230987548828,0,0,0,0,-33.9939346313477,0,0,0,15.0711822509766,0,0,0,14.7362670898438,0,0,0,4.18649291992188,0,0,0,0,-33.1566467285156,0,0,0,14.2338943481445,0,0,0,14.9037246704102,0,0,0,4.18643951416016,0,0,0,0,-38.0128631591797,0,0,0,14.736213684082,0,0,0,15.0712356567383,0,0,0,8.20542144775391,0,0,0,0,-37.6780014038086,0,0,0,13.7315216064453,0,0,0,15.0711822509766,0,0,0,8.87530517578125,0,0,0,0,-35.6685104370117,0,0,0,14.4014053344727,0,0,0,14.9036712646484,0,0,0,6.19603729248047,0,0,0,0,-33.4915618896484,0,0,0,14.9037246704102,0,0,0,14.9036712646484,0,0,0,0.503494262695312,0,0,0,0,-31.3156280517578,0,0,0,14.7362670898438,0,0,0,15.4060440063477,0,0,0,4.52140808105469,0,0,0,0,-33.9938812255859,0,0,0,3.68406677246094,0,0,0,10.5498275756836,0,0,0,13.7314682006836,0,0,0,6.02852630615234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43.7863464355469,0,0,0,0,14.2338409423828,0,0,0,14.5688095092773,0,0,0,14.0664901733398,0,0,0,-40.189811706543,0,0,0,14.0663833618164,0,0,0,14.0664901733398,0,0,0,12.8942337036133,0,0,0,0,-41.027099609375,0,0,0,14.9037246704102,0,0,0,15.0711288452148,0,0,0,11.0522537231445,0,0,0,0,-37.845458984375,0,0,0,14.2339477539062,0,0,0,14.5688095092773,0,0,0,8.87530517578125,0,0,0,0,-33.8264770507812,0,0,0,14.9037246704102,0,0,0,15.0711822509766,0,0,0,-18.5805816650391,0,0,0,0,-8.71504974365234,0,0,0,14.5688629150391,0,0,0,15.4060974121094,0,0,0,-22.7665405273438,0,0,0,0,-17.7582015991211,0,0,0,13.2291107177734,0,0,0,15.238639831543,0,0,0,12.5593185424805,0,0,0,-37.6656188964844,0,0,0,0,8.69546508789062,0,0,0,14.5688629150391,0,0,0,14.2338409423828,0,0,0,-36.3263320922852,0,0,0,0,8.69589233398438,0,0,0,14.9036712646484,0,0,0,13.5641174316406,0,0,0,-40.8596420288086,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,11.0522003173828,0,0,0,0,-36.0034255981445,0,0,0,14.4013519287109,0,0,0,14.7363204956055,0,0,0,6.69835662841797,0,0,0,0,-33.6590194702148,0,0,0,14.5688095092773,0,0,0,15.238639831543,0,0,0,-16.4043273925781,0,0,0,0,-10.5563888549805,0,0,0,14.9037780761719,0,0,0,15.4060440063477,0,0,0,-40.3572158813477,0,0,0,15.4060440063477,0,0,0,15.0712356567383,0,0,0,10.3824234008789,0,0,0,0,-34.4963607788086,0,0,0,13.8990325927734,0,0,0,12.5593185424805,0,0,0,8.03801727294922,0,0,0,0,-33.6590194702148,0,0,0,14.2338409423828,0,0,0,14.7362670898438,0,0,0,-3.68128967285156,0,0,0,0,-24.7864379882812,0,0,0,15.2385864257812,0,0,0,15.0712356567383,0,0,0,-17.9112854003906,0,0,0,0,-9.55180358886719,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-41.3619766235352,0,0,0,12.224365234375,0,0,0,15.0711822509766,0,0,0,12.0569458007812,0,0,0,2.00954437255859,0,0,0,0,-28.7935180664062,0,0,0,0,-1.18143463134766,0,0,0,13.2291870117188,0,0,0,1.81028747558594,0,0,2.94377899169922,0,0,0,12.056999206543,0,0,0,0,-34.2859344482422,0,0,0,15.4061508178711,0,0,0,15.4060974121094,0,0,0,-3.17955780029297,0,0,0,0,-25.4558944702148,0,0,0,14.5688095092773,0,0,0,15.2386932373047,0,0,0,-12.8893737792969,0,0,0,0,-15.4109497070312,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,-26.9518585205078,0,0,0,0,-1.68343353271484,0,0,0,14.7363204956055,0,0,0,14.5688095092773,0,0,0,0,-33.3240509033203,0,0,0,14.9036712646484,0,0,0,15.4060974121094,0,0,0,-6.86255645751953,0,0,0,0,-22.1075973510742,0,0,0,14.7363052368164,0,0,0,14.2338562011719,0,0,0,-3.17966461181641,0,0,0,0,-25.957893371582,0,0,0,15.0711822509766,0,0,0,13.89892578125,0,0,0,2.67937469482422,0,0,0,-5.18936920166016,0,0,0,0,-27.1299362182617,0,0,0,14.5687561035156,0,0,0,15.0711822509766,0,0,0,-6.19288635253906,0,0,0,0,-23.2795867919922,0,0,0,15.238639831543,0,0,0,15.0711288452148,0,0,0,-11.382682800293,0,0,0,0,-17.4200134277344,0,0,0,14.4014053344727,0,0,0,14.9036712646484,0,0,0,-10.8806304931641,0,0,0,0,-18.9268112182617,0,0,0,15.4060974121094,0,0,0,14.5688629150391,0,0,0,-15.0658416748047,0,0,0,0,-14.0717697143555,0,0,0,14.5688095092773,0,0,0,14.7362670898438,0,0,0,-17.2421493530273,0,0,0,0,-11.7280044555664,0,0,0,14.9037246704102,0,0,0,15.4060974121094,0,0,0,-35.8244400024414,0,0,0,0,7.85897827148438,0,0,0,15.0711822509766,0,0,0,13.0617446899414,0,0,0,0,-40.6921844482422,0,0,0,15.4060440063477,0,0,0,15.4060974121094,0,0,0,9.88005065917969,0,0,0,0,-34.3287963867188,0,0,0,14.5687561035156,0,0,0,14.9037246704102,0,0,0,4.68891906738281,0,0,0,0,-32.9892425537109,0,0,0,14.4014053344727,0,0,0,15.4060440063477,0,0,0,-5.52321624755859,0,0,0,0,-23.2794799804688,0,0,0,14.7362670898438,0,0,0,14.9037246704102,0,0,0,-11.3826293945312,0,0,0,0,-17.0850982666016,0,0,0,15.5735549926758,0,0,0,14.9037246704102,0,0,0,-27.9563369750977,0,0,0,0,-1.01381683349609,0,0,0,8.87519836425781,0,0,0,6.86581420898438,0,0,0,11.7219772338867,0,0,0,-14.5634689331055,0,0,0,0,-14.9090042114258,0,0,0,14.5687561035156,0,0,0,15.0711822509766,0,0,0,-15.4005432128906,0,0,0,0,-13.9044723510742,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-24.2731246948242,0,0,0,0,-6.70673370361328,0,0,0,15.238639831543,0,0,0,14.9037246704102,0,0,0,-13.7263412475586,0,0,0,0,-14.2390670776367,0,0,0,15.4060974121094,0,0,0,14.9037780761719,0,0,0,0,-41.5162353515625,0,0,0,0,13.5508270263672,0,0,0,14.736213684082,0,0,0,13.0617980957031,0,0,0,0,-32.8217849731445,0,0,0,15.0712356567383,0,0,0,15.0711288452148,0,0,0,-8.36924743652344,0,0,0,0,-19.9310760498047,0,0,0,15.4061508178711,0,0,0,15.238639831543,0,0,0,-28.1237411499023,0,0,0,0,-0.511497497558594,0,0,0,15.4060974121094,0,0,0,12.7267608642578,0,0,0,1.0047607421875,0,0,0,0,-31.8067932128906,0,0,0,0,2.33426666259766,0,0,0,14.9036712646484,0,0,0,14.0664901733398,0,0,0,-28.1237411499023,0,0,0,0,-1.18132781982422,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,-30.9696655273438,0,0,0,0,1.83205413818359,0,0,0,15.0711822509766,0,0,0,14.4013519287109,0,0,0,0,-35.8244934082031,0,0,0,0,6.68686676025391,0,0,0,15.0711441040039,0,0,0,14.0664901733398,0,0,0,0,-40.8596420288086,0,0,0,14.736213684082,0,0,0,15.0711822509766,0,0,0,11.0522537231445,0,0,0,0,-35.6685104370117,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,4.68891906738281,0,0,0,0,-32.9891891479492,0,0,0,15.5735015869141,0,0,0,15.0711822509766,0,0,0,-11.7174377441406,0,0,0,0,-17.0852584838867,0,0,0,14.5688629150391,0,0,0,15.5735015869141,0,0,0,-24.2731781005859,0,0,0,0,-3.85968780517578,0,0,0,14.4013519287109,0,0,0,14.7363739013672,0,0,0,0,-32.9891891479492,0,0,0,14.5688095092773,0,0,0,15.5735549926758,0,0,0,-2.67750549316406,0,0,0,0,-26.9391174316406,0,0,0,15.5735015869141,0,0,0,15.0712356567383,0,0,0,-16.1465072631836,0,0,0,0,-12.3976593017578,0,0,0,15.2386932373047,0,0,0,14.736213684082,0,0,0,-31.4717712402344,0,0,0,0,3.33895874023438,0,0,0,8.54033660888672,0,0,0,6.19587707519531,0,0,0,8.37287902832031,0,0,0,5.52615356445312,0,0,0,0,-39.0176086425781,0,0,0,11.0522003173828,0,0,0,11.0522003173828,0,0,0,12.0568923950195,0,0,0,4.8563232421875,0,0,0,0,-39.0176620483398,0,0,0,13.8989791870117,0,0,0,13.7315216064453,0,0,0,11.3871688842773,0,0,0,0,-28.6261138916016,0,0,0,0,-2.35369110107422,0,0,0,13.7315216064453,0,0,0,15.2385864257812,0,0,0,-13.8938522338867,0,0,0,0,-14.9087905883789,0,0,0,15.4060440063477,0,0,0,15.4061508178711,0,0,0,0,-39.8549499511719,0,0,0,12.5593719482422,0,0,0,14.7362670898438,0,0,0,12.5593185424805,0,0,0,0,-40.6921844482422,0,0,0,13.5640106201172,0,0,0,10.2149658203125,0,0,0,13.5640106201172,0,0,0,-3.34696197509766,0,0,0,0,-24.9533615112305,0,0,0,13.8989791870117,0,0,0,15.0711822509766,0,0,0,-9.54113006591797,0,0,0,0,-24.6202087402344,0,0,0,5.358642578125,0,0,0,14.5688629150391,0,0,0,15.4060440063477,0,0,0,-17.4095001220703,0,0,0,0,-12.3979415893555,0,0,0,14.4014053344727,0,0,0,13.89892578125,0,0,0,-4.35149383544922,0,0,0,0,-24.4511489868164,0,0,0,13.7315216064453,0,0,0,15.0711822509766,0,0,0,-3.01231384277344,0,0,0,0,-25.6229782104492,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,-28.6257400512695,0,0,0,0,0.492927551269531,0,0,0,15.238639831543,0,0,0,13.89892578125,0,0,0,-7.19832611083984,0,0,0,0,-25.2883834838867,0,0,0,14.9037246704102,0,0,0,15.2385864257812,0,0,0,-13.2241287231445,0,0,0,0,-15.5785140991211,0,0,0,14.9036712646484,0,0,0,15.0712356567383,0,0,0,-26.784294128418,0,0,0,0,-1.18111419677734,0,0,0,14.9037246704102,0,0,0,14.0664901733398,0,0,0,0,-32.8217849731445,0,0,0,15.0711822509766,0,0,0,15.238639831543,0,0,0,-11.8847885131836,0,0,0,0,-16.0806198120117,0,0,0,15.238639831543,0,0,0,14.9037246704102,0,0,0,-23.4363708496094,0,0,0,0,-6.03610229492188,0,0,0,14.7362670898438,0,0,0,14.736213684082,0,0,0,-29.9651336669922,0,0,0,0,0.492660522460938,0,0,0,14.736213684082,0,0,0,15.238639831543,0,0,0,-27.9564437866211,0,0,0,0,-2.35331726074219,0,0,0,13.061637878418,0,0,0,12.7267761230469,0,0,0,3.68406677246094,0,0,0,-15.5682678222656,0,0,0,0,-14.7414932250977,0,0,0,14.7362670898438,0,0,0,14.5687561035156,0,0,0,-10.0436096191406,0,0,0,0,-19.7637786865234,0,0,0,15.0711822509766,0,0,0,14.2338943481445,0,0,0,-13.5589904785156,0,0,0,0,-15.076301574707,0,0,0,15.238639831543,0,0,0,14.7363204956055,0,0,0,-23.1014556884766,0,0,0,0,-8.71563720703125,0,0,0,14.5687561035156,0,0,0,15.0711822509766,0,0,0,-7.19731140136719,0,0,0,0,-21.940299987793,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-10.7129592895508,0,0,0,0,-18.5921096801758,0,0,0,13.7315216064453,0,0,0,15.238639831543,0,0,0,-7.02996063232422,0,0,0,0,-21.2703094482422,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,-19.9205093383789,0,0,0,0,-8.37986755371094,0,0,0,15.4060974121094,0,0,0,14.7363204956055,0,0,0,0,-39.3525238037109,0,0,0,6.69830322265625,0,0,0,12.5593185424805,0,0,0,14.7362670898438,0,0,0,5.19123840332031,0,0,0,0,-37.8455123901367,0,0,0,14.0664367675781,0,0,0,13.731575012207,0,0,0,10.2149124145508,0,0,0,0,-34.1613388061523,0,0,0,14.9037246704102,0,0,0,13.7314682006836,0,0,0,5.35874938964844,0,0,0,0,-32.8217315673828,0,0,0,15.4060440063477,0,0,0,15.2386932373047,0,0,0,-13.893798828125,0,0,0,0,-14.5739822387695,0,0,0,15.238639831543,0,0,0,15.5735015869141,0,0,0,-26.2824020385742,0,0,0,0,-2.85520935058594,0,0,0,14.9037780761719,0,0,0,14.2338943481445,0,0,0,0,-37.5104904174805,0,0,0,15.0711288452148,0,0,0,14.9037780761719,0,0,0,7.53559112548828,0,0,0,0,-33.8264770507812,0,0,0,15.0712356567383,0,0,0,13.3608474731445,0,0,0,5.19123840332031,0,0,0,0,-33.5236129760742,0,0,0,9.04270935058594,0,0,0,3.34909820556641,0,0,0,8.54033660888672,0,0,0,12.7268295288086,0,0,0,0,-39.6874923706055,0,0,0,13.3966598510742,0,0,0,15.2385864257812,0,0,0,11.0522537231445,0,0,0,0,-40.3572692871094,0,0,0,14.9037246704102,0,0,0,15.5735549926758,0,0,0,9.87999725341797,0,0,0,0,-40.3572692871094,0,0,0,9.71248626708984,0,0,0,3.85152435302734,0,0,0,7.70304870605469,0,0,0,14.5688095092773,0,0,0,4.52140808105469,0,0,0,0,-0.167404174804688,0,0,0,0,-32.6543273925781,0,0,0,14.9037780761719,0,0,0,14.2338943481445,0,0,0,-0.166229248046875,0,0,0,0,-28.8039779663086,0,0,0,15.0712356567383,0,0,0,14.0664367675781,0,0,0,-4.18398284912109,0,0,0,0,-23.9488830566406,0,0,0,15.5735549926758,0,0,0,15.238639831543,0,0,0,-32.8109512329102,0,0,0,0,5.85023498535156,0,0,0,15.2386932373047,0,0,0,12.5593185424805,0,0,0,0,-40.3574295043945,0,0,0,14.9037246704102,0,0,0,15.0711288452148,0,0,0,10.3824234008789,0,0,0,0,-38.8502044677734,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,8.87530517578125,0,0,0,0,-32.9891891479492,0,0,0,15.4061508178711,0,0,0,15.0711822509766,0,0,0,-17.4092330932617,0,0,0,0,-9.71888732910156,0,0,0,14.7362670898438,0,0,0,14.9037246704102,0,0,0,0,-38.1803741455078,0,0,0,11.7220306396484,0,0,0,4.18649291992188,0,0,0,8.70779418945312,0,0,0,13.5640640258789,0,0,0,0,-34.9986801147461,0,0,0,14.7363204956055,0,0,0,15.0711822509766,0,0,0,5.19118499755859,0,0,0,0,-33.1565933227539,0,0,0,14.0663833618164,0,0,0,15.0711822509766,0,0,0,-1.00308990478516,0,0,0,0,-26.794807434082,0,0,0,15.5735549926758,0,0,0,14.5688095092773,0,0,0,-19.5857543945312,0,0,0,0,-8.71462249755859,0,0,0,14.7363204956055,0,0,0,14.2338409423828,0,0,0,-26.784294128418,0,0,0,0,-1.18111419677734,0,0,0,14.9037780761719,0,0,0,14.0664367675781,0,0,0,0,-38.682746887207,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,7.87061309814453,0,0,0,0,-32.1519012451172,0,0,0,15.5735397338867,0,0,0,15.0711441040039,0,0,0,-17.5768508911133,0,0,0,0,-10.8909301757812,0,0,0,14.4013519287109,0,0,0,13.731575012207,0,0,0,-17.7442016601562,0,0,0,0,-10.2212600708008,0,0,0,15.4061508178711,0,0,0,14.5688095092773,0,0,0,0,-40.3572692871094,0,0,0,14.736213684082,0,0,0,15.4061508178711,0,0,0,10.0475082397461,0,0,0,0,-32.3193588256836,0,0,0,15.2385864257812,0,0,0,15.4061508178711,0,0,0,-15.2331924438477,0,0,0,0,-13.5695037841797,0,0,0,14.5688095092773,0,0,0,15.0711288452148,0,0,0,-26.4494857788086,0,0,0,0,-10.8935470581055,0,0,0,10.5498275756836,0,0,0,13.2291488647461,0,0,0,14.4013519287109,0,0,0,-30.300048828125,0,0,0,0,1.32989501953125,0,0,0,14.9037246704102,0,0,0,14.2339477539062,0,0,0,0,-39.8548965454102,0,0,0,14.736213684082,0,0,0,14.4014053344727,0,0,0,10.71728515625,0,0,0,0,-38.1803741455078,0,0,0,14.9037246704102,0,0,0,15.4060974121094,0,0,0,7.87055969238281,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-32.6902008056641,0,0,0,0,-10.8983688354492,0,0,0,0,14.4012985229492,0,0,0,15.5735549926758,0,0,0,13.731575012207,0,0,0,0,-41.027099609375,0,0,0,15.9084167480469,0,0,0,14.0664901733398,0,0,0,11.0522003173828,0,0,0,0,-34.6637649536133,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,-7.86644744873047,0,0,0,0,-25.6128387451172,0,0,0,0,3.67184448242188,0,0,0,15.4060440063477,0,0,0,15.0712356567383,0,0,0,-10.5451278686523,0,0,0,0,-19.2623672485352,0,0,0,12.3919143676758,0,0,0,14.9037246704102,0,0,0,3.3502197265625,0,0,0,0,-30.4783401489258,0,0,0,15.238639831543,0,0,0,14.5688095092773,0,0,0,-17.0739440917969,0,0,0,0,-9.04948425292969,0,0,0,14.7362670898438,0,0,0,15.4061508178711,0,0,0,0,-39.1850662231445,0,0,0,14.5688095092773,0,0,0,15.4060440063477,0,0,0,9.04281616210938,0,0,0,0,-33.1566467285156,0,0,0,15.0711822509766,0,0,0,15.5735549926758,0,0,0,-32.1407470703125,0,0,0,0,6.35228729248047,0,0,0,14.7595748901367,0,0,0,13.5641174316406,0,0,0,0,-39.4288558959961,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,10.0474548339844,0,0,0,0,-36.8406600952148,0,0,0,15.2385864257812,0,0,0,14.9037246704102,0,0,0,3.18286895751953,0,0,0,0,-29.9760208129883,0,0,0,14.5687561035156,0,0,0,14.7363204956055,0,0,0,-13.2235946655273,0,0,0,0,-13.0672378540039,0,0,0,15.5735015869141,0,0,0,14.4014053344727,0,0,0,-40.3572692871094,0,0,0,14.736213684082,0,0,0,15.5736083984375,0,0,0,10.3824234008789,0,0,0,0,-33.4916152954102,0,0,0,15.2386932373047,0,0,0,15.5735015869141,0,0,0,-8.53665161132812,0,0,0,0,-32.1416015625,0,0,0,0,14.2199630737305,0,0,0,15.238639831543,0,0,0,14.0664901733398,0,0,0,0,-39.0176620483398,0,0,0,13.731575012207,0,0,0,15.0711288452148,0,0,0,10.0475616455078,0,0,0,0,-32.9891891479492,0,0,0,15.7410125732422,0,0,0,15.0711822509766,0,0,0,-26.1143035888672,0,0,0,0,-0.678955078125,0,0,0,15.4060974121094,0,0,0,13.731575012207,0,0,0,0,-39.1851196289062,0,0,0,15.7410125732422,0,0,0,15.0711822509766,0,0,0,8.20552825927734,0,0,0,0,-33.4917755126953,0,0,0,15.4060974121094,0,0,0,15.0711822509766,0,0,0,-24.2725372314453,0,0,0,0,-2.01824188232422,0,0,0,14.2338409423828,0,0,0,15.238639831543,0,0,0,-40.8595886230469,0,0,0,15.5735015869141,0,0,0,14.9037780761719,0,0,0,10.3823699951172,0,0,0,0,-34.6637115478516,0,0,0,15.7410125732422,0,0,0,11.0521469116211,0,0,0,3.01423645019531,0,0,0,0.0016021728515625,0,0,0,0,-28.6367874145508,0,0,0,14.5688095092773,0,0,0,14.0663833618164,0,0,0,-5.02052307128906,0,0,0,0,-21.7726821899414,0,0,0,14.4014053344727,0,0,0,15.2385864257812,0,0,0,-29.797248840332,0,0,0,0,3.00404357910156,0,0,0,15.0712356567383,0,0,0,13.7315216064453,0,0,0,0,-33.4915084838867,0,0,0,14.9036712646484,0,0,0,15.0711822509766,0,0,0,-21.7613677978516,0,0,0,0,-5.03183746337891,0,0,0,14.4013519287109,0,0,0,14.7362670898438,0,0,0,-39.687385559082,0,0,0,15.4060974121094,0,0,0,14.5687561035156,0,0,0,10.8847961425781,0,0,0,0,-33.8264770507812,0,0,0,14.9037246704102,0,0,0,14.7363204956055,0,0,0,-18.0783157348633,0,0,0,0,-7.54268646240234,0,0,0,15.4060974121094,0,0,0,14.4013519287109,0,0,0,0,-36.6732025146484,0,0,0,15.4060974121094,0,0,0,14.9036712646484,0,0,0,6.19603729248047,0,0,0,0,-32.48681640625,0,0,0,14.9036712646484,0,0,0,14.7363204956055,0,0,0,-25.6118774414062,0,0,0,0,-0.1766357421875,0,0,0,15.0712356567383,0,0,0,13.5641174316406,0,0,0,0,-32.9891891479492,0,0,0,15.5735549926758,0,0,0,15.5735015869141,0,0,0,-32.6431198120117,0,0,0,0,4.84522247314453,0,0,0,9.87999725341797,0,0,0,8.03791046142578,0,0,0,3.18169403076172,0,0,0,8.70784759521484,0,0,0,0,-37.0081176757812,0,0,0,15.2385864257812,0,0,0,14.5688629150391,0,0,0,7.03327178955078,0,0,0,0,-33.826530456543,0,0,0,11.8895416259766,0,0,0,14.9036712646484,0,0,0,7.0333251953125,0,0,0,0,-33.324104309082,0,0,0,15.2385864257812,0,0,0,14.7362670898438,0,0,0,-2.34248352050781,0,0,0,0,-27.6324157714844,0,0,0,14.9037780761719,0,0,0,14.9037246704102,0,0,0,-23.6028137207031,0,0,0,0,-5.36750030517578,0,0,0,14.9037246704102,0,0,0,13.5640106201172,0,0,0,-0.333419799804688,0,0,0,0,-32.6557159423828,0,0,0,7.70310211181641,0,0,0,13.0616912841797,0,0,0,12.5592651367188,0,0,0,-2.67718505859375,0,0,0,0,-27.8000335693359,0,0,0,12.0569458007812,0,0,0,13.0616912841797,0,0,0,9.21016693115234,0,0,0,0,-37.5105438232422,0,0,0,15.2386932373047,0,0,0,10.8847351074219,0,0,0,6.53079986572266,0,0,0,4.8563232421875,0,0,0,0,-38.3477783203125,0,0,0,13.89892578125,0,0,0,14.2339477539062,0,0,0,10.0475082397461,0,0,0,0,-32.9892425537109,0,0,0,14.0664901733398,0,0,0,12.5592651367188,0,0,0,6.53089904785156,0,0,0,0,-39.6255187988281,0,0,0,13.3966064453125,0,0,0,14.4012985229492,0,0,0,11.5546798706055,0,0,0,0,-32.6142425537109,0,0,0,15.0712356567383,0,0,0,15.0711288452148,0,0,0,-29.9644393920898,0,0,0,0,3.841064453125,0,0,0,14.0664901733398,0,0,0,14.7362670898438,0,0,0,0,-41.3620300292969,0,0,0,9.37763977050781,0,0,0,12.5592651367188,0,0,0,14.9037780761719,0,0,0,-11.2146377563477,0,0,0,0,-15.0762481689453,0,0,0,14.0664367675781,0,0,0,10.5498809814453,0,0,0,6.19593048095703,0,0,0,0,-38.8501510620117,0,0,0,14.0663833618164,0,0,0,12.5593719482422,0,0,0,12.2244033813477,0,0,0,0,-32.8216781616211,0,0,0,11.5545196533203,0,0,0,12.056999206543,0,0,0,8.70779418945312,0,0,0,-23.2690200805664,0,0,0,0,-6.37096405029297,0,0,0,15.4060974121094,0,0,0,14.7362670898438,0,0,0,0,-38.0128631591797,0,0,0,15.5735549926758,0,0,0,15.5735015869141,0,0,0,5.1917724609375,0,0,0,0,-34.6642990112305,0,0,0,9.71253967285156,0,0,0,13.0616912841797,0,0,0,9.54508209228516,0,0,0,3.85163116455078,0,0,0,0,-34.663818359375,0,0,0,15.5735549926758,0,0,0,14.9037246704102,0,0,0,-4.68587493896484,0,0,0,0,-22.7771606445312,0,0,0,15.0711822509766,0,0,0,13.3966598510742,0,0,0,3.18174743652344,0,0,0,0,-34.8312225341797,0,0,0,14.2338409423828,0,0,0,13.5641174316406,0,0,0,7.03327178955078,0,0,0,0,-32.3194122314453,0,0,0,14.5688629150391,0,0,0,15.0711822509766,0,0,0,-28.792610168457,0,0,0,0,2.83663940429688,0,0,0,15.4060974121094,0,0,0,13.3966598510742,0,0,0,0,-39.1852798461914,0,0,0,15.0712356567383,0,0,0,14.7362670898438,0,0,0,9.37762451171875,0,0,0,0,-35.8359146118164,0,0,0,15.2385864257812,0,0,0,14.9037246704102,0,0,0,0.504081726074219,0,0,0,0,-26.7948608398438,0,0,0,14.5688095092773,0,0,0,15.5735549926758,0,0,0,-28.960334777832,0,0,0,0,2.33458709716797,0,0,0,3.68401336669922,0,0,0,8.37287902832031,0,0,0,10.7173385620117,0,0,0,5.69355773925781,0,0,0,0,-34.3288497924805,0,0,0,11.0522537231445,0,0,0,10.7172317504883,0,0,0,10.0475082397461,0,0,0,-9.87604522705078,0,0,0,0,-19.4290771484375,0,0,0,14.7363204956055,0,0,0,14.4012985229492,0,0,0,-29.9644393920898,0,0,0,0,4.67835235595703,0,0,0,15.2386932373047,0,0,0,12.5593719482422,0,0,0,0,-32.6543273925781,0,0,0,14.9037246704102,0,0,0,15.4061508178711,0,0,0,-33.8148422241211,0,0,0,0,7.02163696289062,0,0,0,15.2385864257812,0,0,0,14.0664901733398,0,0,0,0,-36.6732025146484,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-0.500236511230469,0,0,0,0,-24.7858505249023,0,0,0,14.5687561035156,0,0,0,14.5688095092773,0,0,0,-30.634162902832,0,0,0,0,4.67829895019531,0,0,0,14.2338409423828,0,0,0,14.0664901733398,0,0,0,0,-37.6780014038086,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,7.70310211181641,0,0,0,0,-32.8217315673828,0,0,0,15.2385864257812,0,0,0,15.238639831543,0,0,0,-30.2993011474609,0,0,0,0,4.51084136962891,0,0,0,14.2339477539062,0,0,0,14.0664367675781,0,0,0,0,-38.6826934814453,0,0,0,13.7314682006836,0,0,0,12.5593185424805,0,0,0,12.3919143676758,0,0,0,0,-41.0271530151367,0,0,0,4.68881225585938,0,0,0,10.3824234008789,0,0,0,14.5687561035156,0,0,0,11.2197647094727,0,0,0,0,-33.4916152954102,0,0,0,13.3966064453125,0,0,0,14.4013519287109,0,0,0,5.69366455078125,0,0,0,0,-32.9891891479492,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,-14.2281799316406,0,0,0,0,-12.5650253295898,0,0,0,15.4060974121094,0,0,0,14.7363739013672,0,0,0,0,-32.9891891479492,0,0,0,15.238639831543,0,0,0,15.2385864257812,0,0,0,-3.84938812255859,0,0,0,0,-30.4795150756836,0,0,0,14.9037246704102,0,0,0,13.7314682006836,0,0,0,8.37293243408203,0,0,0,0,-36.8407135009766,0,0,0,15.0711822509766,0,0,0,15.4060974121094,0,0,0,2.01093292236328,0,0,0,0,-27.7993927001953,0,0,0,14.5688095092773,0,0,0,12.9176483154297,0,0,0,-7.86650085449219,0,0,0,0,-17.998291015625,0,0,0,12.3918304443359,0,0,0,4.52138519287109,0,0,0,12.7267227172852,0,0,0,-39.5199279785156,0,0,0,14.5688095092773,0,0,0,14.736213684082,0,0,0,11.2197113037109,0,0,0,0,-34.4962539672852,0,0,0,14.7362670898438,0,0,0,14.5688095092773,0,0,0,-1.33757781982422,0,0,0,0,-25.1207656860352,0,0,0,14.7363204956055,0,0,0,15.4060440063477,0,0,0,-34.3173217773438,0,0,0,0,8.0264892578125,0,0,0,15.0711822509766,0,0,0,12.7268295288086,0,0,0,0,-34.3288497924805,0,0,0,15.0712356567383,0,0,0,14.9036712646484,0,0,0,-13.8931045532227,0,0,0,0,-12.3977279663086,0,0,0,15.0712356567383,0,0,0,15.0711288452148,0,0,0,-40.0223007202148,0,0,0,15.0711822509766,0,0,0,14.9036712646484,0,0,0,10.5498809814453,0,0,0,0,-36.8406600952148,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,3.85248565673828,0,0,0,0,-30.4782333374023,0,0,0,14.9036712646484,0,0,0,14.9037780761719,0,0,0,-19.919921875,0,0,0,0,-6.37091064453125,0,0,0,15.0711288452148,0,0,0,14.7362670898438,0,0,0,-40.3572158813477,0,0,0,14.4012985229492,0,0,0,15.2386932373047,0,0,0,10.7173385620117,0,0,0,0,-32.6542739868164,0,0,0,14.9037246704102,0,0,0,14.736213684082,0,0,0,-16.404541015625,0,0,0,0,-10.8910369873047,0,0,0,14.5688629150391,0,0,0,7.20062255859375,0,0,0,8.70784759521484,0,0,0,0,-40.5247268676758,0,0,0,15.0711288452148,0,0,0,14.5688629150391,0,0,0,10.8847427368164,0,0,0,0,-36.3383407592773,0,0,0,14.9037246704102,0,0,0,12.0569458007812,0,0,0,9.21027374267578,0,0,0,0,-32.9891891479492,0,0,0,15.4060974121094,0,0,0,15.0711288452148,0,0,0,-26.7837600708008,0,0,0,0,0.827842712402344,0,0,0,15.238639831543,0,0,0,13.2292556762695,0,0,0,0,-32.8219451904297,0,0,0,15.0712356567383,0,0,0,15.7409591674805,0,0,0,-23.9380493164062,0,0,0,0,-3.19001770019531,0,0,0,15.0711288452148,0,0,0,14.2338943481445,0,0,0,-40.5246734619141,0,0,0,14.0664367675781,0,0,0,14.9037246704102,0,0,0,11.3871688842773,0,0,0,0,-33.4915618896484,0,0,0,14.0663833618164,0,0,0,14.4014053344727,0,0,0,-8.03374481201172,0,0,0,0,-17.9222259521484,0,0,0,3.01428985595703,0,0,0,11.3870620727539,0,0,0,15.0712356567383,0,0,0,-34.4847259521484,0,0,0,0,7.18914794921875,0,0,0,13.5640106201172,0,0,0,15.0712356567383,0,0,0,-38.33544921875,0,0,0,0,10.2025833129883,0,0,0,13.5640640258789,0,0,0,14.7363204956055,0,0,0,0,-33.324104309082,0,0,0,14.736213684082,0,0,0,15.238639831543,0,0,0,-19.919921875,0,0,0,0,-5.86853790283203,0,0,0,14.7362670898438,0,0,0,14.5688629150391,0,0,0,0,-39.6874389648438,0,0,0,15.5735015869141,0,0,0,15.0712356567383,0,0,0,8.87530517578125,0,0,0,0,-32.6543273925781,0,0,0,15.0711822509766,0,0,0,15.0712356567383,0,0,0,-26.6164093017578,0,0,0,0,0.158119201660156,0,0,0,15.5735549926758,0,0,0,13.5640640258789,0,0,0,0,-38.6826934814453,0,0,0,15.2385864257812,0,0,0,14.0664901733398,0,0,0,9.21022033691406,0,0,0,0,-32.9891891479492,0,0,0,15.0711822509766,0,0,0,14.5687561035156,0,0,0,-16.9066467285156,0,0,0,0,-10.0539627075195,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,0,-40.5247268676758,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,9.87999725341797,0,0,0,0,-34.831169128418,0,0,0,15.0711822509766,0,0,0,13.3966064453125,0,0,0,6.36338806152344,0,0,0,0,-34.4963073730469,0,0,0,8.03801727294922,0,0,0,8.37282562255859,0,0,0,12.2244033813477,0,0,0,-0.835098266601562,0,0,0,0,-25.6231918334961,0,0,0,14.5688095092773,0,0,0,14.7363204956055,0,0,0,-21.0919647216797,0,0,0,0,-6.87344360351562,0,0,0,14.2338409423828,0,0,0,15.0712356567383,0,0,0,-30.8018341064453,0,0,0,0,3.67366027832031,0,0,0,13.8632202148438,0,0,0,13.0617446899414,0,0,0,1.84203338623047,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43.6668853759766,0,0,0,0,6.86570739746094,0,0,0,12.5593185424805,0,0,0,13.5641174316406,0,0,0,10.71728515625,0,0,0,0,-33.1566467285156,0,0,0,15.0711822509766,0,0,0,13.8990325927734,0,0,0,-12.2191696166992,0,0,0,0,-14.4065780639648,0,0,0,15.5735549926758,0,0,0,9.87994384765625,0,0,0,5.35869598388672,0,0,0,0,-28.2913055419922,0,0,0,0,-1.68359375,0,0,0,15.2385864257812,0,0,0,14.5689163208008,0,0,0,0,-33.324104309082,0,0,0,15.4060440063477,0,0,0,15.4060974121094,0,0,0,-29.7970352172852,0,0,0,0,3.84111785888672,0,0,0,14.7362670898438,0,0,0,13.8990325927734,0,0,0,0,-39.1850662231445,0,0,0,14.7362670898438,0,0,0,15.4060974121094,0,0,0,8.87530517578125,0,0,0,0,-33.1566467285156,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,-30.1318969726562,0,0,0,0,4.17596435546875,0,0,0,14.7362823486328,0,0,0,13.8989791870117,0,0,0,0,-33.8264770507812,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-25.2769622802734,0,0,0,0,-0.846359252929688,0,0,0,15.5735015869141,0,0,0,13.731575012207,0,0,0,0,-36.0034255981445,0,0,0,14.5688629150391,0,0,0,15.238639831543,0,0,0,-0.500236511230469,0,0,0,0,-25.2882232666016,0,0,0,15.4060440063477,0,0,0,15.238639831543,0,0,0,-41.8505630493164,0,0,0,0,15.7271881103516,0,0,0,14.9037780761719,0,0,0,12.5593185424805,0,0,0,0,-36.6732559204102,0,0,0,14.9037246704102,0,0,0,14.9037246704102,0,0,0,3.8525390625,0,0,0,0,-30.8132019042969,0,0,0,15.2386932373047,0,0,0,14.736213684082,0,0,0,3.85157775878906,0,0,0,0,-41.027099609375,0,0,0,12.0568923950195,0,0,0,14.9037780761719,0,0,0,14.0664367675781,0,0,0,0,-36.3383407592773,0,0,0,14.0664367675781,0,0,0,14.9037246704102,0,0,0,7.36818695068359,0,0,0,0,-33.6590194702148,0,0,0,14.4013900756836,0,0,0,12.3918762207031,0,0,0,6.86576080322266,0,0,0,0,-37.0081481933594,0,0,0,12.726806640625,0,0,0,15.5735015869141,0,0,0,8.54044342041016,0,0,0,0,-33.6590728759766,0,0,0,15.0712356567383,0,0,0,15.4060974121094,0,0,0,-23.2681121826172,0,0,0,0,-3.02293395996094,0,0,0,14.7362670898438,0,0,0,14.9037780761719,0,0,0,0,-35.8359680175781,0,0,0,14.9037246704102,0,0,0,14.9037780761719,0,0,0,1.17375183105469,0,0,0,0,-27.7995529174805,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,-30.6341094970703,0,0,0,0,4.17581939697266,0,0,0,5.358642578125,0,0,0,5.86106872558594,0,0,0,14.736213684082,0,0,0,-24.1051864624023,0,0,0,0,-3.52525329589844,0,0,0,14.7362670898438,0,0,0,15.4060974121094,0,0,0,-40.5247268676758,0,0,0,15.2385864257812,0,0,0,14.4013519287109,0,0,0,11.2197647094727,0,0,0,0,-32.9891891479492,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-31.8059921264648,0,0,0,0,5.68256378173828,0,0,0,15.0711822509766,0,0,0,13.5641174316406,0,0,0,0,-33.8264236450195,0,0,0,15.238639831543,0,0,0,15.0711288452148,0,0,0,-19.2503051757812,0,0,0,0,-7.37538909912109,0,0,0,15.5735015869141,0,0,0,14.4014587402344,0,0,0,0,-32.9892425537109,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,-26.9512176513672,0,0,0,0,0.158012390136719,0,0,0,15.4060974121094,0,0,0,13.8990325927734,0,0,0,0,-39.1850662231445,0,0,0,15.4060974121094,0,0,0,14.0664367675781,0,0,0,9.54513549804688,0,0,0,0,-32.9892425537109,0,0,0,14.4014053344727,0,0,0,15.0711288452148,0,0,0,-23.1005477905273,0,0,0,0,-3.19023132324219,0,0,0,14.5687561035156,0,0,0,15.0712356567383,0,0,0,-40.6921844482422,0,0,0,15.5735015869141,0,0,0,15.4060974121094,0,0,0,10.0475082397461,0,0,0,0,-37.008171081543,0,0,0,15.238639831543,0,0,0,4.52135467529297,0,0,0,8.20547485351562,0,0,0,8.73120880126953,0,0,0,0,-33.4004364013672,0,0,0,14.736213684082,0,0,0,14.4013519287109,0,0,0,-8.87092590332031,0,0,0,0,-18.9269714355469,0,0,0,15.4060440063477,0,0,0,15.0711822509766,0,0,0,-28.2906646728516,0,0,0,0,0.827682495117188,0,0,0,15.0711288452148,0,0,0,14.0665435791016,0,0,0,0,-33.1566467285156,0,0,0,15.238639831543,0,0,0,14.5687561035156,0,0,0,3.34925842285156,0,0,0,0,-39.8551635742188,0,0,0,14.9037246704102,0,0,0,15.0712356567383,0,0,0,9.88005065917969,0,0,0,0,-35.501106262207,0,0,0,14.4013519287109,0,0,0,14.5688629150391,0,0,0,6.53089904785156,0,0,0,0,-33.4916152954102,0,0,0,15.238639831543,0,0,0,13.8989791870117,0,0,0,-6.19245910644531,0,0,0,0,-20.6006927490234,0,0,0,15.238639831543,0,0,0,12.7267227172852,0,0,0,2.67937469482422,0,0,0,-21.4275207519531,0,0,0,0,-8.04505920410156,0,0,0,14.7362670898438,0,0,0,14.9037780761719,0,0,0,-40.3572692871094,0,0,0,14.9037246704102,0,0,0,14.7362670898438,0,0,0,11.2196578979492,0,0,0,0,-33.8264770507812,0,0,0,15.2386932373047,0,0,0,15.0711288452148,0,0,0,-24.1050262451172,0,0,0,0,-1.68343353271484,0,0,0,15.238639831543,0,0,0,14.0664901733398,0,0,0,0,-39.1851196289062,0,0,0,14.7363204956055,0,0,0,14.9037246704102,0,0,0,9.54508209228516,0,0,0,0,-36.3383407592773,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-2.67654418945312,0,0,0,0,-23.4468307495117,0,0,0,13.0616912841797,0,0,0,14.4014053344727,0,0,0,-13.2234878540039,0,0,0,0,-13.4023132324219,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,-40.189811706543,0,0,0,14.9037246704102,0,0,0,15.2385864257812,0,0,0,10.549934387207,0,0,0,0,-33.6590194702148,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,-13.5582962036133,0,0,0,0,-12.3976745605469,0,0,0,14.9037780761719,0,0,0,14.9037246704102,0,0,0,-40.189811706543,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,11.2197113037109,0,0,0,0,-34.6637649536133,0,0,0,14.2339477539062,0,0,0,14.4013519287109,0,0,0,6.02847290039062,0,0,0,0,-25.7802429199219,0,0,0,0,-4.52962493896484,0,0,0,14.4013519287109,0,0,0,11.7220306396484,0,0,0,4.01908874511719,0,0,0,0,-39.1851348876953,0,0,0,7.20063781738281,0,0,0,3.01423645019531,0,0,0,11.7220306396484,0,0,0,14.7362670898438,0,0,0,-21.0920181274414,0,0,0,0,-6.20355987548828,0,0,0,13.731575012207,0,0,0,15.2385864257812,0,0,0,-38.6699905395508,0,0,0,0,12.0442962646484,0,0,0,15.4060440063477,0,0,0,12.2244567871094,0,0,0,0,-35.3337020874023,0,0,0,15.5735015869141,0,0,0,15.4060974121094,0,0,0,-14.5627212524414,0,0,0,0,-11.5606002807617,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,-40.3572692871094,0,0,0,15.0711288452148,0,0,0,14.9037780761719,0,0,0,10.8847427368164,0,0,0,0,-37.1756286621094,0,0,0,15.4061508178711,0,0,0,13.5640640258789,0,0,0,8.20542144775391,0,0,0,0,-15.5685882568359,0,0,0,0,-19.2626342773438,0,0,0,14.4014053344727,0,0,0,14.9037246704102,0,0,0,2.01061248779297,0,0,0,0,-30.6459045410156,0,0,0,15.0711822509766,0,0,0,13.5641174316406,0,0,0,-2.17449188232422,0,0,0,0,-24.2838516235352,0,0,0,14.9037780761719,0,0,0,15.2385864257812,0,0,0,-36.6608734130859,0,0,0,0,10.0351791381836,0,0,0,14.9036712646484,0,0,0,13.5641174316406,0,0,0,0,-38.3478317260742,0,0,0,15.0711822509766,0,0,0,14.2339477539062,0,0,0,8.87530517578125,0,0,0,0,-33.1566467285156,0,0,0,14.5687561035156,0,0,0,15.4061508178711,0,0,0,-15.7349243164062,0,0,0,0,-11.5607070922852,0,0,0,15.0712356567383,0,0,0,14.2338409423828,0,0,0,-35.656608581543,0,0,0,0,8.361083984375,0,0,0,15.2385864257812,0,0,0,13.2292556762695,0,0,0,0,-32.8217315673828,0,0,0,14.9036712646484,0,0,0,15.0712356567383,0,0,0,-27.7881317138672,0,0,0,0,1.83221435546875,0,0,0,13.2910690307617,0,0,0,14.7362670898438,0,0,0,-39.6473541259766,0,0,0,15.238639831543,0,0,0,15.0711288452148,0,0,0,10.0475616455078,0,0,0,0,-32.9892425537109,0,0,0,14.5688095092773,0,0,0,14.5688629150391,0,0,0,-13.0562438964844,0,0,0,0,-14.2393341064453,0,0,0,15.2385864257812,0,0,0,15.4060974121094,0,0,0,-15.5683212280273,0,0,0,0,-24.2865219116211,0,0,0,11.2196578979492,0,0,0,15.238639831543,0,0,0,14.0664367675781,0,0,0,0,-39.6874923706055,0,0,0,14.2339477539062,0,0,0,14.2338409423828,0,0,0,11.2197113037109,0,0,0,0,-33.3240509033203,0,0,0,15.4060440063477,0,0,0,14.0664367675781,0,0,0,-12.0518188476562,0,0,0,0,-14.4064178466797,0,0,0,15.4060440063477,0,0,0,14.5688095092773,0,0,0,-42.8692398071289,0,0,0,0,15.0711288452148,0,0,0,15.2386932373047,0,0,0,12.7268295288086,0,0,0,0,-32.9892425537109,0,0,0,15.238639831543,0,0,0,15.4061508178711,0,0,0,-25.4446334838867,0,0,0,0,-1.51602935791016,0,0,0,14.7362670898438,0,0,0,14.7362670898438,0,0,0,0,-33.6590194702148,0,0,0,14.2339477539062,0,0,0,15.0711288452148,0,0,0,-13.2234878540039,0,0,0,0,-12.5649185180664,0,0,0,15.4060974121094,0,0,0,4.68875885009766,0,0,0,9.21016693115234,0,0,0,-39.687385559082,0,0,0,15.238639831543,0,0,0,14.5687561035156,0,0,0,10.7173385620117,0,0,0,0,-38.3477783203125,0,0,0,14.9036712646484,0,0,0,14.0664367675781,0,0,0,9.21027374267578,0,0,0,0,-33.324104309082,0,0,0,15.2385864257812,0,0,0,15.238639831543,0,0,0,-26.1140365600586,0,0,0,0,0.493034362792969,0,0,0,14.4013519287109,0,0,0,14.2339477539062,0,0,0,0,-40.5247268676758,0,0,0,15.7409591674805,0,0,0,15.238639831543,0,0,0,9.37773132324219,0,0,0,0,-32.8217849731445,0,0,0,15.5735549926758,0,0,0,15.238639831543,0,0,0,-27.2861328125,0,0,0,0,0.492927551269531,0,0,0,15.0711822509766,0,0,0,13.8990325927734,0,0,0,0,-38.1803741455078,0,0,0,15.5736083984375,0,0,0,15.4060440063477,0,0,0,7.0333251953125,0,0,0,0,-32.3193588256836,0,0,0,15.4060974121094,0,0,0,15.2385864257812,0,0,0,-28.2906646728516,0,0,0,0,0.995140075683594,0,0,0,15.5735015869141,0,0,0,13.3967132568359,0,0,0,0,-32.3193588256836,0,0,0,14.9037246704102,0,0,0,14.4012985229492,0,0,0,-16.0697326660156,0,0,0,0,-10.8909301757812,0,0,0,15.4060974121094,0,0,0,14.7363204956055,0,0,0,0,-36.1708831787109,0,0,0,14.4013519287109,0,0,0,14.7362670898438,0,0,0,7.03321838378906,0,0,0,-4.85466766357422,0,0,0,0,-30.3113632202148,0,0,0,15.4060440063477,0,0,0,14.5688629150391,0,0,0,1.17348480224609,0,0,0,0,-28.6365737915039,0,0,0,13.8990325927734,0,0,0,14.5687561035156,0,0,0,-14.0605621337891,0,0,0,0,-12.7325897216797,0,0,0,15.2385864257812,0,0,0,14.2339477539062,0,0,0,-41.1809463500977,0,0,0,0,15.7272415161133,0,0,0,15.2385864257812,0,0,0,11.5546798706055,0,0,0,0,-32.4868698120117,0,0,0,14.9037780761719,0,0,0,14.736213684082,0,0,0,-25.6118240356445,0,0,0,0,0.158279418945312,0,0,0,15.4060974121094,0,0,0,13.0617446899414,0,0,0,0,-33.6589660644531,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,-19.0827407836914,0,0,0,0,-6.37075042724609,0,0,0,15.0711822509766,0,0,0,14.4013519287109,0,0,0,0,-36.8407135009766,0,0,0,15.238639831543,0,0,0,6.36338806152344,0,0,0,6.69830322265625,0,0,0,8.37298583984375,0,0,0,0,-32.3194122314453,0,0,0,14.7362670898438,0,0,0,13.8989791870117,0,0,0,-12.721435546875,0,0,0,0,-13.9042587280273,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,-40.6922149658203,0,0,0,10.2148895263672,0,0,0,7.70304870605469,0,0,0,7.20072937011719,0,0,0,11.554573059082,0,0,0,4.52135467529297,0,0,0,0,-36.3383407592773,0,0,0,14.5688095092773,0,0,0,14.5688629150391,0,0,0,7.20067596435547,0,0,0,0,-33.1332855224609,0,0,0,13.731575012207,0,0,0,14.736213684082,0,0,0,4.68886566162109,0,0,0,0,-33.7352981567383,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,-11.7169036865234,0,0,0,0,-14.4064712524414,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,-40.5246734619141,0,0,0,10.3823165893555,0,0,0,13.5640640258789,0,0,0,14.9037246704102,0,0,0,-40.3438186645508,0,0,0,0,10.8713455200195,0,0,0,14.736213684082,0,0,0,14.0664367675781,0,0,0,-20.2551040649414,0,0,0,0,-8.045166015625,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,0,-37.3430862426758,0,0,0,15.5735549926758,0,0,0,15.4060974121094,0,0,0,6.19603729248047,0,0,0,0,-33.3241577148438,0,0,0,15.2386932373047,0,0,0,15.2385864257812,0,0,0,-23.4355697631836,0,0,0,0,-14.0748672485352,0,0,0,13.061637878418,0,0,0,15.238639831543,0,0,0,12.2244567871094,0,0,0,0,-35.3335418701172,0,0,0,14.5687561035156,0,0,0,14.0664367675781,0,0,0,6.53095245361328,0,0,0,0,-33.1566467285156,0,0,0,15.238639831543,0,0,0,14.4012985229492,0,0,0,3.68412017822266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-40.9851760864258,0,0,0,15.2385864257812,0,0,0,14.9037780761719,0,0,0,10.71728515625,0,0,0,0,-37.5104904174805,0,0,0,15.238639831543,0,0,0,13.061637878418,0,0,0,9.04281616210938,0,0,0,0,-32.9891891479492,0,0,0,15.4060974121094,0,0,0,15.2385864257812,0,0,0,-24.1053466796875,0,0,0,0,-2.85531616210938,0,0,0,14.7363204956055,0,0,0,14.7362670898438,0,0,0,0,-26.2824554443359,0,0,0,0,-12.5677490234375,0,0,0,12.7267761230469,0,0,0,15.238639831543,0,0,0,10.8847961425781,0,0,0,0,-36.8407135009766,0,0,0,13.7315216064453,0,0,0,14.4014053344727,0,0,0,8.54039001464844,0,0,0,0,-32.9892425537109,0,0,0,15.4061508178711,0,0,0,13.061637878418,0,0,0,4.52146148681641,0,0,0,0,-33.6590728759766,0,0,0,13.8989791870117,0,0,0,13.8989791870117,0,0,0,1.00640106201172,0,0,0,0,-27.7995529174805,0,0,0,14.9037246704102,0,0,0,14.9037246704102,0,0,0,-27.6207275390625,0,0,0,0,0.4925537109375,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,0,-33.4915618896484,0,0,0,15.0711822509766,0,0,0,13.8990325927734,0,0,0,-13.3908920288086,0,0,0,0,-12.3976211547852,0,0,0,14.2339477539062,0,0,0,14.4013519287109,0,0,0,-39.1720428466797,0,0,0,0,13.2160720825195,0,0,0,15.0712356567383,0,0,0,12.5593185424805,0,0,0,0,-35.66845703125,0,0,0,15.7409591674805,0,0,0,13.8989791870117,0,0,0,1.67601776123047,0,0,0,0,-27.966796875,0,0,0,14.4012985229492,0,0,0,15.0711822509766,0,0,0,-28.1229400634766,0,0,0,0,2.33453369140625,0,0,0,15.238639831543,0,0,0,13.2292022705078,0,0,0,0,-32.8217315673828,0,0,0,15.5735015869141,0,0,0,15.238639831543,0,0,0,-31.4712371826172,0,0,0,0,-6.37416839599609,0,0,0,10.5498275756836,0,0,0,15.238639831543,0,0,0,14.0664901733398,0,0,0,-40.6921844482422,0,0,0,14.0663833618164,0,0,0,14.2339477539062,0,0,0,12.5593185424805,0,0,0,0,-39.0176086425781,0,0,0,15.0711288452148,0,0,0,14.9037780761719,0,0,0,9.04270935058594,0,0,0,0,-33.6589660644531,0,0,0,15.5735015869141,0,0,0,14.9037780761719,0,0,0,-24.272590637207,0,0,0,0,-2.1859130859375,0,0,0,15.4060974121094,0,0,0,14.0665435791016,0,0,0,0,-32.6542739868164,0,0,0,14.9037246704102,0,0,0,15.0711822509766,0,0,0,-27.4533767700195,0,0,0,0,0.660118103027344,0,0,0,15.0712356567383,0,0,0,14.4014053344727,0,0,0,0,-32.6543273925781,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-24.2725372314453,0,0,0,0,-2.68807220458984,0,0,0,14.736213684082,0,0,0,9.04270935058594,0,0,0,6.36344146728516,0,0,0,0,-40.8596420288086,0,0,0,15.5735549926758,0,0,0,14.9037246704102,0,0,0,10.3823699951172,0,0,0,0,-35.1660842895508,0,0,0,15.238639831543,0,0,0,12.5235595703125,0,0,0,7.53559112548828,0,0,0,0,-34.6958160400391,0,0,0,9.37762451171875,0,0,0,3.34915161132812,0,0,0,6.53084564208984,0,0,0,13.8989791870117,0,0,0,1.33976745605469,0,0,0,0,-33.1566467285156,0,0,0,14.9037246704102,0,0,0,15.0711822509766,0,0,0,-0.835952758789062,0,0,0,0,-28.9714889526367,0,0,0,14.9036712646484,0,0,0,15.2386932373047,0,0,0,-6.69520568847656,0,0,0,0,-21.6051712036133,0,0,0,15.0711822509766,0,0,0,15.4060974121094,0,0,0,-26.9517517089844,0,0,0,0,-1.01365661621094,0,0,0,14.4013519287109,0,0,0,14.4014053344727,0,0,0,0,-38.6826934814453,0,0,0,13.5640640258789,0,0,0,14.2338409423828,0,0,0,10.7173919677734,0,0,0,0,-33.4916152954102,0,0,0,15.0712356567383,0,0,0,14.9036712646484,0,0,0,-0.668388366699219,0,0,0,0,-28.4692230224609,0,0,0,15.4061508178711,0,0,0,14.9037246704102,0,0,0,-8.70421600341797,0,0,0,0,-19.7636184692383,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,-24.2733917236328,0,0,0,0,-4.36190032958984,0,0,0,15.0712356567383,0,0,0,12.5593185424805,0,0,0,1.67457580566406,0,0,0,0,-8.87242126464844,0,0,0,0,-23.4468841552734,0,0,0,14.2338943481445,0,0,0,14.9036712646484,0,0,0,-0.333740234375,0,0,0,0,-30.4784469604492,0,0,0,13.3966598510742,0,0,0,14.9037246704102,0,0,0,5.52615356445312,0,0,0,0,-33.1566467285156,0,0,0,15.2385864257812,0,0,0,15.0712356567383,0,0,0,-7.69963073730469,0,0,0,0,-20.4332885742188,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-34.1502380371094,0,0,0,0,3.50534820556641,0,0,0,15.2386932373047,0,0,0,15.0711822509766,0,0,0,-24.6081466674805,0,0,0,0,-4.36200714111328,0,0,0,15.0711822509766,0,0,0,14.7362670898438,0,0,0,0,-38.6826934814453,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,7.87050628662109,0,0,0,0,-32.48681640625,0,0,0,14.5688095092773,0,0,0,14.9037246704102,0,0,0,-9.54102325439453,0,0,0,0,-23.7830276489258,0,0,0,3.18169403076172,0,0,0,14.9037780761719,0,0,0,14.0663833618164,0,0,0,4.01908874511719,0,0,0,0,-32.4868698120117,0,0,0,13.731575012207,0,0,0,14.7362670898438,0,0,0,-0.166069030761719,0,0,0,0,-28.6366271972656,0,0,0,14.7362670898438,0,0,0,14.4013519287109,0,0,0,-2.50983428955078,0,0,0,0,-25.2881164550781,0,0,0,14.2338943481445,0,0,0,14.5688095092773,0,0,0,-12.3870010375977,0,0,0,0,-15.411003112793,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,-37.4984817504883,0,0,0,0,9.53307342529297,0,0,0,14.5688095092773,0,0,0,13.5640640258789,0,0,0,0,-39.5200347900391,0,0,0,14.9037780761719,0,0,0,15.4060440063477,0,0,0,9.21022033691406,0,0,0,0,-33.3240509033203,0,0,0,14.4013519287109,0,0,0,15.2385864257812,0,0,0,3.51671600341797,0,0,0,0,-32.48681640625,0,0,0,15.4060974121094,0,0,0,14.736213684082,0,0,0,-13.8936920166016,0,0,0,0,-14.7414932250977,0,0,0,15.4060974121094,0,0,0,15.4060440063477,0,0,0,-26.1148910522461,0,0,0,0,-3.52503967285156,0,0,0,15.5735549926758,0,0,0,14.4013519287109,0,0,0,0,-39.1850662231445,0,0,0,15.4060974121094,0,0,0,15.5735015869141,0,0,0,8.20547485351562,0,0,0,0,-34.3287963867188,0,0,0,14.7362670898438,0,0,0,15.5735549926758,0,0,0,4.01898193359375,0,0,0,0,-14.8989715576172,0,0,0,0,-17.7552490234375,0,0,0,14.4013519287109,0,0,0,14.4013519287109,0,0,0,-0.835792541503906,0,0,0,0,-28.1344146728516,0,0,0,14.5688095092773,0,0,0,14.9037246704102,0,0,0,3.34920501708984,0,0,0,0,-42.199333190918,0,0,0,10.5498580932617,0,0,0,10.3823165893555,0,0,0,11.3871154785156,0,0,0,9.88005065917969,0,0,0,0,-39.3525238037109,0,0,0,14.5688095092773,0,0,0,13.8989791870117,0,0,0,10.8847427368164,0,0,0,0,-36.3384475708008,0,0,0,14.0664367675781,0,0,0,12.0569458007812,0,0,0,10.2149124145508,0,0,0,0,-33.6590194702148,0,0,0,14.0664367675781,0,0,0,14.5688095092773,0,0,0,4.85637664794922,0,0,0,0,-32.4868698120117,0,0,0,15.4060974121094,0,0,0,12.8942337036133,0,0,0,4.35395050048828,0,0,0,0,-38.5152359008789,0,0,0,14.9270858764648,0,0,0,14.4012985229492,0,0,0,2.51191711425781,0,0,0,6.53089904785156,0,0,0,0,-33.5678939819336,0,0,0,14.9036712646484,0,0,0,14.7363204956055,0,0,0,0.503494262695312,0,0,0,0,-29.97607421875,0,0,0,14.7363204956055,0,0,0,15.4060440063477,0,0,0,-2.50994110107422,0,0,0,0,-25.9578399658203,0,0,0,14.2339477539062,0,0,0,15.5735015869141,0,0,0,-15.7352981567383,0,0,0,0,-12.7324829101562,0,0,0,15.2386932373047,0,0,0,15.238639831543,0,0,0,0,-39.0176620483398,0,0,0,14.5688095092773,0,0,0,14.9037246704102,0,0,0,9.54513549804688,0,0,0,0,-34.6637649536133,0,0,0,13.2291488647461,0,0,0,15.238639831543,0,0,0,6.02857971191406,0,0,0,0,-33.6590728759766,0,0,0,15.0711822509766,0,0,0,14.9037780761719,0,0,0,-0.166175842285156,0,0,0,0,-28.3016586303711,0,0,0,15.0712356567383,0,0,0,14.9037246704102,0,0,0,-11.5501403808594,0,0,0,0,-17.4200134277344,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,-14.7309799194336,0,0,0,0,-13.5693435668945,0,0,0,14.0663833618164,0,0,0,14.2338943481445,0,0,0,-17.0745849609375,0,0,0,0,-11.5606536865234,0,0,0,14.0664367675781,0,0,0,14.7363204956055,0,0,0,-19.9205627441406,0,0,0,0,-9.04959106445312,0,0,0,14.2338409423828,0,0,0,13.3966064453125,0,0,0,-2.67745208740234,0,0,0,0,-28.4696502685547,0,0,0,2.6793212890625,0,0,0,11.0522003173828,0,0,0,13.5641174316406,0,0,0,6.69835662841797,0,0,0,0,-33.3241577148438,0,0,0,13.8989791870117,0,0,0,13.0616912841797,0,0,0,6.53089904785156,0,0,0,0,-37.0081176757812,0,0,0,14.9037246704102,0,0,0,14.5687561035156,0,0,0,7.53564453125,0,0,0,0,-38.8502044677734,0,0,0,11.3871154785156,0,0,0,11.7220306396484,0,0,0,11.8894882202148,0,0,0,3.68417358398438,0,0,0,0,-32.9891891479492,0,0,0,15.2385864257812,0,0,0,14.4014053344727,0,0,0,-3.51436614990234,0,0,0,0,-27.1305770874023,0,0,0,15.2386932373047,0,0,0,15.4060440063477,0,0,0,-4.68614196777344,0,0,0,0,-23.614128112793,0,0,0,15.5735015869141,0,0,0,14.0664901733398,0,0,0,-15.5678939819336,0,0,0,0,-12.3975143432617,0,0,0,14.7362670898438,0,0,0,14.7362670898438,0,0,0,-31.9739837646484,0,0,0,0,-1.85249328613281,0,0,0,4.85626983642578,0,0,0,14.2339477539062,0,0,0,14.5687561035156,0,0,0,-17.7445220947266,0,0,0,0,-12.5652923583984,0,0,0,14.9037246704102,0,0,0,13.731575012207,0,0,0,-4.51911163330078,0,0,0,0,-24.6185531616211,0,0,0,15.0712356567383,0,0,0,15.2385864257812,0,0,0,-14.731086730957,0,0,0,0,-14.4064712524414,0,0,0,15.2385864257812,0,0,0,14.5688095092773,0,0,0,-30.6346969604492,0,0,0,0,2.66934204101562,0,0,0,14.5688095092773,0,0,0,14.0664367675781,0,0,0,0,-39.5199813842773,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,8.54039001464844,0,0,0,0,-32.48681640625,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-5.02116394042969,0,0,0,0,-23.2792129516602,0,0,0,15.0712356567383,0,0,0,14.5688095092773,0,0,0,-21.4272003173828,0,0,0,0,-6.5382080078125,0,0,0,14.9036712646484,0,0,0,14.7363204956055,0,0,0,0,-37.3430862426758,0,0,0,13.7315216064453,0,0,0,14.5688629150391,0,0,0,8.87530517578125,0,0,0,0,-33.324104309082,0,0,0,15.2385864257812,0,0,0,14.4013519287109,0,0,0,-0.835739135742188,0,0,0,0,-27.2971267700195,0,0,0,14.4013519287109,0,0,0,15.0711822509766,0,0,0,-15.0655212402344,0,0,0,0,-13.4022598266602,0,0,0,14.2338943481445,0,0,0,14.5688629150391,0,0,0,2.17694854736328,0,0,0,0,-40.5247268676758,0,0,0,13.0616912841797,0,0,0,14.9037246704102,0,0,0,12.5593185424805,0,0,0,0,-36.8407135009766,0,0,0,14.2339477539062,0,0,0,14.736213684082,0,0,0,7.70315551757812,0,0,0,0,-33.1567001342773,0,0,0,13.7315216064453,0,0,0,15.0711822509766,0,0,0,1.00592041015625,0,0,0,0,-29.3062438964844,0,0,0,14.7363204956055,0,0,0,14.0664367675781,0,0,0,-1.17054748535156,0,0,0,0,-26.4599990844727,0,0,0,15.4060974121094,0,0,0,13.8989791870117,0,0,0,-4.85391998291016,0,0,0,0,-26.3988265991211,0,0,0,15.4060974121094,0,0,0,15.2385864257812,0,0,0,-5.48347473144531,0,0,0,0,-22.7767105102539,0,0,0,15.4060974121094,0,0,0,14.5687561035156,0,0,0,-23.2687530517578,0,0,0,0,-5.53394317626953,0,0,0,14.0664367675781,0,0,0,14.7363204956055,0,0,0,-25.2776565551758,0,0,0,0,-2.85526275634766,0,0,0,2.84677886962891,0,0,0,11.3871688842773,0,0,0,15.0711822509766,0,0,0,0,-40.8466186523438,0,0,0,0,12.7136993408203,0,0,0,13.2292022705078,0,0,0,14.9036712646484,0,0,0,-26.2824020385742,0,0,0,0,-2.68769836425781,0,0,0,14.9037246704102,0,0,0,14.0664367675781,0,0,0,0,-40.189811706543,0,0,0,14.4013519287109,0,0,0,14.5688095092773,0,0,0,11.0522537231445,0,0,0,0,-32.6543273925781,0,0,0,15.0712356567383,0,0,0,15.4060440063477,0,0,0,-13.8937454223633,0,0,0,0,-13.7366943359375,0,0,0,14.736213684082,0,0,0,14.9037780761719,0,0,0,-33.8155364990234,0,0,0,0,6.51990509033203,0,0,0,15.0712356567383,0,0,0,12.5593185424805,0,0,0,0,-39.0176086425781,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,8.03801727294922,0,0,0,0,-32.1519012451172,0,0,0,15.2385864257812,0,0,0,14.9037246704102,0,0,0,-12.8893737792969,0,0,0,0,-15.7458648681641,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,-36.1591949462891,0,0,0,0,7.52400970458984,0,0,0,14.4013519287109,0,0,0,14.4013519287109,0,0,0,0,-34.3287963867188,0,0,0,15.5735015869141,0,0,0,15.4060974121094,0,0,0,-2.84474945068359,0,0,0,0,-24.9531478881836,0,0,0,15.0711822509766,0,0,0,14.9036712646484,0,0,0,-19.9206695556641,0,0,0,0,-16.9199905395508,0,0,0,9.21022033691406,0,0,0,12.2244033813477,0,0,0,15.2385864257812,0,0,0,-19.0835952758789,0,0,0,0,-9.71904754638672,0,0,0,14.4013519287109,0,0,0,14.736213684082,0,0,0,-16.070426940918,0,0,0,0,-13.4020462036133,0,0,0,15.4060440063477,0,0,0,14.9037780761719,0,0,0,-29.4630813598633,0,0,0,0,1.66507720947266,0,0,0,14.2338943481445,0,0,0,13.731575012207,0,0,0,0,-32.9891357421875,0,0,0,14.736213684082,0,0,0,15.0712356567383,0,0,0,3.18169403076172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-13.9139633178711,0,0,0,0,-29.64453125,0,0,0,0,8.0379638671875,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,-12.386360168457,0,0,0,0,-13.9044723510742,0,0,0,14.7362670898438,0,0,0,15.0711288452148,0,0,0,1.17230987548828,0,0,0,0,-40.8596954345703,0,0,0,15.0711288452148,0,0,0,15.0712356567383,0,0,0,10.8847427368164,0,0,0,0,-35.8359146118164,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,2.51309204101562,0,0,0,0,-29.6412124633789,0,0,0,15.2385864257812,0,0,0,14.0664901733398,0,0,0,-9.54070281982422,0,0,0,0,-17.4199600219727,0,0,0,15.5735549926758,0,0,0,15.4060974121094,0,0,0,-40.8596420288086,0,0,0,15.4060974121094,0,0,0,14.9037246704102,0,0,0,10.5498809814453,0,0,0,0,-33.324104309082,0,0,0,14.9036712646484,0,0,0,15.5735549926758,0,0,0,-25.7792282104492,0,0,0,0,-0.511604309082031,0,0,0,15.0711822509766,0,0,0,14.0664901733398,0,0,0,-40.8596420288086,0,0,0,15.2385864257812,0,0,0,14.4014053344727,0,0,0,11.2197113037109,0,0,0,0,-32.8217849731445,0,0,0,14.7363204956055,0,0,0,15.4060440063477,0,0,0,-16.5720520019531,0,0,0,0,-11.0584411621094,0,0,0,15.238639831543,0,0,0,13.5640640258789,0,0,0,-33.9824600219727,0,0,0,0,7.18930816650391,0,0,0,15.5735015869141,0,0,0,12.894287109375,0,0,0,0,-38.3477783203125,0,0,0,14.5687561035156,0,0,0,15.0712356567383,0,0,0,8.54039001464844,0,0,0,0,-33.8264770507812,0,0,0,14.9036712646484,0,0,0,14.4013519287109,0,0,0,4.68886566162109,0,0,0,0,-33.3134307861328,0,0,0,0,2.33378601074219,0,0,0,15.4060974121094,0,0,0,14.736213684082,0,0,0,-39.6744689941406,0,0,0,0,12.3788909912109,0,0,0,13.8990325927734,0,0,0,14.2338409423828,0,0,0,-41.0270462036133,0,0,0,13.5640106201172,0,0,0,11.2196578979492,0,0,0,14.4247665405273,0,0,0,-37.9091033935547,0,0,0,0,11.7093963623047,0,0,0,14.736213684082,0,0,0,13.2292022705078,0,0,0,0,-39.1851196289062,0,0,0,12.2244567871094,0,0,0,9.21011352539062,0,0,0,5.86101531982422,0,0,0,4.68886566162109,0,0,0,7.03327178955078,0,0,0,0,-33.324104309082,0,0,0,15.0711288452148,0,0,0,14.9037246704102,0,0,0,-12.0519256591797,0,0,0,0,-15.578727722168,0,0,0,15.2386932373047,0,0,0,15.4060440063477,0,0,0,-40.3572158813477,0,0,0,14.5688095092773,0,0,0,15.0711288452148,0,0,0,11.2197113037109,0,0,0,0,-39.8549499511719,0,0,0,5.86101531982422,0,0,0,12.3918609619141,0,0,0,14.4013519287109,0,0,0,7.0333251953125,0,0,0,0,-33.6590728759766,0,0,0,14.4013519287109,0,0,0,14.9037780761719,0,0,0,-5.18808746337891,0,0,0,0,-21.9400863647461,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,-39.1722564697266,0,0,0,0,12.2115936279297,0,0,0,14.9037246704102,0,0,0,12.7268829345703,0,0,0,0,-33.6590728759766,0,0,0,15.0712203979492,0,0,0,14.2338562011719,0,0,0,-6.35986328125,0,0,0,0,-21.1031723022461,0,0,0,15.238639831543,0,0,0,14.5688095092773,0,0,0,-31.3038330078125,0,0,0,0,5.01300048828125,0,0,0,14.4014053344727,0,0,0,13.8990325927734,0,0,0,0,-32.9892425537109,0,0,0,14.9037780761719,0,0,0,15.0711288452148,0,0,0,-18.9156036376953,0,0,0,0,-7.87754821777344,0,0,0,14.7362670898438,0,0,0,14.0663833618164,0,0,0,-40.84619140625,0,0,0,0,13.8855667114258,0,0,0,15.238655090332,0,0,0,12.8942337036133,0,0,0,0,-38.1803741455078,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,7.20078277587891,0,0,0,0,-34.1613922119141,0,0,0,14.2338409423828,0,0,0,15.238639831543,0,0,0,-6.86196899414062,0,0,0,0,-19.596321105957,0,0,0,15.0711822509766,0,0,0,14.4013519287109,0,0,0,-33.6475982666016,0,0,0,0,-1.35102844238281,0,0,0,9.54513549804688,0,0,0,12.2244033813477,0,0,0,14.4012985229492,0,0,0,-40.1897583007812,0,0,0,14.7362670898438,0,0,0,14.5687561035156,0,0,0,11.5546264648438,0,0,0,0,-36.8407135009766,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,2.34574127197266,0,0,0,0,-29.3064041137695,0,0,0,14.5687561035156,0,0,0,15.238639831543,0,0,0,-19.4176559448242,0,0,0,0,-6.87312316894531,0,0,0,15.2385864257812,0,0,0,14.2338943481445,0,0,0,-40.3572158813477,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,10.3824234008789,0,0,0,0,-36.0036392211914,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,1.67607116699219,0,0,0,0,-27.9669036865234,0,0,0,15.0711288452148,0,0,0,14.5688095092773,0,0,0,-19.0830612182617,0,0,0,0,-7.87760162353516,0,0,0,15.2386932373047,0,0,0,8.87519836425781,0,0,0,4.01903533935547,0,0,0,-35.1542892456055,0,0,0,0,8.36103057861328,0,0,0,14.2339477539062,0,0,0,14.2339477539062,0,0,0,0,-33.6590194702148,0,0,0,15.2385864257812,0,0,0,15.238639831543,0,0,0,-20.5895919799805,0,0,0,0,-6.03610229492188,0,0,0,13.7314682006836,0,0,0,15.0711822509766,0,0,0,-38.8373413085938,0,0,0,0,12.044189453125,0,0,0,14.736213684082,0,0,0,13.2292022705078,0,0,0,0,-37.5104904174805,0,0,0,15.5735015869141,0,0,0,13.5640640258789,0,0,0,8.20552825927734,0,0,0,0,-33.3241577148438,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,-8.20162963867188,0,0,0,0,-19.9311828613281,0,0,0,15.2385864257812,0,0,0,13.5640640258789,0,0,0,-11.8847351074219,0,0,0,0,-18.4250259399414,0,0,0,12.5592651367188,0,0,0,15.4060974121094,0,0,0,-7.86628723144531,0,0,0,0,-17.9221725463867,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,-40.189811706543,0,0,0,14.736213684082,0,0,0,14.7362670898438,0,0,0,11.2197647094727,0,0,0,0,-32.6542739868164,0,0,0,14.2338409423828,0,0,0,13.8990325927734,0,0,0,-3.681396484375,0,0,0,0,-23.44677734375,0,0,0,12.3561553955078,0,0,0,15.2385864257812,0,0,0,4.01908874511719,0,0,0,0,-36.0354766845703,0,0,0,5.19113159179688,0,0,0,2.84677886962891,0,0,0,3.85152435302734,0,0,0,12.2244033813477,0,0,0,12.056999206543,0,0,0,0,-40.5247268676758,0,0,0,14.4012985229492,0,0,0,13.8990325927734,0,0,0,12.2244033813477,0,0,0,0,-39.6874923706055,0,0,0,13.7315216064453,0,0,0,15.2386932373047,0,0,0,10.5498809814453,0,0,0,0,-32.9892425537109,0,0,0,14.2339477539062,0,0,0,15.2385864257812,0,0,0,-4.01647186279297,0,0,0,0,-23.6139678955078,0,0,0,15.4060974121094,0,0,0,15.5735015869141,0,0,0,-33.145866394043,0,0,0,0,5.18051147460938,0,0,0,14.9037246704102,0,0,0,13.3966064453125,0,0,0,0,-37.1757354736328,0,0,0,14.9037246704102,0,0,0,14.736213684082,0,0,0,7.36824035644531,0,0,0,0,-32.4868698120117,0,0,0,15.0712356567383,0,0,0,15.0711288452148,0,0,0,-14.0610961914062,0,0,0,0,-13.7368011474609,0,0,0,15.2386093139648,0,0,0,6.02850341796875,0,0,0,6.86576080322266,0,0,0,-11.5501937866211,0,0,0,0,-16.9176406860352,0,0,0,14.5688095092773,0,0,0,14.7363204956055,0,0,0,-19.41845703125,0,0,0,0,-9.88666534423828,0,0,0,13.8989791870117,0,0,0,13.8990325927734,0,0,0,-5.85823822021484,0,0,0,0,-22.6095962524414,0,0,0,14.5688095092773,0,0,0,14.9037780761719,0,0,0,-21.2597427368164,0,0,0,0,-6.20329284667969,0,0,0,15.4060974121094,0,0,0,13.8989791870117,0,0,0,0,-40.5247268676758,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,11.2196578979492,0,0,0,0,-35.1660842895508,0,0,0,15.5735015869141,0,0,0,15.0711822509766,0,0,0,4.35400390625,0,0,0,0,-35.3336486816406,0,0,0,15.238639831543,0,0,0,15.5736083984375,0,0,0,4.52140808105469,0,0,0,0,-32.9892425537109,0,0,0,14.7362670898438,0,0,0,15.7410125732422,0,0,0,-10.3781509399414,0,0,0,0,-17.7547149658203,0,0,0,14.5688629150391,0,0,0,14.2338943481445,0,0,0,-15.4005432128906,0,0,0,0,-12.5649185180664,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,0,-37.0081176757812,0,0,0,15.2385864257812,0,0,0,14.0664901733398,0,0,0,7.53564453125,0,0,0,0,-32.6542739868164,0,0,0,15.5735549926758,0,0,0,13.8989791870117,0,0,0,-3.51441955566406,0,0,0,0,-24.9534149169922,0,0,0,7.70310211181641,0,0,0,8.87519836425781,0,0,0,13.5640640258789,0,0,0,-22.0967636108398,0,0,0,0,-6.03610229492188,0,0,0,13.8990325927734,0,0,0,14.4013519287109,0,0,0,-21.9294662475586,0,0,0,0,-6.87328338623047,0,0,0,13.731575012207,0,0,0,14.5687561035156,0,0,0,-4.85402679443359,0,0,0,0,-24.9534149169922,0,0,0,14.9037780761719,0,0,0,15.238639831543,0,0,0,-18.9161376953125,0,0,0,0,-9.88655853271484,0,0,0,15.0711288452148,0,0,0,15.0712356567383,0,0,0,-33.9829406738281,0,0,0,0,6.51985168457031,0,0,0,15.0712356567383,0,0,0,12.7267761230469,0,0,0,0,-40.5248870849609,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,10.7173385620117,0,0,0,0,-33.3241577148438,0,0,0,15.2386932373047,0,0,0,15.2385864257812,0,0,0,-6.69515228271484,0,0,0,0,-21.7726287841797,0,0,0,15.0712356567383,0,0,0,10.8846893310547,0,0,0,4.18643951416016,0,0,0,-9.54155731201172,0,0,0,0,-21.1031188964844,0,0,0,14.736213684082,0,0,0,15.0711822509766,0,0,0,-9.20648193359375,0,0,0,0,-20.6009063720703,0,0,0,13.3966064453125,0,0,0,13.5640106201172,0,0,0,5.02378082275391,0,0,0,0,-33.324104309082,0,0,0,15.4060974121094,0,0,0,14.0664367675781,0,0,0,3.68417358398438,0,0,0,0,-33.1567001342773,0,0,0,14.0664367675781,0,0,0,14.9037780761719,0,0,0,0.671005249023438,0,0,0,0,-28.4689559936523,0,0,0,15.4060440063477,0,0,0,15.2386932373047,0,0,0,-25.2775497436523,0,0,0,0,-2.01808166503906,0,0,0,15.4060974121094,0,0,0,13.3966598510742,0,0,0,0,-40.3573226928711,0,0,0,14.9037780761719,0,0,0,15.238639831543,0,0,0,10.2149124145508,0,0,0,0,-36.0034255981445,0,0,0,15.4060974121094,0,0,0,14.7362670898438,0,0,0,5.69366455078125,0,0,0,0,-32.463508605957,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,-12.7981033325195,0,0,0,0,-15.2435836791992,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,-27.4540710449219,0,0,0,0,-1.51608276367188,0,0,0,14.5688095092773,0,0,0,14.2338409423828,0,0,0,-27.6213684082031,0,0,0,0,-0.344039916992188,0,0,0,14.7362670898438,0,0,0,14.0664901733398,0,0,0,0,-35.6685104370117,0,0,0,12.7267761230469,0,0,0,4.01898193359375,0,0,0,12.7267761230469,0,0,0,6.02857971191406,0,0,0,0,-32.9891891479492,0,0,0,14.5688095092773,0,0,0,13.5640106201172,0,0,0,5.02378082275391,0,0,0,0,-33.3240509033203,0,0,0,15.4060440063477,0,0,0,14.7363204956055,0,0,0,-3.68187713623047,0,0,0,0,-24.451042175293,0,0,0,14.2338943481445,0,0,0,13.731575012207,0,0,0,-4.51884460449219,0,0,0,0,-23.6140213012695,0,0,0,14.5688095092773,0,0,0,15.2385864257812,0,0,0,-22.4315719604492,0,0,0,0,-5.19892120361328,0,0,0,15.0711822509766,0,0,0,14.0665435791016,0,0,0,0,-32.3195724487305,0,0,0,14.9037780761719,0,0,0,14.5688095092773,0,0,0,-6.52780151367188,0,0,0,0,-21.9400329589844,0,0,0,14.5688629150391,0,0,0,15.0711288452148,0,0,0,-16.9071807861328,0,0,0,0,-10.8907165527344,0,0,0,15.2385864257812,0,0,0,14.4014053344727,0,0,0,0,0,0,0,0,0,-37.8333435058594,0,0,0,0,10.2028503417969,0,0,0,14.9036712646484,0,0,0,12.7268295288086,0,0,0,0,-38.3478317260742,0,0,0,14.4013519287109,0,0,0,14.9037246704102,0,0,0,9.04276275634766,0,0,0,0,-35.3335418701172,0,0,0,14.9036712646484,0,0,0,14.9037246704102,0,0,0,5.35874938964844,0,0,0,0,-33.1566467285156,0,0,0,13.89892578125,0,0,0,14.2338943481445,0,0,0,5.02383422851562,0,0,0,0,-33.4916152954102,0,0,0,14.2338943481445,0,0,0,14.2338943481445,0,0,0,5.02383422851562,0,0,0,0,-32.6542739868164,0,0,0,15.4060974121094,0,0,0,14.0663833618164,0,0,0,-3.84917449951172,0,0,0,0,-24.6185531616211,0,0,0,15.238639831543,0,0,0,15.2385864257812,0,0,0,-23.6035079956055,0,0,0,0,-5.19918823242188,0,0,0,15.2386779785156,0,0,0,14.9037399291992,0,0,0,0,-38.1803207397461,0,0,0,15.0711288452148,0,0,0,15.238639831543,0,0,0,7.70315551757812,0,0,0,0,-32.48681640625,0,0,0,15.2385864257812,0,0,0,14.7363204956055,0,0,0,-6.02569580078125,0,0,0,0,-22.442138671875,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,-14.0615768432617,0,0,0,0,-15.2434387207031,0,0,0,14.736213684082,0,0,0,14.0664901733398,0,0,0,-23.6035079956055,0,0,0,0,-3.85952758789062,0,0,0,12.391845703125,0,0,0,4.35391235351562,0,0,0,12.2244033813477,0,0,0,0,-39.3525238037109,0,0,0,15.0711822509766,0,0,0,13.5640640258789,0,0,0,10.71728515625,0,0,0,0,-39.6874923706055,0,0,0,14.5688095092773,0,0,0,15.0711822509766,0,0,0,9.88010406494141,0,0,0,0,-32.8217315673828,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,-15.2328720092773,0,0,0,0,-11.8953018188477,0,0,0,15.238639831543,0,0,0,14.7363204956055,0,0,0,0,-40.5247268676758,0,0,0,14.5687561035156,0,0,0,15.238639831543,0,0,0,10.7173385620117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.63401794433594,0,0,0,0,-41.0281219482422,0,0,0,0,12.2244033813477,0,0,0,15.2385864257812,0,0,0,15.4060974121094,0,0,0,-40.1897583007812,0,0,0,14.736213684082,0,0,0,5.02378082275391,0,0,0,8.0379638671875,0,0,0,13.0616912841797,0,0,0,0,-36.0033721923828,0,0,0,14.2338943481445,0,0,0,12.8942337036133,0,0,0,8.70784759521484,0,0,0,0,-33.826530456543,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,-11.8843612670898,0,0,0,0,-14.5739822387695,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,-37.8330764770508,0,0,0,0,10.7049560546875,0,0,0,14.5688095092773,0,0,0,13.2292022705078,0,0,0,0,-40.0224075317383,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,9.71259307861328,0,0,0,0,-33.1567001342773,0,0,0,15.2386932373047,0,0,0,12.6211853027344,0,0,0,-1.83963012695312,0,0,0,0,-23.9087448120117,0,0,0,15.2386932373047,0,0,0,14.9036712646484,0,0,0,-39.5199279785156,0,0,0,15.4060821533203,0,0,0,15.5735168457031,0,0,0,9.54518890380859,0,0,0,0,-32.9892425537109,0,0,0,14.4014053344727,0,0,0,15.4060440063477,0,0,0,-23.4354629516602,0,0,0,0,-3.0228271484375,0,0,0,15.0712356567383,0,0,0,14.4013519287109,0,0,0,-40.3572692871094,0,0,0,14.5687561035156,0,0,0,14.9037246704102,0,0,0,11.0523071289062,0,0,0,0,-32.4868698120117,0,0,0,14.9037780761719,0,0,0,14.4012985229492,0,0,0,-21.928825378418,0,0,0,0,-4.19454956054688,0,0,0,8.54033660888672,0,0,0,8.20542144775391,0,0,0,11.7220306396484,0,0,0,-39.687385559082,0,0,0,14.9036712646484,0,0,0,14.4014053344727,0,0,0,11.2197113037109,0,0,0,0,-32.6542739868164,0,0,0,14.4012985229492,0,0,0,14.2339477539062,0,0,0,-7.36444854736328,0,0,0,0,-20.2660446166992,0,0,0,14.0664367675781,0,0,0,15.2385864257812,0,0,0,-31.9733428955078,0,0,0,0,6.35239410400391,0,0,0,15.4060440063477,0,0,0,12.5594253540039,0,0,0,0,-32.3194122314453,0,0,0,14.4014053344727,0,0,0,14.9037246704102,0,0,0,-20.4222946166992,0,0,0,0,-5.70108032226562,0,0,0,15.4060440063477,0,0,0,13.8990325927734,0,0,0,0,-35.8360748291016,0,0,0,15.4060974121094,0,0,0,14.2338943481445,0,0,0,1.67601776123047,0,0,0,0,-27.6319885253906,0,0,0,13.5640640258789,0,0,0,14.7362670898438,0,0,0,-17.2413482666016,0,0,0,0,-17.7572784423828,0,0,0,8.37293243408203,0,0,0,15.4060440063477,0,0,0,15.0712356567383,0,0,0,0,-40.6921844482422,0,0,0,14.0664367675781,0,0,0,14.2338409423828,0,0,0,12.3919143676758,0,0,0,0,-39.5200347900391,0,0,0,14.4013748168945,0,0,0,14.5688400268555,0,0,0,10.3824234008789,0,0,0,0,-33.1567001342773,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-17.7437744140625,0,0,0,0,-8.71456909179688,0,0,0,15.0711822509766,0,0,0,14.2338943481445,0,0,0,-40.1897583007812,0,0,0,14.7362670898438,0,0,0,15.2385864257812,0,0,0,10.7173385620117,0,0,0,0,-34.8312225341797,0,0,0,14.5688095092773,0,0,0,15.4060974121094,0,0,0,-2.67686462402344,0,0,0,0,-24.4512023925781,0,0,0,15.5735015869141,0,0,0,14.0664901733398,0,0,0,-33.1452789306641,0,0,0,0,7.18930816650391,0,0,0,15.5735549926758,0,0,0,12.7268295288086,0,0,0,0,-36.8407135009766,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,6.69841003417969,0,0,0,0,-33.1566467285156,0,0,0,14.4012985229492,0,0,0,15.4060974121094,0,0,0,-16.9066467285156,0,0,0,0,-10.0539627075195,0,0,0,15.5735549926758,0,0,0,14.9037246704102,0,0,0,0,-36.1708831787109,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,6.02857971191406,0,0,0,0,-33.9939346313477,0,0,0,4.01892852783203,0,0,0,10.8847427368164,0,0,0,14.5688629150391,0,0,0,-7.02947998046875,0,0,0,0,-20.2660980224609,0,0,0,11.554573059082,0,0,0,8.37282562255859,0,0,0,12.056999206543,0,0,0,0,-39.3525238037109,0,0,0,12.8942337036133,0,0,0,13.061637878418,0,0,0,10.2149658203125,0,0,0,3.01428985595703,0,0,0,0,-32.9891891479492,0,0,0,14.2338943481445,0,0,0,14.7362670898438,0,0,0,-10.210319519043,0,0,0,0,-17.4201736450195,0,0,0,15.4060440063477,0,0,0,15.0711822509766,0,0,0,-39.1720962524414,0,0,0,0,12.7138061523438,0,0,0,15.0712356567383,0,0,0,12.7267761230469,0,0,0,0,-40.6923446655273,0,0,0,14.7362670898438,0,0,0,14.7362670898438,0,0,0,11.2196578979492,0,0,0,0,-33.4915084838867,0,0,0,14.9036712646484,0,0,0,14.4014053344727,0,0,0,-13.2235946655273,0,0,0,0,-13.0672378540039,0,0,0,12.3918075561523,0,0,0,3.85152435302734,0,0,0,12.7268295288086,0,0,0,-28.123420715332,0,0,0,0,-0.176902770996094,0,0,0,14.2338943481445,0,0,0,14.4012985229492,0,0,0,-35.9914703369141,0,0,0,0,8.19357299804688,0,0,0,14.4246597290039,0,0,0,13.5641021728516,0,0,0,-9.87651062011719,0,0,0,0,-27.3754348754883,0,0,0,9.21022033691406,0,0,0,13.3965530395508,0,0,0,13.7315216064453,0,0,0,-29.127685546875,0,0,0,0,1.66464996337891,0,0,0,14.4013519287109,0,0,0,14.2339477539062,0,0,0,-40.3441925048828,0,0,0,0,13.0485610961914,0,0,0,14.4014053344727,0,0,0,13.3966598510742,0,0,0,0,-32.6543273925781,0,0,0,14.9037246704102,0,0,0,14.0664367675781,0,0,0,-18.9153900146484,0,0,0,0,-6.70561218261719,0,0,0,14.9037246704102,0,0,0,14.0664901733398,0,0,0,-40.0094375610352,0,0,0,0,13.0487213134766,0,0,0,15.0711822509766,0,0,0,12.3919143676758,0,0,0,0,-33.6589660644531,0,0,0,15.0711822509766,0,0,0,15.0711288452148,0,0,0,-22.9331970214844,0,0,0,0,-3.85995483398438,0,0,0,13.5640106201172,0,0,0,14.9037780761719,0,0,0,-36.8283309936523,0,0,0,0,10.8723602294922,0,0,0,14.7363204956055,0,0,0,13.0616912841797,0,0,0,0,-38.0129165649414,0,0,0,15.0712356567383,0,0,0,14.4013519287109,0,0,0,8.54033660888672,0,0,0,0,-35.3335418701172,0,0,0,3.85147094726562,0,0,0,12.8942337036133,0,0,0,13.8990325927734,0,0,0,4.52140808105469,0,0,0,0,-33.1566467285156,0,0,0,14.5687561035156,0,0,0,14.4014053344727,0,0,0,-6.52737426757812,0,0,0,0,-20.7682571411133,0,0,0,11.8895263671875,0,0,0,12.224365234375,0,0,0,7.53564453125,0,0,0,0,-37.845458984375,0,0,0,12.3919143676758,0,0,0,14.2338409423828,0,0,0,11.0523071289062,0,0,0,0,-33.8264770507812,0,0,0,14.9037246704102,0,0,0,15.0711822509766,0,0,0,-19.4176025390625,0,0,0,0,-6.37085723876953,0,0,0,15.0711288452148,0,0,0,14.7363204956055,0,0,0,0,-40.3574829101562,0,0,0,14.5688095092773,0,0,0,15.0711822509766,0,0,0,10.7173385620117,0,0,0,0,-34.3287963867188,0,0,0,13.5640640258789,0,0,0,14.9036712646484,0,0,0,-1.83952331542969,0,0,0,0,-23.7814254760742,0,0,0,15.0711288452148,0,0,0,5.69355773925781,0,0,0,6.36344146728516,0,0,0,-11.8843078613281,0,0,0,0,-14.4065780639648,0,0,0,14.0664901733398,0,0,0,15.2385864257812,0,0,0,-37.8328628540039,0,0,0,0,11.5420303344727,0,0,0,14.7362670898438,0,0,0,12.7268829345703,0,0,0,0,-33.1567001342773,0,0,0,15.2386932373047,0,0,0,14.9036712646484,0,0,0,-21.5940704345703,0,0,0,0,-4.36184692382812,0,0,0,15.4060974121094,0,0,0,13.731575012207,0,0,0,0,-34.1613922119141,0,0,0,13.8989791870117,0,0,0,14.4013519287109,0,0,0,2.68038940429688,0,0,0,0,-30.143424987793,0,0,0,14.9037780761719,0,0,0,15.7409591674805,0,0,0,-25.2771224975586,0,0,0,0,-1.18116760253906,0,0,0,15.4060974121094,0,0,0,13.5641708374023,0,0,0,0,-32.8217315673828,0,0,0,15.4060974121094,0,0,0,15.2385864257812,0,0,0,-33.4800338745117,0,0,0,0,7.85903167724609,0,0,0,15.238639831543,0,0,0,12.7268295288086,0,0,0,0,-37.6779479980469,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,8.03801727294922,0,0,0,0,-32.6542739868164,0,0,0,15.4060440063477,0,0,0,15.0712356567383,0,0,0,-34.3171081542969,0,0,0,0,8.19373321533203,0,0,0,14.7362670898438,0,0,0,13.7315216064453,0,0,0,0,-39.5200347900391,0,0,0,14.4014053344727,0,0,0,14.9036712646484,0,0,0,7.20067596435547,0,0,0,3.01428985595703,0,0,0,0,-38.1803741455078,0,0,0,14.0664367675781,0,0,0,14.5688095092773,0,0,0,9.37773132324219,0,0,0,0,-32.9891891479492,0,0,0,14.2338409423828,0,0,0,14.2338943481445,0,0,0,-0.165855407714844,0,0,0,0,-27.4646377563477,0,0,0,14.9037246704102,0,0,0,15.2386932373047,0,0,0,-33.8149490356445,0,0,0,0,8.19389343261719,0,0,0,14.5688095092773,0,0,0,13.2292022705078,0,0,0,0,-39.1851196289062,0,0,0,15.2386932373047,0,0,0,15.2385864257812,0,0,0,8.54044342041016,0,0,0,0,-35.6687240600586,0,0,0,15.0712356567383,0,0,0,15.4060974121094,0,0,0,-6.02484130859375,0,0,0,0,-20.6366653442383,0,0,0,11.8894882202148,0,0,0,13.8989791870117,0,0,0,6.19593048095703,0,0,0,0,-0.167404174804688,0,0,0,0,-38.7147979736328,0,0,0,14.736213684082,0,0,0,15.4060974121094,0,0,0,8.54044342041016,0,0,0,0,-33.1566467285156,0,0,0,4.18638610839844,0,0,0,8.54033660888672,0,0,0,14.7363204956055,0,0,0,5.69361114501953,0,0,0,0,-33.1566467285156,0,0,0,15.4060440063477,0,0,0,14.7362670898438,0,0,0,-0.501144409179688,0,0,0,0,-29.3062438964844,0,0,0,15.0711288452148,0,0,0,15.2386932373047,0,0,0,-9.20637512207031,0,0,0,0,-18.9264907836914,0,0,0,15.4060440063477,0,0,0,15.4061508178711,0,0,0,0,-40.189811706543,0,0,0,15.5735015869141,0,0,0,14.4014053344727,0,0,0,10.2149124145508,0,0,0,0,-34.4963073730469,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,-3.17939758300781,0,0,0,0,-23.7812652587891,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,-35.8244400024414,0,0,0,0,8.52880859375,0,0,0,14.7363204956055,0,0,0,12.7267761230469,0,0,0,0,-37.8454055786133,0,0,0,15.238639831543,0,0,0,14.2338790893555,0,0,0,8.20549011230469,0,0,0,0,-31.8170394897461,0,0,0,14.9037780761719,0,0,0,14.2338943481445,0,0,0,-13.0566177368164,0,0,0,0,-14.5738754272461,0,0,0,14.7362670898438,0,0,0,15.0711288452148,0,0,0,-30.6346969604492,0,0,0,0,2.66934204101562,0,0,0,15.4060440063477,0,0,0,13.2292022705078,0,0,0,0,-37.008171081543,0,0,0,14.7362670898438,0,0,0,14.0664901733398,0,0,0,7.20062255859375,0,0,0,1.00479888916016,0,0,0,0,-38.0129165649414,0,0,0,15.2386932373047,0,0,0,14.0664367675781,0,0,0,8.70779418945312,0,0,0,0,-37.3430862426758,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,7.36818695068359,0,0,0,0,-34.9986267089844,0,0,0,14.0663833618164,0,0,0,14.0664901733398,0,0,0,6.69835662841797,0,0,0,0,-32.1519546508789,0,0,0,14.5688629150391,0,0,0,15.2385864257812,0,0,0,-11.7174377441406,0,0,0,0,-15.7455978393555,0,0,0,15.4060974121094,0,0,0,14.5688629150391,0,0,0,0,-40.1899719238281,0,0,0,14.5687561035156,0,0,0,14.5688629150391,0,0,0,11.0522003173828,0,0,0,0,-36.1708297729492,0,0,0,15.2385864257812,0,0,0,14.7362670898438,0,0,0,6.02857971191406,0,0,0,0,-33.9939346313477,0,0,0,12.5593185424805,0,0,0,9.7125244140625,0,0,0,4.52131652832031,0,0,0,6.02852630615234,0,0,0,-25.7798156738281,0,0,0,0,-4.52999877929688,0,0,0,8.20542144775391,0,0,0,12.3918075561523,0,0,0,7.36813354492188,0,0,0,3.68412017822266,0,0,0,0,-41.3488311767578,0,0,0,0,13.2159118652344,0,0,0,14.0664901733398,0,0,0,14.0664367675781,0,0,0,0,-40.189811706543,0,0,0,15.4060974121094,0,0,0,15.4060440063477,0,0,0,9.37767791748047,0,0,0,0,-35.1661376953125,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,4.52146148681641,0,0,0,0,-31.9844436645508,0,0,0,15.5735549926758,0,0,0,15.238639831543,0,0,0,-26.1146240234375,0,0,0,0,-1.68332672119141,0,0,0,14.9037246704102,0,0,0,14.2338943481445,0,0,0,0,-40.189811706543,0,0,0,15.0711288452148,0,0,0,15.4060974121094,0,0,0,9.71259307861328,0,0,0,0,-35.5009994506836,0,0,0,14.736213684082,0,0,0,14.2339477539062,0,0,0,6.36344146728516,0,0,0,0,-32.8217315673828,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,-20.2552108764648,0,0,0,0,-6.87290954589844,0,0,0,14.5688095092773,0,0,0,14.736213684082,0,0,0,-32.6437606811523,0,0,0,0,4.00857543945312,0,0,0,15.7410125732422,0,0,0,12.8942337036133,0,0,0,0,-32.8216781616211,0,0,0,15.2385864257812,0,0,0,14.2339477539062,0,0,0,-6.02548217773438,0,0,0,0,-21.1026916503906,0,0,0,13.7315216064453,0,0,0,4.52135467529297,0,0,0,10.7173385620117,0,0,0,-21.4272537231445,0,0,0,0,-6.70561218261719,0,0,0,15.0711288452148,0,0,0,13.2292022705078,0,0,0,-15.4007568359375,0,0,0,0,-13.2345352172852,0,0,0,15.238639831543,0,0,0,14.4014053344727,0,0,0,-30.9696655273438,0,0,0,0,1.99945831298828,0,0,0,14.9037246704102,0,0,0,14.4014053344727,0,0,0,0,-34.6637649536133,0,0,0,10.9081039428711,0,0,0,10.8847961425781,0,0,0,12.8942337036133,0,0,0,0,-40.0986862182617,0,0,0,14.736213684082,0,0,0,15.0711822509766,0,0,0,10.3824234008789,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43.6348342895508,0,0,0,0,11.7219772338867,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,-41.8505630493164,0,0,0,0,15.8945922851562,0,0,0,3.68412017822266,0,0,0,13.7314682006836,0,0,0,10.0475082397461,0,0,0,0,-37.6780014038086,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,7.70310211181641,0,0,0,0,-33.3241577148438,0,0,0,14.4014053344727,0,0,0,15.0711822509766,0,0,0,-13.7258605957031,0,0,0,0,-13.4023132324219,0,0,0,14.4013519287109,0,0,0,14.2338943481445,0,0,0,-26.6164093017578,0,0,0,0,0.325576782226562,0,0,0,15.4061508178711,0,0,0,13.2292022705078,0,0,0,0,-32.6542739868164,0,0,0,15.5735549926758,0,0,0,14.7362670898438,0,0,0,-28.7927169799805,0,0,0,0,1.32968139648438,0,0,0,15.7409591674805,0,0,0,13.731575012207,0,0,0,-40.3572692871094,0,0,0,15.4060440063477,0,0,0,14.9037246704102,0,0,0,10.3824768066406,0,0,0,0,-33.4916152954102,0,0,0,14.0664367675781,0,0,0,14.5688629150391,0,0,0,-6.69456481933594,0,0,0,0,-19.4288635253906,0,0,0,15.4061508178711,0,0,0,15.2385864257812,0,0,0,-40.3572158813477,0,0,0,15.4060440063477,0,0,0,14.9037780761719,0,0,0,10.3824234008789,0,0,0,0,-33.4915618896484,0,0,0,14.5688095092773,0,0,0,15.4060974121094,0,0,0,-21.9287719726562,0,0,0,0,-4.52951812744141,0,0,0,15.238639831543,0,0,0,14.9036712646484,0,0,0,-40.8595886230469,0,0,0,15.2385864257812,0,0,0,7.03321838378906,0,0,0,6.53084564208984,0,0,0,12.056999206543,0,0,0,0,-35.8359680175781,0,0,0,14.4013519287109,0,0,0,13.2291488647461,0,0,0,8.03807067871094,0,0,0,0,-33.8264770507812,0,0,0,15.4060440063477,0,0,0,14.2338943481445,0,0,0,-7.86655426025391,0,0,0,0,-19.0940551757812,0,0,0,15.238639831543,0,0,0,15.4060440063477,0,0,0,-40.1897583007812,0,0,0,15.2385864257812,0,0,0,14.7363204956055,0,0,0,10.7173385620117,0,0,0,0,-33.324104309082,0,0,0,15.5735549926758,0,0,0,15.0711288452148,0,0,0,-18.5809020996094,0,0,0,0,-8.3797607421875,0,0,0,15.0712356567383,0,0,0,14.5687561035156,0,0,0,-41.5295944213867,0,0,0,14.5688247680664,0,0,0,15.4060974121094,0,0,0,11.7220306396484,0,0,0,0,-37.845458984375,0,0,0,14.9037246704102,0,0,0,14.2338943481445,0,0,0,8.70784759521484,0,0,0,0,-40.5247268676758,0,0,0,7.36808013916016,0,0,0,9.88005065917969,0,0,0,15.2385864257812,0,0,0,8.03801727294922,0,0,0,0,-34.6637649536133,0,0,0,14.0664367675781,0,0,0,14.2338943481445,0,0,0,6.36344146728516,0,0,0,0,-35.3335952758789,0,0,0,14.2338943481445,0,0,0,14.4014053344727,0,0,0,6.69830322265625,0,0,0,0,-33.324104309082,0,0,0,15.0711822509766,0,0,0,15.0712356567383,0,0,0,-27.1184616088867,0,0,0,0,0.995086669921875,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,0,-38.682746887207,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,8.54044342041016,0,0,0,0,-32.6542739868164,0,0,0,14.9036712646484,0,0,0,13.8989791870117,0,0,0,-14.8976364135742,0,0,0,0,-11.7280578613281,0,0,0,15.0711288452148,0,0,0,14.5688095092773,0,0,0,-40.1897735595703,0,0,0,15.238655090332,0,0,0,14.5687561035156,0,0,0,11.3871688842773,0,0,0,0,-36.1708831787109,0,0,0,14.5688095092773,0,0,0,14.0664901733398,0,0,0,7.53559112548828,0,0,0,0,-34.9986801147461,0,0,0,14.7362670898438,0,0,0,14.5688629150391,0,0,0,-4.18328857421875,0,0,0,0,-21.4377670288086,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-40.1897583007812,0,0,0,15.4060440063477,0,0,0,15.238639831543,0,0,0,10.2149658203125,0,0,0,0,-40.8596420288086,0,0,0,5.02372741699219,0,0,0,14.4013519287109,0,0,0,13.1235580444336,0,0,0,8.20552825927734,0,0,0,0,-33.9538497924805,0,0,0,14.2338409423828,0,0,0,14.2338943481445,0,0,0,0.504081726074219,0,0,0,0,-27.1297760009766,0,0,0,15.2385864257812,0,0,0,14.7363204956055,0,0,0,-27.2861328125,0,0,0,0,0.660385131835938,0,0,0,14.7362670898438,0,0,0,14.2338943481445,0,0,0,0,-37.8454055786133,0,0,0,15.0711288452148,0,0,0,14.2339477539062,0,0,0,8.37293243408203,0,0,0,0,-32.9891891479492,0,0,0,15.4060440063477,0,0,0,14.7362670898438,0,0,0,-26.448844909668,0,0,0,0,-2.85633087158203,0,0,0,15.238639831543,0,0,0,15.0711288452148,0,0,0,-35.9912033081055,0,0,0,0,10.5376586914062,0,0,0,14.4013519287109,0,0,0,12.8943405151367,0,0,0,0,-34.1613922119141,0,0,0,15.0711822509766,0,0,0,8.70774078369141,0,0,0,7.70310211181641,0,0,0,-7.69968414306641,0,0,0,0,-20.433235168457,0,0,0,15.0711822509766,0,0,0,14.7362670898438,0,0,0,-40.3439788818359,0,0,0,0,13.8856887817383,0,0,0,14.7363204956055,0,0,0,12.8942337036133,0,0,0,0,-38.0128631591797,0,0,0,14.4012985229492,0,0,0,14.2338943481445,0,0,0,9.37767791748047,0,0,0,0,-34.1613388061523,0,0,0,15.4060440063477,0,0,0,14.7362670898438,0,0,0,-15.2324447631836,0,0,0,0,-11.895622253418,0,0,0,14.9036712646484,0,0,0,14.9037246704102,0,0,0,-39.3524703979492,0,0,0,15.4060668945312,0,0,0,15.4060745239258,0,0,0,9.88005065917969,0,0,0,0,-35.5009994506836,0,0,0,15.4060440063477,0,0,0,14.9037246704102,0,0,0,-7.69888305664062,0,0,0,0,-18.4244918823242,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,-39.5199813842773,0,0,0,15.4060440063477,0,0,0,14.2338943481445,0,0,0,11.0522537231445,0,0,0,0,-35.1660842895508,0,0,0,15.4060440063477,0,0,0,14.9037780761719,0,0,0,-3.01172637939453,0,0,0,0,-24.618766784668,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-27.2859725952148,0,0,0,0,1.49751281738281,0,0,0,14.9037246704102,0,0,0,13.7315216064453,0,0,0,0,-38.3478317260742,0,0,0,14.9037246704102,0,0,0,14.5688629150391,0,0,0,7.03316497802734,0,0,0,1.6746826171875,0,0,0,0,-32.9892425537109,0,0,0,15.2386932373047,0,0,0,15.0711288452148,0,0,0,-23.4356231689453,0,0,0,0,-3.52498626708984,0,0,0,15.0711288452148,0,0,0,14.7363204956055,0,0,0,0,-40.6921844482422,0,0,0,14.9037094116211,0,0,0,14.5687713623047,0,0,0,11.0523071289062,0,0,0,0,-32.48681640625,0,0,0,15.4060974121094,0,0,0,15.5735549926758,0,0,0,-37.8328094482422,0,0,0,0,11.876838684082,0,0,0,15.5735549926758,0,0,0,12.056999206543,0,0,0,0,-33.3242645263672,0,0,0,14.4013519287109,0,0,0,14.9037780761719,0,0,0,-16.9065399169922,0,0,0,0,-9.38429260253906,0,0,0,14.9036712646484,0,0,0,15.4061508178711,0,0,0,0,-40.5247802734375,0,0,0,15.4060974121094,0,0,0,14.9037246704102,0,0,0,10.0475616455078,0,0,0,0,-33.324104309082,0,0,0,14.7362670898438,0,0,0,3.51655578613281,0,0,0,8.70784759521484,0,0,0,6.53084564208984,0,0,0,0,-37.6780014038086,0,0,0,8.54033660888672,0,0,0,8.03801727294922,0,0,0,9.71253967285156,0,0,0,10.2148590087891,0,0,0,-5.35650634765625,0,0,0,0,-25.9580535888672,0,0,0,15.2386932373047,0,0,0,14.5687561035156,0,0,0,-23.6030807495117,0,0,0,0,-2.85520935058594,0,0,0,13.7315216064453,0,0,0,15.238639831543,0,0,0,-40.5246734619141,0,0,0,15.7409591674805,0,0,0,15.2386932373047,0,0,0,9.54513549804688,0,0,0,0,-32.9891891479492,0,0,0,14.2338943481445,0,0,0,15.4060440063477,0,0,0,-18.4132843017578,0,0,0,0,-8.37986755371094,0,0,0,15.238639831543,0,0,0,14.9036712646484,0,0,0,-40.6921463012695,0,0,0,15.7410278320312,0,0,0,14.9036712646484,0,0,0,10.2149658203125,0,0,0,0,-36.1708297729492,0,0,0,15.7409591674805,0,0,0,15.238639831543,0,0,0,-1.67233276367188,0,0,0,0,-24.6184997558594,0,0,0,15.4294586181641,0,0,0,15.238639831543,0,0,0,-39.7637176513672,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,10.2149124145508,0,0,0,0,-35.5009994506836,0,0,0,15.5735015869141,0,0,0,13.7315216064453,0,0,0,1.17385864257812,0,0,0,0,-27.1297760009766,0,0,0,14.5688095092773,0,0,0,15.0712356567383,0,0,0,-28.1231002807617,0,0,0,0,-5.70337677001953,0,0,0,4.8563232421875,0,0,0,14.2338943481445,0,0,0,14.9036712646484,0,0,0,-28.2905044555664,0,0,0,0,0.157638549804688,0,0,0,14.5688095092773,0,0,0,13.3966598510742,0,0,0,-26.7838668823242,0,0,0,0,0.158065795898438,0,0,0,14.7363204956055,0,0,0,14.2339477539062,0,0,0,0,-33.4915618896484,0,0,0,14.9037246704102,0,0,0,15.2385864257812,0,0,0,-23.2680053710938,0,0,0,0,-2.52040100097656,0,0,0,14.2338409423828,0,0,0,15.0712356567383,0,0,0,0,-43.2042083740234,0,0,0,0,16.0758743286133,0,0,0,15.0712356567383,0,0,0,12.0569458007812,0,0,0,0,-33.324104309082,0,0,0,14.2338943481445,0,0,0,14.9037246704102,0,0,0,-16.5716247558594,0,0,0,0,-8.88191986083984,0,0,0,15.238639831543,0,0,0,14.234001159668,0,0,0,0,-32.9892425537109,0,0,0,15.2386932373047,0,0,0,12.3918075561523,0,0,0,4.35395050048828,0,0,0,-24.9428482055664,0,0,0,0,-2.85515594482422,0,0,0,14.9037780761719,0,0,0,14.0664367675781,0,0,0,0,-40.5247268676758,0,0,0,14.7362670898438,0,0,0,14.736213684082,0,0,0,11.0522537231445,0,0,0,0,-35.66845703125,0,0,0,14.9036712646484,0,0,0,14.9037780761719,0,0,0,-5.18766021728516,0,0,0,0,-19.7635116577148,0,0,0,15.5735015869141,0,0,0,14.9037780761719,0,0,0,-40.189811706543,0,0,0,15.4060440063477,0,0,0,15.0711822509766,0,0,0,10.0475082397461,0,0,0,0,-34.9986267089844,0,0,0,15.4060440063477,0,0,0,15.2386932373047,0,0,0,-16.4042205810547,0,0,0,0,-9.55169677734375,0,0,0,14.7362670898438,0,0,0,14.736213684082,0,0,0,-42.1855316162109,0,0,0,0,15.5597839355469,0,0,0,15.0711822509766,0,0,0,12.3919143676758,0,0,0,0,-34.6637115478516,0,0,0,14.9037246704102,0,0,0,14.9036712646484,0,0,0,-8.36860656738281,0,0,0,0,-18.7594604492188,0,0,0,15.4060440063477,0,0,0,14.2339477539062,0,0,0,-33.4800872802734,0,0,0,0,7.85908508300781,0,0,0,15.238639831543,0,0,0,12.7267761230469,0,0,0,0,-36.3383407592773,0,0,0,14.5688095092773,0,0,0,15.238639831543,0,0,0,1.84358215332031,0,0,0,0,-27.6319885253906,0,0,0,14.5687561035156,0,0,0,15.238639831543,0,0,0,2.51191711425781,0,0,0,0,-30.6349639892578,0,0,0,0,1.66481018066406,0,0,0,14.2338409423828,0,0,0,14.5688629150391,0,0,0,-40.3572692871094,0,0,0,15.238639831543,0,0,0,14.4012985229492,0,0,0,10.7173919677734,0,0,0,0,-32.8217849731445,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-22.0963897705078,0,0,0,0,-4.02703857421875,0,0,0,15.5736083984375,0,0,0,13.5640640258789,0,0,0,0,-39.1852798461914,0,0,0,15.4061508178711,0,0,0,14.0664367675781,0,0,0,9.54513549804688,0,0,0,0,-32.9892425537109,0,0,0,14.9037780761719,0,0,0,15.238639831543,0,0,0,-27.4533233642578,0,0,0,0,1.32994842529297,0,0,0,14.2338943481445,0,0,0,14.9037246704102,0,0,0,0,-34.9986267089844,0,0,0,15.5735015869141,0,0,0,15.7410125732422,0,0,0,-12.3866806030273,0,0,0,0,-14.4065246582031,0,0,0,15.0712356567383,0,0,0,7.70299530029297,0,0,0,7.70310211181641,0,0,0,0,-40.5247268676758,0,0,0,15.5735015869141,0,0,0,14.5688095092773,0,0,0,10.2150192260742,0,0,0,0,-33.324104309082,0,0,0,15.4060440063477,0,0,0,13.5641174316406,0,0,0,-6.02510833740234,0,0,0,0,-20.433235168457,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,-41.0271148681641,0,0,0,16.0759429931641,0,0,0,14.9037246704102,0,0,0,10.8847427368164,0,0,0,0,-40.5247268676758,0,0,0,10.5140686035156,0,0,0,12.2243499755859,0,0,0,13.2292022705078,0,0,0,4.52135467529297,0,0,0,0,0,0,0,0,0,-40.2218627929688,0,0,0,13.8989791870117,0,0,0,14.736213684082,0,0,0,11.5546264648438,0,0,0,0,-32.8217315673828,0,0,0,14.9037780761719,0,0,0,15.4060974121094,0,0,0,-11.7174911499023,0,0,0,0,-16.5828323364258,0,0,0,15.4060440063477,0,0,0,15.0711822509766,0,0,0,-32.8110580444336,0,0,0,0,5.18061828613281,0,0,0,15.4060440063477,0,0,0,12.5593719482422,0,0,0,0,-38.5152359008789,0,0,0,15.4060974121094,0,0,0,14.4012985229492,0,0,0,8.70784759521484,0,0,0,0,-35.5009994506836,0,0,0,15.4060974121094,0,0,0,15.0711822509766,0,0,0,4.8563232421875,0,0,0,0,-32.4868698120117,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,-11.3826293945312,0,0,0,0,-25.6254348754883,0,0,0,9.21016693115234,0,0,0,14.0663833618164,0,0,0,14.2338943481445,0,0,0,-11.8850021362305,0,0,0,0,-17.9223861694336,0,0,0,13.5640106201172,0,0,0,14.9037246704102,0,0,0,-3.68177032470703,0,0,0,0,-24.9534149169922,0,0,0,15.238639831543,0,0,0,14.2338943481445,0,0,0,-2.17545318603516,0,0,0,0,-27.2970733642578,0,0,0,14.5687561035156,0,0,0,14.2339477539062,0,0,0,3.18169403076172,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43.5584945678711,0,0,0,0,0,0,0,0,16.2433853149414,0,0,0,14.5687561035156,0,0,0,12.894287109375,0,0,0,0,-38.0128631591797,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,8.54033660888672,0,0,0,0,-34.1613922119141,0,0,0,14.7363204956055,0,0,0,15.4060440063477,0,0,0,4.01903533935547,0,0,0,0,-16.7404174804688,0,0,0,0,-14.7416534423828,0,0,0,14.9037246704102,0,0,0,14.5688629150391,0,0,0,-22.2641143798828,0,0,0,0,-6.70609283447266,0,0,0,13.5641174316406,0,0,0,14.4013519287109,0,0,0,-21.0919647216797,0,0,0,0,-6.03615570068359,0,0,0,15.238639831543,0,0,0,14.0664367675781,0,0,0,-32.6435470581055,0,0,0,0,4.00830841064453,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,0,-40.3573226928711,0,0,0,15.0712356567383,0,0,0,14.7362670898438,0,0,0,10.5498275756836,0,0,0,0,-34.8312225341797,0,0,0,15.0711822509766,0,0,0,15.0712356567383,0,0,0,-13.2234344482422,0,0,0,0,-12.5650787353516,0,0,0,14.9037246704102,0,0,0,15.4061508178711,0,0,0,-40.8596420288086,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,11.3871688842773,0,0,0,0,-34.3287963867188,0,0,0,15.0711822509766,0,0,0,14.2338409423828,0,0,0,-9.20557403564453,0,0,0,0,-16.9177474975586,0,0,0,15.2385864257812,0,0,0,15.0712356567383,0,0,0,-40.189811706543,0,0,0,15.5735015869141,0,0,0,14.4014053344727,0,0,0,11.0522003173828,0,0,0,0,-36.6732559204102,0,0,0,15.2386932373047,0,0,0,15.238639831543,0,0,0,1.34120941162109,0,0,0,0,-27.6320419311523,0,0,0,15.4060440063477,0,0,0,15.0711822509766,0,0,0,2.00954437255859,0,0,0,0,-38.8501510620117,0,0,0,12.3918075561523,0,0,0,13.8990325927734,0,0,0,12.5593185424805,0,0,0,0,-32.1416015625,0,0,0,0,3.00393676757812,0,0,0,14.9037780761719,0,0,0,14.2338943481445,0,0,0,0,-33.4915618896484,0,0,0,12.5593719482422,0,0,0,14.2338943481445,0,0,0,6.53089904785156,0,0,0,0,-33.9939880371094,0,0,0,12.3918609619141,0,0,0,12.3919143676758,0,0,0,9.37762451171875,0,0,0,0,-39.5200347900391,0,0,0,14.7363204956055,0,0,0,14.4012985229492,0,0,0,10.3824234008789,0,0,0,0,-35.1662979125977,0,0,0,14.5688629150391,0,0,0,15.0711822509766,0,0,0,-0.165641784667969,0,0,0,0,-26.4601593017578,0,0,0,13.731575012207,0,0,0,14.736213684082,0,0,0,-18.9154434204102,0,0,0,0,-7.37538909912109,0,0,0,14.0664901733398,0,0,0,14.9037246704102,0,0,0,-40.0223541259766,0,0,0,9.04270935058594,0,0,0,3.18169403076172,0,0,0,14.5687561035156,0,0,0,14.2339477539062,0,0,0,0,-38.682746887207,0,0,0,14.4013519287109,0,0,0,15.0712356567383,0,0,0,9.21016693115234,0,0,0,0,-35.8359146118164,0,0,0,15.2385864257812,0,0,0,15.2620010375977,0,0,0,-0.165695190429688,0,0,0,0,-26.7038421630859,0,0,0,14.7362670898438,0,0,0,14.2338943481445,0,0,0,-19.0830078125,0,0,0,0,-8.21257019042969,0,0,0,14.7363204956055,0,0,0,14.7362670898438,0,0,0,-39.8548965454102,0,0,0,15.0711288452148,0,0,0,14.0664901733398,0,0,0,11.5546264648438,0,0,0,0,-32.8217315673828,0,0,0,15.2385864257812,0,0,0,15.0712356567383,0,0,0,-31.3037261962891,0,0,0,0,5.51521301269531,0,0,0,15.0711822509766,0,0,0,13.3966598510742,0,0,0,0,-38.6826934814453,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,8.37293243408203,0,0,0,0,-33.1566467285156,0,0,0,15.238639831543,0,0,0,15.5735549926758,0,0,0,-30.634162902832,0,0,0,0,4.67819213867188,0,0,0,14.0664901733398,0,0,0,14.4013519287109,0,0,0,0,-40.8596420288086,0,0,0,15.2385864257812,0,0,0,14.9037780761719,0,0,0,10.5498809814453,0,0,0,0,-32.8217315673828,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,-21.5941772460938,0,0,0,0,-5.70145416259766,0,0,0,4.52140808105469,0,0,0,10.8846893310547,0,0,0,14.2338943481445,0,0,0,-42.5341796875,0,0,0,15.7409744262695,0,0,0,13.3966598510742,0,0,0,14.0664367675781,0,0,0,0,-35.3335418701172,0,0,0,15.4060440063477,0,0,0,13.7315216064453,0,0,0,6.02857971191406,0,0,0,0,-32.8217849731445,0,0,0,14.4014053344727,0,0,0,15.0711288452148,0,0,0,-19.2503051757812,0,0,0,0,-7.5428466796875,0,0,0,13.8989791870117,0,0,0,13.7314682006836,0,0,0,-26.4489517211914,0,0,0,0,-3.19119262695312,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-39.1719360351562,0,0,0,0,13.2160720825195,0,0,0,14.2338943481445,0,0,0,13.5640640258789,0,0,0,0,-39.0176620483398,0,0,0,14.9037780761719,0,0,0,15.5735549926758,0,0,0,8.37293243408203,0,0,0,0,-33.1566467285156,0,0,0,14.7362670898438,0,0,0,14.2338409423828,0,0,0,4.35395050048828,0,0,0,0,-14.7315673828125,0,0,0,0,-21.7741775512695,0,0,0,15.5735015869141,0,0,0,14.5688629150391,0,0,0,2.847900390625,0,0,0,0,-30.6458511352539,0,0,0,14.4013519287109,0,0,0,13.89892578125,0,0,0,2.01077270507812,0,0,0,0,-29.4737548828125,0,0,0,15.0711288452148,0,0,0,14.4013519287109,0,0,0,-19.9198150634766,0,0,0,0,-6.20350646972656,0,0,0,15.0711288452148,0,0,0,14.9037780761719,0,0,0,0,-39.0176620483398,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,8.54039001464844,0,0,0,0,-32.9892425537109,0,0,0,14.2339477539062,0,0,0,15.238639831543,0,0,0,-22.2635803222656,0,0,0,0,-4.02730560302734,0,0,0,15.2386932373047,0,0,0,14.5688629150391,0,0,0,0,-33.1566467285156,0,0,0,15.0711822509766,0,0,0,15.2385864257812,0,0,0,-27.1184616088867,0,0,0,0,0.827682495117188,0,0,0,14.9036712646484,0,0,0,14.234001159668,0,0,0,0,-32.8217315673828,0,0,0,15.0711288452148,0,0,0,14.9037246704102,0,0,0,-20.2548904418945,0,0,0,0,-6.87322998046875,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,0,-38.6826934814453,0,0,0,14.5687561035156,0,0,0,14.7363204956055,0,0,0,9.21022033691406,0,0,0,0,-33.4916152954102,0,0,0,14.2339477539062,0,0,0,14.2338943481445,0,0,0,5.19118499755859,0,0,0,0,-15.0663757324219,0,0,0,0,-15.9133224487305,0,0,0,13.8989791870117,0,0,0,14.7362670898438,0,0,0,-25.9468460083008,0,0,0,0,-1.68364715576172,0,0,0,14.5688629150391,0,0,0,14.7362670898438,0,0,0,-39.17236328125,0,0,0,0,10.8719863891602,0,0,0,14.9037246704102,0,0,0,14.0664901733398,0,0,0,0,-40.0223541259766,0,0,0,14.7362670898438,0,0,0,15.238639831543,0,0,0,10.0474548339844,0,0,0,0,-33.9940948486328,0,0,0,14.2339477539062,0,0,0,14.5687561035156,0,0,0,-6.02484130859375,0,0,0,0,-20.0984802246094,0,0,0,14.4012985229492,0,0,0,14.5688629150391,0,0,0,-30.9690246582031,0,0,0,0,1.39096069335938,0,0,0,15.0711288452148,0,0,0,15.238639831543,0,0,0,-38.2951736450195,0,0,0,0,12.2119369506836,0,0,0,15.0711288452148,0,0,0,12.5593719482422,0,0,0,0,-35.6685104370117,0,0,0,14.4013519287109,0,0,0,3.01423645019531,0,0,0,10.71728515625,0,0,0,7.36824035644531,0,0,0,0,-32.6542739868164,0,0,0,15.2385864257812,0,0,0,13.8989791870117,0,0,0,3.68412017822266,0,0,0,0,-40.0224075317383,0,0,0,5.69355773925781,0,0,0,4.68886566162109,0,0,0,14.5688095092773,0,0,0,14.9036712646484,0,0,0,-41.1813201904297,0,0,0,0,13.5508270263672,0,0,0,15.0712356567383,0,0,0,12.5593719482422,0,0,0,0,-32.3194122314453,0,0,0,14.9037780761719,0,0,0,15.238639831543,0,0,0,-35.8237457275391,0,0,0,0,9.86777496337891,0,0,0,14.7363204956055,0,0,0,13.5640640258789,0,0,0,0,-38.5152893066406,0,0,0,14.9037780761719,0,0,0,15.0711288452148,0,0,0,8.54039001464844,0,0,0,0,-33.9939346313477,0,0,0,14.4014053344727,0,0,0,14.2338409423828,0,0,0,-1.50487518310547,0,0,0,0,-25.4557342529297,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,-34.1497573852539,0,0,0,0,8.52875518798828,0,0,0,15.5735015869141,0,0,0,12.2244567871094,0,0,0,0,-33.8264236450195,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,-19.919921875,0,0,0,0,-6.37091064453125,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,0,-39.5199813842773,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,9.04276275634766,0,0,0,0,-35.1661911010742,0,0,0,3.34915161132812,0,0,0,14.0664367675781,0,0,0,15.0711822509766,0,0,0,-23.2682189941406,0,0,0,0,-4.19476318359375,0,0,0,14.736213684082,0,0,0,14.4014053344727,0,0,0,-32.643440246582,0,0,0,0,5.68272399902344,0,0,0,13.8990325927734,0,0,0,14.0664901733398,0,0,0,0,-33.1567001342773,0,0,0,14.7362670898438,0,0,0,14.9037246704102,0,0,0,-11.3822555541992,0,0,0,0,-19.765007019043,0,0,0,14.5688629150391,0,0,0,15.0711288452148,0,0,0,-4.35079956054688,0,0,0,0,-21.9400329589844,0,0,0,14.7363204956055,0,0,0,15.4060974121094,0,0,0,-39.1850662231445,0,0,0,15.238639831543,0,0,0,15.0711288452148,0,0,0,10.0475616455078,0,0,0,0,-32.9891891479492,0,0,0,15.0711288452148,0,0,0,14.7362670898438,0,0,0,-20.4221878051758,0,0,0,0,-6.03610229492188,0,0,0,14.4013519287109,0,0,0,11.554573059082,0,0,0,3.85157775878906,0,0,0,0,-40.5247268676758,0,0,0,15.0711822509766,0,0,0,14.736213684082,0,0,0,10.549934387207,0,0,0,0,-32.8217849731445,0,0,0,15.0711822509766,0,0,0,14.2338943481445,0,0,0,-15.7347640991211,0,0,0,0,-10.3886108398438,0,0,0,13.731575012207,0,0,0,14.736213684082,0,0,0,-41.3483505249023,0,0,0,0,15.559944152832,0,0,0,14.5688095092773,0,0,0,12.5593185424805,0,0,0,0,-35.3335952758789,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,-4.35074615478516,0,0,0,0,-21.1027450561523,0,0,0,15.5735015869141,0,0,0,15.238639831543,0,0,0,-40.5246734619141,0,0,0,15.0711822509766,0,0,0,14.9036712646484,0,0,0,10.5498809814453,0,0,0,0,-34.8312225341797,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,0.5040283203125,0,0,0,0,-26.794807434082,0,0,0,15.0711288452148,0,0,0,15.2386932373047,0,0,0,-39.0176086425781,0,0,0,14.5687561035156,0,0,0,14.9037780761719,0,0,0,10.8847961425781,0,0,0,0,-32.1519012451172,0,0,0,14.7362670898438,0,0,0,14.9036712646484,0,0,0,-26.6163558959961,0,0,0,0,0.660491943359375,0,0,0,15.238639831543,0,0,0,13.3966064453125,0,0,0,0,-36.6732559204102,0,0,0,15.4060974121094,0,0,0,14.9037780761719,0,0,0,6.19598388671875,0,0,0,0,-41.1946640014648,0,0,0,9.88005065917969,0,0,0,14.4012985229492,0,0,0,14.5688629150391,0,0,0,-25.9468460083008,0,0,0,0,-1.85110473632812,0,0,0,13.7315216064453,0,0,0,14.0663833618164,0,0,0,-16.7162017822266,0,0,0,0,-11.4695816040039,0,0,0,14.2338409423828,0,0,0,15.0711822509766,0,0,0,-35.9913635253906,0,0,0,0,10.0353393554688,0,0,0,15.5735549926758,0,0,0,11.7220840454102,0,0,0,0,-32.3194122314453,0,0,0,14.2339477539062,0,0,0,14.736213684082,0,0,0,-16.4044342041016,0,0,0,0,-9.71894073486328,0,0,0,14.5688095092773,0,0,0,15.0712356567383,0,0,0,0,-40.5247268676758,0,0,0,14.5688095092773,0,0,0,14.9036712646484,0,0,0,10.8848495483398,0,0,0,0,-32.48681640625,0,0,0,14.736213684082,0,0,0,15.0712356567383,0,0,0,-18.078742980957,0,0,0,0,-8.88197326660156,0,0,0,14.9037780761719,0,0,0,6.36338806152344,0,0,0,8.54033660888672,0,0,0,0,-40.5247268676758,0,0,0,13.89892578125,0,0,0,14.9037780761719,0,0,0,11.7220306396484,0,0,0,0,-37.1756286621094,0,0,0,14.7363204956055,0,0,0,14.5687561035156,0,0,0,7.70315551757812,0,0,0,0,-32.8217315673828,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,-27.1185150146484,0,0,0,0,1.83242797851562,0,0,0,15.2385864257812,0,0,0,13.0617446899414,0,0,0,0,-39.5200347900391,0,0,0,10.2149658203125,0,0,0,6.36333465576172,0,0,0,12.3918609619141,0,0,0,10.5498809814453,0,0,0,0,-38.3478317260742,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,8.54044342041016,0,0,0,0,-32.6543273925781,0,0,0,14.4013519287109,0,0,0,14.2338943481445,0,0,0,-9.5406494140625,0,0,0,0,-17.7549285888672,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,-39.5199813842773,0,0,0,15.238639831543,0,0,0,14.9037246704102,0,0,0,10.3823699951172,0,0,0,0,-33.6589660644531,0,0,0,15.5735015869141,0,0,0,14.5688095092773,0,0,0,-21.5939636230469,0,0,0,0,-4.19449615478516,0,0,0,14.9037246704102,0,0,0,14.4014053344727,0,0,0,0,-40.5247268676758,0,0,0,15.238639831543,0,0,0,14.0664367675781,0,0,0,11.2196578979492,0,0,0,0,-33.9939346313477,0,0,0,14.0664901733398,0,0,0,3.68401336669922,0,0,0,11.7220840454102,0,0,0,-11.7168502807617,0,0,0,0,-14.4065246582031,0,0,0,14.736213684082,0,0,0,14.0664367675781,0,0,0,-30.1321105957031,0,0,0,0,3.17144775390625,0,0,0,14.2338943481445,0,0,0,14.5688629150391,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-43.6644973754883,0,0,0,0,4.85621643066406,0,0,0,14.0664901733398,0,0,0,15.0711288452148,0,0,0,9.37773132324219,0,0,0,0,-33.9939880371094,0,0,0,10.5498809814453,0,0,0,15.2385864257812,0,0,0,8.20552825927734,0,0,0,0,-33.324104309082,0,0,0,14.7362670898438,0,0,0,15.0711822509766,0,0,0,-21.2591552734375,0,0,0,0,-5.36664581298828,0,0,0,15.0711822509766,0,0,0,13.0616912841797,0,0,0,-18.0789031982422,0,0,0,0,-10.2213668823242,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,-13.2248764038086,0,0,0,0,-26.9649353027344,0,0,0,11.7220306396484,0,0,0,14.5688095092773,0,0,0,13.8990325927734,0,0,0,0,-33.3241577148438,0,0,0,14.5688629150391,0,0,0,13.7314682006836,0,0,0,-1.67233276367188,0,0,0,0,-26.1255645751953,0,0,0,14.7362670898438,0,0,0,13.7314682006836,0,0,0,-8.87092590332031,0,0,0,0,-17.5873107910156,0,0,0,14.2338409423828,0,0,0,14.9037246704102,0,0,0,-29.4624938964844,0,0,0,0,1.83205413818359,0,0,0,14.9036712646484,0,0,0,14.4014587402344,0,0,0,0,-32.6543273925781,0,0,0,15.2386932373047,0,0,0,15.238639831543,0,0,0,-27.1187286376953,0,0,0,0,-0.176849365234375,0,0,0,15.4060974121094,0,0,0,14.2338943481445,0,0,0,0,-38.6826934814453,0,0,0,9.04270935058594,0,0,0,12.8941802978516,0,0,0,14.7363204956055,0,0,0,-32.6431732177734,0,0,0,0,6.18488311767578,0,0,0,15.0711288452148,0,0,0,13.2292556762695,0,0,0,0,-33.3241577148438,0,0,0,14.4013519287109,0,0,0,15.0711822509766,0,0,0,-15.0650405883789,0,0,0,0,-11.895622253418,0,0,0,15.0712356567383,0,0,0,15.2385864257812,0,0,0,-42.0318069458008,0,0,0,15.9084854125977,0,0,0,13.5282516479492,0,0,0,11.8894882202148,0,0,0,-17.576904296875,0,0,0,0,-16.1140594482422,0,0,0,4.68875885009766,0,0,0,8.87530517578125,0,0,0,11.3870620727539,0,0,0,10.0475616455078,0,0,0,0,-34.4963073730469,0,0,0,14.9037246704102,0,0,0,15.238639831543,0,0,0,4.35395050048828,0,0,0,0,-33.4915618896484,0,0,0,15.5735549926758,0,0,0,14.5688095092773,0,0,0,-4.18398284912109,0,0,0,0,-23.9488830566406,0,0,0,15.5735549926758,0,0,0,15.4060974121094,0,0,0,-30.2999420166016,0,0,0,0,2.33437347412109,0,0,0,14.4012985229492,0,0,0,14.0665435791016,0,0,0,0,-32.8217849731445,0,0,0,14.7363204956055,0,0,0,14.5688095092773,0,0,0,-2.17507934570312,0,0,0,0,-26.2927017211914,0,0,0,15.0711822509766,0,0,0,15.7409591674805,0,0,0,-17.7443618774414,0,0,0,0,-11.393196105957,0,0,0,15.0711288452148,0,0,0,14.9037780761719,0,0,0,-28.4585494995117,0,0,0,0,-0.00928497314453125,0,0,0,8.20542144775391,0,0,0,5.69355773925781,0,0,0,11.3871688842773,0,0,0,3.68406677246094,0,0,0,0,-35.8359680175781,0,0,0,14.0664367675781,0,0,0,15.2386932373047,0,0,0,6.36344146728516,0,0,0,0,-33.6590728759766,0,0,0,14.4013519287109,0,0,0,15.0712356567383,0,0,0,0.50360107421875,0,0,0,0,-29.1388397216797,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,-7.36482238769531,0,0,0,0,-20.7680969238281,0,0,0,14.9037246704102,0,0,0,14.5688095092773,0,0,0,-17.4094467163086,0,0,0,0,-10.8908767700195,0,0,0,14.9037246704102,0,0,0,13.8990325927734,0,0,0,-23.4362106323242,0,0,0,0,-5.03162384033203,0,0,0,15.0711822509766,0,0,0,14.5688629150391,0,0,0,0,-37.5105438232422,0,0,0,15.4060974121094,0,0,0,15.2386932373047,0,0,0,6.69835662841797,0,0,0,0,-32.9892425537109,0,0,0,15.5735549926758,0,0,0,14.4014053344727,0,0,0,-5.52332305908203,0,0,0,0,-22.6095962524414,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-27.6214218139648,0,0,0,0,-0.678848266601562,0,0,0,15.4060440063477,0,0,0,13.5641174316406,0,0,0,0,-34.6637115478516,0,0,0,15.2385864257812,0,0,0,15.4060974121094,0,0,0,0.838356018066406,0,0,0,0,-29.8085098266602,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-3.68177032470703,0,0,0,0,-33.6612243652344,0,0,0,11.8894500732422,0,0,0,11.3871154785156,0,0,0,14.5688095092773,0,0,0,-3.17971801757812,0,0,0,0,-26.4602127075195,0,0,0,14.4012985229492,0,0,0,14.4013519287109,0,0,0,3.51671600341797,0,0,0,0,-34.1613922119141,0,0,0,14.5687942504883,0,0,0,14.2338562011719,0,0,0,5.35874938964844,0,0,0,0,-33.1567001342773,0,0,0,15.4061508178711,0,0,0,13.8989791870117,0,0,0,-1.33795166015625,0,0,0,0,-29.8093109130859,0,0,0,15.4060974121094,0,0,0,15.4060440063477,0,0,0,4.18654632568359,0,0,0,0,-32.8217315673828,0,0,0,14.7362670898438,0,0,0,14.4012985229492,0,0,0,-3.01199340820312,0,0,0,0,-25.288330078125,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,-20.7575302124023,0,0,0,0,-7.5428466796875,0,0,0,14.5688095092773,0,0,0,15.238639831543,0,0,0,-31.9740371704102,0,0,0,0,3.50625610351562,0,0,0,3.51660919189453,0,0,0,10.3824234008789,0,0,0,13.7314682006836,0,0,0,-21.2599029541016,0,0,0,0,-7.71025085449219,0,0,0,13.8989791870117,0,0,0,14.7362670898438,0,0,0,-10.8807373046875,0,0,0,0,-19.4290237426758,0,0,0,14.5688095092773,0,0,0,14.2338409423828,0,0,0,-4.68630218505859,0,0,0,0,-24.1163940429688,0,0,0,15.4061508178711,0,0,0,15.5735549926758,0,0,0,-28.2910385131836,0,0,0,0,-0.51165771484375,0,0,0,15.4060440063477,0,0,0,14.2339477539062,0,0,0,0,-38.8501510620117,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,8.20547485351562,0,0,0,0,-33.1566467285156,0,0,0,14.7362670898438,0,0,0,14.2338409423828,0,0,0,4.18654632568359,0,0,0,0,-32.8217849731445,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-7.19741821289062,0,0,0,0,-21.4378204345703,0,0,0,15.238639831543,0,0,0,14.9036712646484,0,0,0,-20.0879669189453,0,0,0,0,-8.18899536132812,0,0,0,15.4060974121094,0,0,0,14.4014053344727,0,0,0,0,-40.6010589599609,0,0,0,14.9036712646484,0,0,0,15.4060974121094,0,0,0,10.2149658203125,0,0,0,0,-33.6590194702148,0,0,0,15.0712356567383,0,0,0,15.0711288452148,0,0,0,-4.68614196777344,0,0,0,0,-23.1118087768555,0,0,0,15.0711822509766,0,0,0,15.2386932373047,0,0,0,-4.85440063476562,0,0,0,0,-30.3001556396484,0,0,0,0,5.34711456298828,0,0,0,14.2338943481445,0,0,0,15.0711288452148,0,0,0,-17.576904296875,0,0,0,0,-12.2305374145508,0,0,0,14.5688095092773,0,0,0,14.2339477539062,0,0,0,-13.3915328979492,0,0,0,0,-15.7461318969727,0,0,0,14.0664901733398,0,0,0,15.2385864257812,0,0,0,-4.35170745849609,0,0,0,0,-25.2882232666016,0,0,0,15.238639831543,0,0,0,14.736213684082,0,0,0,-12.8894271850586,0,0,0,0,-15.9134292602539,0,0,0,15.4060974121094,0,0,0,15.0711822509766,0,0,0,-28.1237411499023,0,0,0,0,-0.511444091796875,0,0,0,15.4060440063477,0,0,0,13.5641174316406,0,0,0,0,-38.3478317260742,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,8.03807067871094,0,0,0,0,-32.8217315673828,0,0,0,15.4060974121094,0,0,0,15.0711288452148,0,0,0,-2.6776123046875,0,0,0,0,-27.297233581543,0,0,0,6.86576080322266,0,0,0,7.36808013916016,0,0,0,14.7362670898438,0,0,0,-3.17950439453125,0,0,0,0,-26.4604797363281,0,0,0,14.0664367675781,0,0,0,13.7315216064453,0,0,0,5.19129180908203,0,0,0,0,-32.8217315673828,0,0,0,14.2338943481445,0,0,0,15.238639831543,0,0,0,-3.51436614990234,0,0,0,0,-25.288330078125,0,0,0,15.238639831543,0,0,0,15.5735015869141,0,0,0,-20.25537109375,0,0,0,0,-8.04495239257812,0,0,0,15.5736083984375,0,0,0,14.2338943481445,0,0,0,0,-39.3525772094727,0,0,0,15.0712356567383,0,0,0,14.4013519287109,0,0,0,9.87999725341797,0,0,0,0,-33.4915618896484,0,0,0,14.4013519287109,0,0,0,14.4013519287109,0,0,0,4.52146148681641,0,0,0,0,-32.8217315673828,0,0,0,15.2385864257812,0,0,0,14.7362670898438,0,0,0,-3.17966461181641,0,0,0,0,-26.1253509521484,0,0,0,15.4060974121094,0,0,0,14.9036712646484,0,0,0,-15.2330856323242,0,0,0,0,-12.7322692871094,0,0,0,14.9036712646484,0,0,0,14.9037780761719,0,0,0,-31.8067398071289,0,0,0,0,3.50636291503906,0,0,0,14.5688629150391,0,0,0,13.731575012207,0,0,0,0,-32.6542739868164,0,0,0,15.0711288452148,0,0,0,14.5688629150391,0,0,0,-6.02553558349609,0,0,0,0,-22.1073837280273,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,-22.5991897583008,0,0,0,0,-16.9207382202148,0,0,0,11.8894348144531,0,0,0,13.5641174316406,0,0,0,14.4012985229492,0,0,0,-25.4451675415039,0,0,0,0,-4.69713592529297,0,0,0,14.5687561035156,0,0,0,15.0711822509766,0,0,0,-18.0792236328125,0,0,0,0,-11.3932495117188,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,-16.5727996826172,0,0,0,0,-13.2346954345703,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,-30.1325378417969,0,0,0,0,-1.01472473144531,0,0,0,14.9037780761719,0,0,0,15.4060440063477,0,0,0,-22.9338912963867,0,0,0,0,-5.36643218994141,0,0,0,14.9037246704102,0,0,0,14.7363204956055,0,0,0,0,-33.6589660644531,0,0,0,15.0711822509766,0,0,0,15.5735015869141,0,0,0,-7.53217315673828,0,0,0,0,-20.433235168457,0,0,0,14.7363204956055,0,0,0,14.2338943481445,0,0,0,-12.2198638916016,0,0,0,0,-17.0852584838867,0,0,0,8.37287902832031,0,0,0,6.19593048095703,0,0,0,15.238639831543,0,0,0,-20.25537109375,0,0,0,0,-9.04969787597656,0,0,0,14.5688095092773,0,0,0,14.9037780761719,0,0,0,-18.9162445068359,0,0,0,0,-10.0539627075195,0,0,0,14.7363204956055,0,0,0,14.2338409423828,0,0,0,-20.088020324707,0,0,0,0,-8.882080078125,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,-33.6481857299805,0,0,0,0,5.68277740478516,0,0,0,15.4060440063477,0,0,0,12.7268295288086,0,0,0,0,-40.5247268676758,0,0,0,14.736213684082,0,0,0,14.7362670898438,0,0,0,10.9695892333984,0,0,0,-35.9202423095703,0,0,0,14.903694152832,0,0,0,15.071159362793,0,0,0,5.95223236083984,0,0,0,0,-32.4531555175781,0,0,0,14.7362670898438,0,0,0,14.7362670898438,0,0,0,-3.68187713623047,0,0,0,0,-25.1207656860352,0,0,0,15.4060974121094,0,0,0,15.0711288452148,0,0,0,-19.9206161499023,0,0,0,0,-7.70987701416016,0,0,0,15.2386932373047,0,0,0,13.7315216064453,0,0,0,0,-33.6589660644531,0,0,0,15.238639831543,0,0,0,15.4060821533203,0,0,0,-7.69961547851562,0,0,0,0,-19.9309158325195,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-33.6481323242188,0,0,0,0,6.18509674072266,0,0,0,14.5688095092773,0,0,0,13.0617446899414,0,0,0,0,-40.0223541259766,0,0,0,7.20067596435547,0,0,0,10.8846893310547,0,0,0,11.3871688842773,0,0,0,10.5498275756836,0,0,0,0,-37.5104904174805,0,0,0,14.736213684082,0,0,0,14.2338943481445,0,0,0,8.54039001464844,0,0,0,0,-34.8312225341797,0,0,0,14.2339477539062,0,0,0,14.5687561035156,0,0,0,5.86112213134766,0,0,0,0,-33.324104309082,0,0,0,15.4060440063477,0,0,0,15.238639831543,0,0,0,2.80868530273438,0,0,0,0,-34.4816055297852,0,0,0,12.5593719482422,0,0,0,12.7267227172852,0,0,0,9.21022033691406,0,0,0,0,-36.1708831787109,0,0,0,14.9037780761719,0,0,0,15.5735015869141,0,0,0,5.52620697021484,0,0,0,0,-33.324104309082,0,0,0,14.5688095092773,0,0,0,13.89892578125,0,0,0,4.85637664794922,0,0,0,0,-31.9844436645508,0,0,0,14.9036712646484,0,0,0,14.4013519287109,0,0,0,-7.03001403808594,0,0,0,0,-20.7678833007812,0,0,0,11.8894882202148,0,0,0,3.34915161132812,0,0,0,13.3966064453125,0,0,0,-17.9116058349609,0,0,0,0,-10.2212600708008,0,0,0,15.0711288452148,0,0,0,14.5688095092773,0,0,0,-26.2822418212891,0,0,0,0,-2.68791198730469,0,0,0,15.0711822509766,0,0,0,14.4014053344727,0,0,0,0,-36.1708831787109,0,0,0,14.4013519287109,0,0,0,14.7362670898438,0,0,0,6.86586761474609,0,0,0,0,-32.3194122314453,0,0,0,14.7363204956055,0,0,0,15.0711822509766,0,0,0,-13.3914794921875,0,0,0,0,-14.239013671875,0,0,0,15.2385864257812,0,0,0,14.2338943481445,0,0,0,-25.4451141357422,0,0,0,0,-2.68775177001953,0,0,0,14.9037246704102,0,0,0,14.0664901733398,0,0,0,0,-40.189811706543,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,9.21022033691406,0,0,0,0,-32.6542739868164,0,0,0,14.736213684082,0,0,0,15.238639831543,0,0,0,-6.36039733886719,0,0,0,0,-22.2748413085938,0,0,0,15.4060974121094,0,0,0,15.0711822509766,0,0,0,-24.9428482055664,0,0,0,0,-2.85504913330078,0,0,0,15.5735015869141,0,0,0,13.2292022705078,0,0,0,0,-33.324104309082,0,0,0,14.7362670898438,0,0,0,14.9037780761719,0,0,0,-2.67729187011719,0,0,0,0,-26.1254043579102,0,0,0,14.7362670898438,0,0,0,14.4013519287109,0,0,0,-1.6729736328125,0,0,0,0,-27.1297760009766,0,0,0,4.01903533935547,0,0,0,11.554573059082,0,0,0,15.0711822509766,0,0,0,-18.4139785766602,0,0,0,0,-10.0538558959961,0,0,0,13.2292022705078,0,0,0,14.5687561035156,0,0,0,-12.8893737792969,0,0,0,0,-15.5784072875977,0,0,0,14.2338943481445,0,0,0,13.8989791870117,0,0,0,-5.18867492675781,0,0,0,0,-25.6235122680664,0,0,0,14.2338943481445,0,0,0,14.9037780761719,0,0,0,4.18643951416016,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-0.0762939453125,0,0,0,0,-43.4822006225586,0,0,0,0,12.3918609619141,0,0,0,15.4060440063477,0,0,0,14.4013519287109,0,0,0,-32.1410675048828,0,0,0,0,4.1756591796875,0,0,0,15.238639831543,0,0,0,14.2339477539062,0,0,0,0,-36.3383407592773,0,0,0,15.238639831543,0,0,0,15.0712356567383,0,0,0,-0.667694091796875,0,0,0,0,-31.4841537475586,0,0,0,5.02367401123047,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-25.611930847168,0,0,0,0,-1.51618957519531,0,0,0,14.2338943481445,0,0,0,13.3966064453125,0,0,0,-26.7839202880859,0,0,0,0,-0.344200134277344,0,0,0,15.0712356567383,0,0,0,14.2338943481445,0,0,0,0,-39.5199813842773,0,0,0,14.9037246704102,0,0,0,14.4013519287109,0,0,0,10.0708160400391,0,0,0,0,-36.5820770263672,0,0,0,14.2338943481445,0,0,0,15.4060440063477,0,0,0,6.86586761474609,0,0,0,0,-32.6542739868164,0,0,0,14.736213684082,0,0,0,14.4013519287109,0,0,0,-17.7436141967773,0,0,0,0,-8.882080078125,0,0,0,14.736213684082,0,0,0,14.4013519287109,0,0,0,-39.687385559082,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,9.88005065917969,0,0,0,0,-33.3241577148438,0,0,0,15.238639831543,0,0,0,14.4014053344727,0,0,0,-14.5629348754883,0,0,0,0,-11.727897644043,0,0,0,15.4060440063477,0,0,0,14.7363204956055,0,0,0,0,-38.5152359008789,0,0,0,14.7362670898438,0,0,0,15.0711822509766,0,0,0,8.70779418945312,0,0,0,0,-34.6637115478516,0,0,0,15.4060974121094,0,0,0,15.5735015869141,0,0,0,-17.0739974975586,0,0,0,0,-9.38423919677734,0,0,0,14.5687561035156,0,0,0,14.7363204956055,0,0,0,-41.5295257568359,0,0,0,8.87530517578125,0,0,0,8.70774078369141,0,0,0,12.056999206543,0,0,0,12.7267761230469,0,0,0,0,-36.1708831787109,0,0,0,13.8989791870117,0,0,0,14.5688629150391,0,0,0,7.53564453125,0,0,0,0,-33.4916152954102,0,0,0,15.0711822509766,0,0,0,14.7362670898438,0,0,0,-17.7435607910156,0,0,0,0,-8.54727172851562,0,0,0,15.238639831543,0,0,0,14.9037780761719,0,0,0,0,-39.0176086425781,0,0,0,14.9036712646484,0,0,0,14.5688629150391,0,0,0,9.37767791748047,0,0,0,0,-32.821891784668,0,0,0,10.0474014282227,0,0,0,13.0616912841797,0,0,0,9.712646484375,0,0,0,0,-32.6543273925781,0,0,0,14.7363204956055,0,0,0,14.736213684082,0,0,0,-15.9022750854492,0,0,0,0,-11.5607070922852,0,0,0,14.5688095092773,0,0,0,15.4060974121094,0,0,0,-40.0223541259766,0,0,0,15.4060440063477,0,0,0,14.9037780761719,0,0,0,6.69830322265625,0,0,0,3.85152435302734,0,0,0,0,-38.5152893066406,0,0,0,15.0712356567383,0,0,0,14.736213684082,0,0,0,8.54044342041016,0,0,0,0,-32.9892425537109,0,0,0,15.0711822509766,0,0,0,14.9037780761719,0,0,0,-25.6118240356445,0,0,0,0,-0.344093322753906,0,0,0,14.0663833618164,0,0,0,15.0712356567383,0,0,0,0,-39.0176086425781,0,0,0,15.0711288452148,0,0,0,15.4061508178711,0,0,0,8.37293243408203,0,0,0,0,-33.6590728759766,0,0,0,12.8942337036133,0,0,0,12.894287109375,0,0,0,7.87050628662109,0,0,0,0.167457580566406,0,0,0,0,-39.3525772094727,0,0,0,11.554573059082,0,0,0,14.9037246704102,0,0,0,12.894287109375,0,0,0,0,-37.1755752563477,0,0,0,14.5688095092773,0,0,0,14.9037246704102,0,0,0,7.53564453125,0,0,0,0,-33.1567001342773,0,0,0,14.4014053344727,0,0,0,14.2338943481445,0,0,0,-5.0206298828125,0,0,0,0,-21.9400329589844,0,0,0,15.4060974121094,0,0,0,15.5735015869141,0,0,0,-41.864387512207,0,0,0,15.9084701538086,0,0,0,15.4060974121094,0,0,0,11.2197113037109,0,0,0,0,-33.6589660644531,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-18.24609375,0,0,0,0,-9.55185699462891,0,0,0,14.5687561035156,0,0,0,14.2339477539062,0,0,0,-33.9824066162109,0,0,0,0,7.35660552978516,0,0,0,5.86101531982422,0,0,0,8.37293243408203,0,0,0,14.4013519287109,0,0,0,0,-37.845458984375,0,0,0,14.4014053344727,0,0,0,13.3965530395508,0,0,0,9.88010406494141,0,0,0,0,-33.6590728759766,0,0,0,14.0664367675781,0,0,0,14.9037246704102,0,0,0,-6.02494812011719,0,0,0,0,-21.4380874633789,0,0,0,14.9037780761719,0,0,0,15.238639831543,0,0,0,-36.3260116577148,0,0,0,0,10.7049560546875,0,0,0,14.2338943481445,0,0,0,13.5641174316406,0,0,0,0,-41.1947326660156,0,0,0,15.4060592651367,0,0,0,14.7363204956055,0,0,0,10.8847961425781,0,0,0,0,-33.1567001342773,0,0,0,15.5735549926758,0,0,0,15.0712356567383,0,0,0,-26.1141967773438,0,0,0,0,-1.01397705078125,0,0,0,15.0711822509766,0,0,0,14.7363204956055,0,0,0,0,-35.8359680175781,0,0,0,14.8679656982422,0,0,0,12.7267761230469,0,0,0,8.20547485351562,0,0,0,0,-37.7100524902344,0,0,0,2.6793212890625,0,0,0,4.52135467529297,0,0,0,2.17698669433594,0,0,0,8.54029846191406,0,0,0,12.0569458007812,0,0,0,7.70310211181641,0,0,0,0,-36.3383407592773,0,0,0,15.0711822509766,0,0,0,13.5640640258789,0,0,0,7.70310211181641,0,0,0,0,-40.5247268676758,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,11.0522003173828,0,0,0,0,-38.1803741455078,0,0,0,14.2339477539062,0,0,0,15.2385864257812,0,0,0,8.54044342041016,0,0,0,0,-32.8217315673828,0,0,0,14.7362670898438,0,0,0,14.5687561035156,0,0,0,-1.17060089111328,0,0,0,0,-27.1296691894531,0,0,0,15.2385864257812,0,0,0,15.4060974121094,0,0,0,-24.4405288696289,0,0,0,0,-3.52487945556641,0,0,0,15.0712356567383,0,0,0,14.2338943481445,0,0,0,0,-39.5199813842773,0,0,0,14.7362670898438,0,0,0,15.0711288452148,0,0,0,9.54518890380859,0,0,0,0,-32.6542739868164,0,0,0,14.4012985229492,0,0,0,14.9037780761719,0,0,0,-2.17513275146484,0,0,0,0,-26.7950744628906,0,0,0,14.9037780761719,0,0,0,14.0664367675781,0,0,0,0.00112152099609375,0,0,0,0,-29.4737014770508,0,0,0,15.0712356567383,0,0,0,14.736213684082,0,0,0,-4.68624877929688,0,0,0,0,-23.6140747070312,0,0,0,14.4013519287109,0,0,0,15.238639831543,0,0,0,-15.4005432128906,0,0,0,0,-22.6123199462891,0,0,0,6.69830322265625,0,0,0,15.0712356567383,0,0,0,14.5688095092773,0,0,0,-0.835899353027344,0,0,0,0,-27.966796875,0,0,0,13.5640640258789,0,0,0,15.2385864257812,0,0,0,-3.17950439453125,0,0,0,0,-24.9533615112305,0,0,0,15.4061508178711,0,0,0,15.4060440063477,0,0,0,-24.4406890869141,0,0,0,0,-4.69686889648438,0,0,0,15.0711822509766,0,0,0,14.9037246704102,0,0,0,0,-33.1565933227539,0,0,0,15.5735015869141,0,0,0,14.7363204956055,0,0,0,-9.20632171630859,0,0,0,0,-18.7592468261719,0,0,0,14.736213684082,0,0,0,14.9037780761719,0,0,0,-27.286506652832,0,0,0,0,-0.511444091796875,0,0,0,15.2385864257812,0,0,0,13.731575012207,0,0,0,0,-38.8502044677734,0,0,0,15.0712356567383,0,0,0,14.736213684082,0,0,0,8.87535858154297,0,0,0,0,-32.8217315673828,0,0,0,14.9037246704102,0,0,0,3.68401336669922,0,0,0,11.0522003173828,0,0,0,-3.34696197509766,0,0,0,0,-26.2930221557617,0,0,0,13.8989791870117,0,0,0,14.7363204956055,0,0,0,4.35389709472656,0,0,0,0,-33.4915618896484,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-4.68619537353516,0,0,0,0,-23.1117553710938,0,0,0,14.9037246704102,0,0,0,15.4060440063477,0,0,0,-27.286506652832,0,0,0,0,-1.85110473632812,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,-34.8199615478516,0,0,0,0,6.85455322265625,0,0,0,13.2292022705078,0,0,0,14.9037246704102,0,0,0,0,-40.5247268676758,0,0,0,15.4060974121094,0,0,0,15.4060440063477,0,0,0,9.71259307861328,0,0,0,0,-35.8359680175781,0,0,0,14.5688095092773,0,0,0,15.2386932373047,0,0,0,6.02847290039062,0,0,0,0,-33.3240509033203,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,-1.67281341552734,0,0,0,0,-27.2973937988281,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-15.4004364013672,0,0,0,0,-13.0672912597656,0,0,0,15.4060974121094,0,0,0,15.2385864257812,0,0,0,-32.811164855957,0,0,0,0,3.84101104736328,0,0,0,15.4061508178711,0,0,0,13.5640640258789,0,0,0,0,-40.5247268676758,0,0,0,14.9036712646484,0,0,0,14.9037246704102,0,0,0,10.7173385620117,0,0,0,0,-33.8264236450195,0,0,0,2.51186370849609,0,0,0,11.2196044921875,0,0,0,14.2338943481445,0,0,0,5.69366455078125,0,0,0,0,-32.8217849731445,0,0,0,14.5688095092773,0,0,0,14.7363204956055,0,0,0,3.51666259765625,0,0,0,0,-32.8217315673828,0,0,0,15.2385864257812,0,0,0,14.9037780761719,0,0,0,-4.01679229736328,0,0,0,0,-25.7906494140625,0,0,0,15.0711288452148,0,0,0,14.5688095092773,0,0,0,-9.03881072998047,0,0,0,0,-18.9265441894531,0,0,0,14.7362670898438,0,0,0,15.7410125732422,0,0,0,-27.1193161010742,0,0,0,0,-5.00938415527344,0,0,0,14.7362670898438,0,0,0,15.0711822509766,0,0,0,-4.853759765625,0,0,0,0,-24.1926727294922,0,0,0,14.736213684082,0,0,0,14.9037780761719,0,0,0,-14.0612030029297,0,0,0,0,-13.7367477416992,0,0,0,14.9036712646484,0,0,0,14.5688095092773,0,0,0,-27.7888259887695,0,0,0,0,-0.511497497558594,0,0,0,12.5593185424805,0,0,0,4.85626983642578,0,0,0,11.0522003173828,0,0,0,-24.9430084228516,0,0,0,0,-4.02714538574219,0,0,0,14.7363204956055,0,0,0,13.7315216064453,0,0,0,-13.8942260742188,0,0,0,0,-15.9132690429688,0,0,0,14.0664367675781,0,0,0,14.9037780761719,0,0,0,-17.2420425415039,0,0,0,0,-10.8908767700195,0,0,0,14.9037780761719,0,0,0,15.0711288452148,0,0,0,-36.6614608764648,0,0,0,0,8.69610595703125,0,0,0,15.2385864257812,0,0,0,12.5594253540039,0,0,0,0,-32.8217315673828,0,0,0,15.7409591674805,0,0,0,14.0664901733398,0,0,0,-6.02553558349609,0,0,0,0,-21.9399261474609,0,0,0,14.0664367675781,0,0,0,14.4013519287109,0,0,0,-10.2107467651367,0,0,0,0,-17.7546081542969,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,0,-38.1803741455078,0,0,0,15.5735549926758,0,0,0,13.7315216064453,0,0,0,8.87530517578125,0,0,0,0,-33.6589660644531,0,0,0,15.5735549926758,0,0,0,15.4060974121094,0,0,0,-9.87599182128906,0,0,0,0,-18.2569274902344,0,0,0,13.8990325927734,0,0,0,15.0711822509766,0,0,0,-18.9160842895508,0,0,0,0,-9.04937744140625,0,0,0,14.7363204956055,0,0,0,14.9037246704102,0,0,0,-33.3133773803711,0,0,0,0,5.18051147460938,0,0,0,15.238639831543,0,0,0,12.894287109375,0,0,0,0,-32.8217849731445,0,0,0,5.86101531982422,0,0,0,9.21022033691406,0,0,0,15.238639831543,0,0,0,-7.69973754882812,0,0,0,0,-21.2704696655273,0,0,0,14.2339477539062,0,0,0,14.4013519287109,0,0,0,0.0009613037109375,0,0,0,0,-30.1433181762695,0,0,0,14.2338943481445,0,0,0,12.8942337036133,0,0,0,5.86106872558594,0,0,0,0,-33.826530456543,0,0,0,14.4014053344727,0,0,0,14.9037246704102,0,0,0,4.52140808105469,0,0,0,0,-33.3241577148438,0,0,0,14.0664901733398,0,0,0,14.5687561035156,0,0,0,4.68891906738281,0,0,0,0,-32.4870071411133,0,0,0,15.4061279296875,0,0,0,15.238639831543,0,0,0,-18.2464141845703,0,0,0,0,-9.88650512695312,0,0,0,14.2339477539062,0,0,0,15.2385864257812,0,0,0,-29.6302719116211,0,0,0,0,1.66486358642578,0,0,0,15.238639831543,0,0,0,13.3966598510742,0,0,0,0,-40.1898651123047,0,0,0,14.2338943481445,0,0,0,14.9037780761719,0,0,0,3.85152435302734,0,0,0,7.20067596435547,0,0,0,0,-38.8502044677734,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,8.70784759521484,0,0,0,0,-37.6780014038086,0,0,0,14.9037780761719,0,0,0,14.9036712646484,0,0,0,7.87055969238281,0,0,0,0,-35.1660842895508,0,0,0,14.736213684082,0,0,0,14.5688095092773,0,0,0,5.69366455078125,0,0,0,0,-32.4868698120117,0,0,0,15.4061508178711,0,0,0,15.2385864257812,0,0,0,-14.5634689331055,0,0,0,0,-13.5693435668945,0,0,0,14.9037246704102,0,0,0,14.4012985229492,0,0,0,-23.4362640380859,0,0,0,0,-6.03620910644531,0,0,0,15.0711822509766,0,0,0,14.4013519287109,0,0,0,-21.7622756958008,0,0,0,0,-7.87770843505859,0,0,0,15.0711288452148,0,0,0,15.0712356567383,0,0,0,-28.9608154296875,0,0,0,0,0.325576782226562,0,0,0,15.238639831543,0,0,0,13.7315216064453,0,0,0,0,-39.0176620483398,0,0,0,15.0711822509766,0,0,0,15.238639831543,0,0,0,8.54044342041016,0,0,0,0,-32.6543273925781,0,0,0,14.9037246704102,0,0,0,14.2338943481445,0,0,0,-4.68608856201172,0,0,0,0,-23.4467239379883,0,0,0,15.0711288452148,0,0,0,15.0712356567383,0,0,0,-21.5946044921875,0,0,0,0,-6.20334625244141,0,0,0,15.4060440063477,0,0,0,14.0664901733398,0,0,0,0,-39.6874923706055,0,0,0,14.4013519287109,0,0,0,3.68412017822266,0,0,0,10.8847427368164,0,0,0,10.71728515625,0,0,0,0,-36.0033721923828,0,0,0,14.736213684082,0,0,0,14.7363204956055,0,0,0,6.31043243408203,0,0,0,-35.0893707275391,0,0,0,15.238639831543,0,0,0,15.0711822509766,0,0,0,4.77997589111328,0,0,0,0,-32.9258193969727,0,0,0,15.2386932373047,0,0,0,15.2385864257812,0,0,0,-7.86708831787109,0,0,0,0,-19.9308624267578,0,0,0,14.7362670898438,0,0,0,14.7363204956055,0,0,0,1.00474548339844,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-31.1417770385742,0,0,0,0,-9.89002227783203,0,0,0,14.2338943481445,0,0,0,14.9036712646484,0,0,0,11.8895416259766,0,0,0,0,-35.8359680175781,0,0,0,14.7362670898438,0,0,0,14.7363204956055,0,0,0,6.19598388671875,0,0,0,0,-35.501106262207,0,0,0,4.01898193359375,0,0,0,12.8942337036133,0,0,0,14.9037246704102,0,0,0,-13.5584564208984,0,0,0,0,-14.5743560791016,0,0,0,13.3966064453125,0,0,0,14.2338943481445,0,0,0,-6.52737426757812,0,0,0,0,-21.1031723022461,0,0,0,14.9037246704102,0,0,0,14.7362670898438,0,0,0,-32.3082046508789,0,0,0,0,5.84991455078125,0,0,0,15.4061508178711,0,0,0,13.2292022705078,0,0,0,0,-33.1566467285156,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,-27.6208877563477,0,0,0,0,0.827682495117188,0,0,0,14.5687561035156,0,0,0,14.4014053344727,0,0,0,-40.6921844482422,0,0,0,15.5735549926758,0,0,0,14.736213684082,0,0,0,10.549934387207,0,0,0,0,-32.9892425537109,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-25.9467926025391,0,0,0,0,-1.18132781982422,0,0,0,14.2339477539062,0,0,0,14.9036712646484,0,0,0,-40.5246734619141,0,0,0,15.5735549926758,0,0,0,15.4060440063477,0,0,0,10.0475082397461,0,0,0,0,-33.9939346313477,0,0,0,14.0664367675781,0,0,0,15.0712356567383,0,0,0,-9.03827667236328,0,0,0,0,-17.4200134277344,0,0,0,14.5688095092773,0,0,0,14.4013519287109,0,0,0,-27.7883453369141,0,0,0,0,0.995086669921875,0,0,0,15.0712356567383,0,0,0,14.0664367675781,0,0,0,0,-36.1708831787109,0,0,0,4.01903533935547,0,0,0,10.71728515625,0,0,0,15.5735015869141,0,0,0,2.68038940429688,0,0,0,0,-31.1481704711914,0,0,0,14.4013519287109,0,0,0,13.8990325927734,0,0,0,5.86106872558594,0,0,0,0,-33.9939880371094,0,0,0,14.5688629150391,0,0,0,14.2338409423828,0,0,0,0.671379089355469,0,0,0,0,-28.4693298339844,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-29.9644927978516,0,0,0,0,3.50625610351562,0,0,0,14.4013519287109,0,0,0,14.5688095092773,0,0,0,0,-35.8359680175781,0,0,0,14.9037246704102,0,0,0,14.7363204956055,0,0,0,1.50861358642578,0,0,0,0,-28.134521484375,0,0,0,15.2385864257812,0,0,0,14.9037246704102,0,0,0,-28.290397644043,0,0,0,0,1.66470336914062,0,0,0,15.238639831543,0,0,0,14.0664367675781,0,0,0,0,-38.6826934814453,0,0,0,14.0663833618164,0,0,0,14.7363204956055,0,0,0,7.36808013916016,0,0,0,2.51191711425781,0,0,0,0,-37.5105438232422,0,0,0,14.9037780761719,0,0,0,14.0664367675781,0,0,0,8.37293243408203,0,0,0,0,-34.4963073730469,0,0,0,15.238639831543,0,0,0,14.7362670898438,0,0,0,-4.18360900878906,0,0,0,0,-22.7770538330078,0,0,0,15.0711822509766,0,0,0,14.9036712646484,0,0,0,-34.317268371582,0,0,0,0,7.69152069091797,0,0,0,15.2386932373047,0,0,0,13.0616912841797,0,0,0,0,-35.8359680175781,0,0,0,15.2386932373047,0,0,0,15.238639831543,0,0,0,-1.83973693847656,0,0,0,0,-27.6328430175781,0,0,0,10.5498275756836,0,0,0,14.7363204956055,0,0,0,9.37767791748047,0,0,0,0,-34.4963607788086,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-13.8932113647461,0,0,0,0,-12.8999404907227,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-40.6921844482422,0,0,0,15.2385864257812,0,0,0,15.4061508178711,0,0,0,10.2149658203125,0,0,0,0,-33.324104309082,0,0,0,15.5735549926758,0,0,0,15.2385864257812,0,0,0,-25.2771224975586,0,0,0,0,-1.51608276367188,0,0,0,15.0711822509766,0,0,0,14.234001159668,0,0,0,0,-33.1566467285156,0,0,0,14.9270858764648,0,0,0,15.238639831543,0,0,0,-24.0141296386719,0,0,0,0,-2.52054595947266,0,0,0,14.9037780761719,0,0,0,8.37287902832031,0,0,0,5.69355773925781,0,0,0,-40.189811706543,0,0,0,15.4060440063477,0,0,0,14.7363204956055,0,0,0,10.5498809814453,0,0,0,0,-33.4916152954102,0,0,0,14.7363204956055,0,0,0,14.5688095092773,0,0,0,-8.53622436523438,0,0,0,0,-18.2570343017578,0,0,0,14.7363204956055,0,0,0,14.4013519287109,0,0,0,-27.1188354492188,0,0,0,0,-0.846626281738281,0,0,0,15.238639831543,0,0,0,12.5593185424805,0,0,0,-16.0700531005859,0,0,0,0,-14.4072189331055,0,0,0,12.5593719482422,0,0,0,13.2290954589844,0,0,0,6.69841003417969,0,0,0,0,-36.1710968017578,0,0,0,15.238639831543,0,0,0,14.9037246704102,0,0,0,1.5086669921875,0,0,0,0,-28.6367874145508,0,0,0,14.5688629150391,0,0,0,15.5735549926758,0,0,0,-23.6029739379883,0,0,0,0,-3.19028472900391,0,0,0,15.4060974121094,0,0,0,13.5640640258789,0,0,0,-40.3440322875977,0,0,0,0,2.83359527587891,0,0,0,9.87994384765625,0,0,0,14.7362670898438,0,0,0,13.8990325927734,0,0,0,0,-38.8502044677734,0,0,0,13.2292022705078,0,0,0,14.2338409423828,0,0,0,11.2197647094727,0,0,0,0,-33.6590728759766,0,0,0,14.7363204956055,0,0,0,14.5687561035156,0,0,0,-5.18803405761719,0,0,0,0,-22.1074905395508,0,0,0,15.0711288452148,0,0,0,14.4014053344727,0,0,0,-33.4800872802734,0,0,0,0,7.35671234130859,0,0,0,14.5687561035156,0,0,0,13.7316284179688,0,0,0,0,-33.6590194702148,0,0,0,13.5640640258789,0,0,0,15.238639831543,0,0,0,-6.86196899414062,0,0,0,0,-19.596321105957,0,0,0,15.2385864257812,0,0,0,14.9037246704102,0,0,0,-36.8284378051758,0,0,0,0,10.3701477050781,0,0,0,14.0664367675781,0,0,0,13.731575012207,0,0,0,0,-38.5152893066406,0,0,0,15.4060974121094,0,0,0,14.7363204956055,0,0,0,8.20547485351562,0,0,0,0,-32.9892425537109,0,0,0,15.4061508178711,0,0,0,15.4060440063477,0,0,0,-30.8015670776367,0,0,0,0,3.50598907470703,0,0,0,15.0711822509766,0,0,0,14.0664367675781,0,0,0,-40.3572158813477,0,0,0,15.5735015869141,0,0,0,15.2386932373047,0,0,0,9.88005065917969,0,0,0,0,-33.1566467285156,0,0,0,15.4060974121094,0,0,0,14.0664367675781,0,0,0,-13.8933181762695,0,0,0,0,-22.4449691772461,0,0,0,8.37287902832031,0,0,0,15.238639831543,0,0,0,14.4013519287109,0,0,0,-27.4535903930664,0,0,0,0,-0.846733093261719,0,0,0,14.2338943481445,0,0,0,14.5688095092773,0,0,0,-36.326171875,0,0,0,0,9.197998046875,0,0,0,14.4014053344727,0,0,0,14.4013519287109,0,0,0,0,-33.9939346313477,0,0,0,15.0711822509766,0,0,0,14.4013519287109,0,0,0,-12.3864135742188,0,0,0,0,-14.0718765258789,0,0,0,14.5688095092773,0,0,0,14.7362670898438,0,0,0,-31.4713973999023,0,0,0,0,4.51057434082031,0,0,0,14.9037246704102,0,0,0,13.731575012207,0,0,0,0,-39.3525238037109,0,0,0,14.9037246704102,0,0,0,14.9037246704102,0,0,0,9.37767791748047,0,0,0,0,-32.9892425537109,0,0,0,14.5688629150391,0,0,0,15.0711822509766,0,0,0,-22.2636337280273,0,0,0,0,-3.69233703613281,0,0,0,15.0711822509766,0,0,0,6.02847290039062,0,0,0,8.37293243408203,0,0,0,0,-40.8596420288086,0,0,0,14.9037246704102,0,0,0,14.2338943481445,0,0,0,11.5546264648438,0,0,0,0,-33.8264770507812,0,0,0,14.9036712646484,0,0,0,14.5688629150391,0,0,0,-4.35106658935547,0,0,0,0,-23.1119689941406,0,0,0,15.5735015869141,0,0,0,13.7315216064453,0,0,0,-26.7837600708008,0,0,0,0,0.660385131835938,0,0,0,15.2386932373047,0,0,0,13.5640640258789,0,0,0,0,-39.8549499511719,0,0,0,15.4060974121094,0,0,0,15.0712356567383,0,0,0,9.37762451171875,0,0,0,0,-34.9986267089844,0,0,0,14.5687561035156,0,0,0,15.0711822509766,0,0,0,0.00176239013671875,0,0,0,0,-27.4647445678711,0,0,0,14.9037246704102,0,0,0,14.5329971313477,0,0,0,3.18180084228516,0,0,0,0,-33.3562088012695,0,0,0,10.5498809814453,0,0,0,4.85621643066406,0,0,0,7.20072937011719,0,0,0,10.8847427368164,0,0,0,0,-36.1708831787109,0,0,0,14.7362670898438,0,0,0,14.0664901733398,0,0,0,7.36813354492188,0,0,0,0,-34.9986267089844,0,0,0,14.2338943481445,0,0,0,15.4060440063477,0,0,0,5.19129180908203,0,0,0,0,-32.8217849731445,0,0,0,15.0711822509766,0,0,0,15.4061508178711,0,0,0,-13.2241287231445,0,0,0,0,-15.4111099243164,0,0,0,15.5735549926758,0,0,0,15.4060440063477,0,0,0,-33.8155364990234,0,0,0,0,-3.86241149902344,0,0,0,9.37766265869141,0,0,0,13.8989410400391,0,0,0,14.5688095092773,0,0,0,-33.6481857299805,0,0,0,0,4.84548950195312,0,0,0,14.5688629150391,0,0,0,14.2338943481445,0,0,0,0,-39.1851196289062,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,8.70779418945312,0,0,0,0,-36.505744934082,0,0,0,15.0711288452148,0,0,0,15.2386932373047,0,0,0,6.02852630615234,0,0,0,0,-32.6543273925781,0,0,0,14.5688629150391,0,0,0,15.5735549926758,0,0,0,-12.3870544433594,0,0,0,0,-18.2578887939453,0,0,0,15.2386932373047,0,0,0,14.9037246704102,0,0,0,-6.69515228271484,0,0,0,0,-21.4377136230469,0,0,0,15.5735549926758,0,0,0,15.0711288452148,0,0,0,-24.9429550170898,0,0,0,0,-4.19460296630859,0,0,0,15.0711822509766,0,0,0,14.5687561035156,0,0,0,-33.8155364990234,0,0,0,0,5.85012817382812,0,0,0,13.731575012207,0,0,0,3.51660919189453,0,0,0,10.8847427368164,0,0,0,0,-40.3573226928711,0,0,0,14.7363204956055,0,0,0,15.2385864257812,0,0,0,10.3824234008789,0,0,0,0,-33.8264770507812,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-3.34685516357422,0,0,0,0,-24.1162338256836,0,0,0,14.7363204956055,0,0,0,14.9037246704102,0,0,0,-23.4360504150391,0,0,0,0,-3.85958099365234,0,0,0,15.0711822509766,0,0,0,13.8990325927734,0,0,0,0,-39.3525238037109,0,0,0,15.5735549926758,0,0,0,15.4060974121094,0,0,0,8.20547485351562,0,0,0,0,-32.8217315673828,0,0,0,14.4012985229492,0,0,0,14.4014053344727,0,0,0,0.00133514404296875,0,0,0,0,-28.4691696166992,0,0,0,15.4060974121094,0,0,0,14.5688629150391,0,0,0,-11.2152252197266,0,0,0,0,-16.7501831054688,0,0,0,13.7315216064453,0,0,0,15.0711288452148,0,0,0,-2.00820922851562,0,0,0,0,-33.9951095581055,0,0,0,11.8894348144531,0,0,0,9.54508209228516,0,0,0,11.0522003173828,0,0,0,5.19129180908203,0,0,0,0,-34.1613922119141,0,0,0,13.89892578125,0,0,0,14.7363204956055,0,0,0,5.52615356445312,0,0,0,0,-32.9892425537109,0,0,0,15.0712356567383,0,0,0,15.5735015869141,0,0,0,-6.02569580078125,0,0,0,0,-22.9444580078125,0,0,0,15.238639831543,0,0,0,15.4060974121094,0,0,0,-6.19363403320312,0,0,0,0,-30.4675598144531,0,0,0,0,5.51409149169922,0,0,0,13.8989791870117,0,0,0,14.5688095092773,0,0,0,-1.33805847167969,0,0,0,0,-27.6320953369141,0,0,0,15.4061508178711,0,0,0,15.0711288452148,0,0,0,-16.0701065063477,0,0,0,0,-13.2349090576172,0,0,0,15.238639831543,0,0,0,15.7410125732422,0,0,0,-26.7845611572266,0,0,0,0,-2.0181884765625,0,0,0,14.5688629150391,0,0,0,14.5688095092773,0,0,0,0,-37.3430862426758,0,0,0,14.2339477539062,0,0,0,14.9036712646484,0,0,0,8.20547485351562,0,0,0,0,-36.0035858154297,0,0,0,14.9037246704102,0,0,0,14.5688095092773,0,0,0,6.36349487304688,0,0,0,0,-32.6542739868164,0,0,0,15.4060440063477,0,0,0,15.238639831543,0,0,0,-15.2330322265625,0,0,0,0,-12.5649185180664,0,0,0,15.4060974121094,0,0,0,14.4014053344727,0,0,0,-32.811164855957,0,0,0,0,3.33858489990234,0,0,0,7.53564453125,0,0,0,9.04265594482422,0,0,0,12.8943405151367,0,0,0,0,-33.4915618896484,0,0,0,15.0711288452148,0,0,0,13.5641174316406,0,0,0,4.8563232421875,0,0,0,0,-33.8264770507812,0,0,0,15.5735015869141,0,0,0,15.0711822509766,0,0,0,-1.84032440185547,0,0,0,0,-27.1298294067383,0,0,0,15.0711822509766,0,0,0,15.4061508178711,0,0,0,-19.9205093383789,0,0,0,0,-8.04489898681641,0,0,0,14.8888854980469,0,0,0,14.7744674682617,0,0,0,-35.3985214233398,0,0,0,0,7.85910034179688,0,0,0,14.0664367675781,0,0,0,13.731575012207,0,0,0,0,-40.5247268676758,0,0,0,15.0711288452148,0,0,0,14.2338943481445,0,0,0,11.2197113037109,0,0,0,0,-33.1566467285156,0,0,0,13.7315216064453,0,0,0,11.8894882202148,0,0,0,7.53564453125,0,0,0,0,0,0,0,0,0,-40.5118103027344,0,0,0,0,12.0439758300781,0,0,0,15.0711822509766,0,0,0,13.3966598510742,0,0,0,0,-36.6732025146484,0,0,0,10.8847427368164,0,0,0,14.9036712646484,0,0,0,10.8847961425781,0,0,0,0,-36.1708297729492,0,0,0,15.0711288452148,0,0,0,14.4014053344727,0,0,0,6.53089904785156,0,0,0,0,-32.4868698120117,0,0,0,14.9037780761719,0,0,0,15.0711822509766,0,0,0,-6.02569580078125,0,0,0,0,-23.279426574707,0,0,0,13.5641174316406,0,0,0,6.02841949462891,0,0,0,8.0379638671875,0,0,0,4.18654632568359,0,0,0,0,-33.6590728759766,0,0,0,14.5688095092773,0,0,0,14.9037246704102,0,0,0,4.18654632568359,0,0,0,0,-32.48681640625,0,0,0,15.0711288452148,0,0,0,14.4014053344727,0,0,0,3.18169403076172,0,0,0,0,-37.3430862426758,0,0,0,12.0569458007812,0,0,0,14.2339477539062,0,0,0,10.8847961425781,0,0,0,0,-32.8217315673828,0,0,0,14.5688095092773,0,0,0,14.0663833618164,0,0,0,0.00144195556640625,0,0,0,0,-27.7993392944336,0,0,0,15.2385864257812,0,0,0,15.4061508178711,0,0,0,1.50711822509766,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.14508056640625,0,0,0,0,-38.5170593261719,0,0,0,0,11.8894348144531,0,0,0,14.9037246704102,0,0,0,14.5688095092773,0,0,0,-35.1541290283203,0,0,0,0,6.51894378662109,0,0,0,3.51655578613281,0,0,0,11.554573059082,0,0,0,14.4014053344727,0,0,0,-39.6743621826172,0,0,0,0,13.2160186767578,0,0,0,14.0664901733398,0,0,0,13.5641174316406,0,0,0,0,-33.1567001342773,0,0,0,14.9037780761719,0,0,0,14.9037246704102,0,0,0,-14.0608291625977,0,0,0,0,-13.2348022460938,0,0,0,14.7362670898438,0,0,0,14.0664901733398,0,0,0,-31.4713439941406,0,0,0,0,4.67813873291016,0,0,0,14.9037246704102,0,0,0,13.8989791870117,0,0,0,0,-35.8359146118164,0,0,0,15.4060440063477,0,0,0,14.4013519287109,0,0,0,5.86112213134766,0,0,0,0,-32.8217849731445,0,0,0,14.7362670898438,0,0,0,14.4014053344727,0,0,0,-12.3866806030273,0,0,0,0,-15.2438659667969,0,0,0,15.4061508178711,0,0,0,14.9037246704102,0,0,0,-40.176628112793,0,0,0,0,13.3833694458008,0,0,0,15.238639831543,0,0,0,12.7268295288086,0,0,0,0,-36.6732559204102,0,0,0,15.0712356567383,0,0,0,15.238639831543,0,0,0,1.67607116699219,0,0,0,0,-27.9669570922852,0,0,0,15.5735549926758,0,0,0,15.238639831543,0,0,0,-30.9691314697266,0,0,0,0,2.83631896972656,0,0,0,14.4013519287109,0,0,0,15.0711822509766,0,0,0,-41.683479309082,0,0,0,0,14.2203903198242,0,0,0,14.2338943481445,0,0,0,13.731575012207,0,0,0,0,-37.5105438232422,0,0,0,7.36813354492188,0,0,0,7.03321838378906,0,0,0,12.894287109375,0,0,0,10.2149124145508,0,0,0,0,-34.1613922119141,0,0,0,14.7362670898438,0,0,0,14.7362670898438,0,0,0,-3.84874725341797,0,0,0,0,-23.1119155883789,0,0,0,14.9037780761719,0,0,0,15.4060440063477,0,0,0,-39.5199279785156,0,0,0,15.2385864257812,0,0,0,14.5688629150391,0,0,0,11.0522003173828,0,0,0,0,-37.3430328369141,0,0,0,15.4060974121094,0,0,0,14.5688095092773,0,0,0,7.20072937011719,0,0,0,0,-32.9892425537109,0,0,0,15.2386932373047,0,0,0,15.4060974121094,0,0,0,-30.634162902832,0,0,0,0,4.34333038330078,0,0,0,15.4060440063477,0,0,0,13.3966598510742,0,0,0,0,-37.5106506347656,0,0,0,15.4060974121094,0,0,0,15.5735015869141,0,0,0,1.84358215332031,0,0,0,0,-27.9669036865234,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,2.51186370849609,0,0,0,0,-40.5247268676758,0,0,0,11.8894348144531,0,0,0,14.9037780761719,0,0,0,13.7315216064453,0,0,0,0,-39.5200347900391,0,0,0,14.9037246704102,0,0,0,15.2386932373047,0,0,0,9.21022033691406,0,0,0,0,-33.3072128295898,0,0,12.2694320678711,0,0,0,14.4013519287109,0,0,0,3.35027313232422,0,0,0,0,-29.2661590576172,0,0,0,14.9037780761719,0,0,0,15.4060974121094,0,0,0,-30.131950378418,0,0,0,0,4.34347534179688,0,0,0,15.4061126708984,0,0,0,12.7268295288086,0,0,0,0,-33.324104309082,0,0,0,15.4060440063477,0,0,0,15.4061508178711,0,0,0,-28.7926635742188,0,0,0,0,2.83674621582031,0,0,0,14.9036712646484,0,0,0,13.731575012207,0,0,0,0,-37.5104904174805,0,0,0,14.2338943481445,0,0,0,14.736213684082,0,0,0,8.37298583984375,0,0,0,0,-32.8217315673828,0,0,0,14.7362670898438,0,0,0,15.0711288452148,0,0,0,-22.5984954833984,0,0,0,0,-3.52482604980469,0,0,0,15.0711288452148,0,0,0,14.2339477539062,0,0,0,0,-37.3430328369141,0,0,0,14.2338943481445,0,0,0,14.9037246704102,0,0,0,8.03801727294922,0,0,0,0,-33.4915618896484,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-25.9466323852539,0,0,0,0,0.158172607421875,0,0,0,15.238639831543,0,0,0,13.7315216064453,0,0,0,0,-35.4896850585938,0,0,0,0,-4.36526489257812,0,0,0,13.5640640258789,0,0,0,15.2386932373047,0,0,0,11.0522003173828,0,0,0,0,-36.505744934082,0,0,0,15.238639831543,0,0,0,14.5687561035156,0,0,0,3.18286895751953,0,0,0,0,-29.8085632324219,0,0,0,15.4060974121094,0,0,0,15.4060974121094,0,0,0,-26.6164627075195,0,0,0,0,-0.679168701171875,0,0,0,15.2386932373047,0,0,0,14.5687561035156,0,0,0,-40.6921310424805,0,0,0,15.0711822509766,0,0,0,14.0664367675781,0,0,0,11.3871688842773,0,0,0,0,-32.9892425537109,0,0,0,15.0712356567383,0,0,0,15.4060440063477,0,0,0,-27.2859725952148,0,0,0,0,-2.35411834716797,0,0,0,15.4060974121094,0,0,0,14.2338943481445,0,0,0,-28.9600677490234,0,0,0,0,3.33901214599609,0,0,0,14.2339477539062,0,0,0,13.8990325927734,0,0,0,0,-33.8264770507812,0,0,0,14.0664367675781,0,0,0,8.0379638671875,0,0,0,8.87519836425781,0,0,0,-5.02111053466797,0,0,0,0,-23.2792129516602,0,0,0,14.5688095092773,0,0,0,14.2338943481445,0,0,0,-18.9158172607422,0,0,0,0,-10.221794128418,0,0,0,14.0664367675781,0,0,0,15.0711822509766,0,0,0,-25.1097717285156,0,0,0,0,-1.85083770751953,0,0,0,15.4060974121094,0,0,0,14.0664367675781,0,0,0,0,-38.5152893066406,0,0,0,15.0712356567383,0,0,0,15.7409591674805,0,0,0,7.53569793701172,0,0,0,0,-32.9891891479492,0,0,0,15.4060974121094,0,0,0,15.5735549926758,0,0,0,-32.6431198120117,0,0,0,0,5.84986114501953,0,0,0,14.7363204956055,0,0,0,14.2338943481445,0,0,0,0,-39.5200347900391,0,0,0,15.2386932373047,0,0,0,15.4060974121094,0,0,0,8.70784759521484,0,0,0,0,-33.6590194702148,0,0,0,14.736213684082,0,0,0,14.9037246704102,0,0,0,0.50360107421875,0,0,0,0,-29.3062438964844,0,0,0,15.4060974121094,0,0,0,15.4060440063477,0,0,0,-30.4668121337891,0,0,0,0,4.34343719482422,0,0,0,14.5688629150391,0,0,0,13.7315216064453,0,0,0,0,-34.4962539672852,0,0,0,15.2385864257812,0,0,0,14.4014053344727,0,0,0,-4.18355560302734,0,0,0,0,-23.4469375610352,0,0,0,15.5735015869141,0,0,0,14.5688629150391,0,0,0,-30.2994079589844,0,0,0,0,3.67366027832031,0,0,0,14.2338409423828,0,0,0,6.53084564208984,0,0,0,6.86581420898438,0,0,0,-37.8329162597656,0,0,0,0,11.374626159668,0,0,0,14.5688095092773,0,0,0,13.2291488647461,0,0,0,0,-37.008171081543,0,0,0,15.0711822509766,0,0,0,15.0711822509766,0,0,0,6.69841003417969,0,0,0,0,-32.9891891479492,0,0,0,13.7315216064453,0,0,0,14.5688095092773,0,0,0,-4.01615142822266,0,0,0,0,-22.4421920776367,0,0,0,15.238639831543,0,0,0,15.0712356567383,0,0,0,-41.3620452880859,0,0,0,15.2386703491211,0,0,0,15.4060974121094,0,0,0,11.7220306396484,0,0,0,0,-37.1757888793945,0,0,0,15.2386932373047,0,0,0,14.4013519287109,0,0,0,7.39154815673828,0,0,0,0,-33.2330322265625,0,0,0,14.9037780761719,0,0,0,15.2385864257812,0,0,0,-23.6029205322266,0,0,0,0,-2.35299682617188,0,0,0,15.0712356567383,0,0,0,13.8990325927734,0,0,0,0,-32.9891891479492,0,0,0,6.19587707519531,0,0,0,9.88005065917969,0,0,0,9.71253967285156,0,0,0,7.20072937011719,0,0,0,0,-37.3431396484375,0,0,0,10.8847427368164,0,0,0,13.3966064453125,0,0,0,13.2292022705078,0,0,0,0,-40.0223541259766,0,0,0,14.0663833618164,0,0,0,15.4060974121094,0,0,0,10.3824768066406,0,0,0,0,-33.1566467285156,0,0,0,15.0711288452148,0,0,0,15.2386932373047,0,0,0,-27.6207275390625,0,0,0,0,1.83226776123047,0,0,0,14.4012985229492,0,0,0,14.4014053344727,0,0,0,0,-36.8407135009766,0,0,0,14.7363204956055,0,0,0,14.9036712646484,0,0,0,7.0333251953125,0,0,0,0,-32.8217849731445,0,0,0,13.8989791870117,0,0,0,15.0712356567383,0,0,0,-19.2501983642578,0,0,0,0,-6.37085723876953,0,0,0,15.0712356567383,0,0,0,14.5688095092773,0,0,0,0,-38.1803207397461,0,0,0,15.4060974121094,0,0,0,15.238639831543,0,0,0,7.36818695068359,0,0,0,0,-32.6543273925781,0,0,0,14.9037246704102,0,0,0,13.8990325927734,0,0,0,-16.4043273925781,0,0,0,0,-9.21672821044922,0,0,0,14.9037246704102,0,0,0,14.7363204956055,0,0,0,0,-39.0176086425781,0,0,0,14.9037246704102,0,0,0,15.4060974121094,0,0,0,8.70779418945312,0,0,0,0,-32.9891357421875,0,0,0,14.9037246704102,0,0,0,14.736213684082,0,0,0,-15.9022750854492,0,0,0,0,-11.3932495117188,0,0,0,3.01418304443359,0,0,0,12.894287109375,0,0,0,14.5688629150391,0,0,0,0,-33.1566467285156,0,0,0,13.5640640258789,0,0,0,14.2338409423828,0,0,0,0.5040283203125,0,0,0,0,-27.2971801757812,0,0,0,15.0711288452148,0,0,0,15.0712356567383,0,0,0,-34.651969909668,0,0,0,0,8.02622222900391,0,0,0,14.5687561035156,0,0,0,14.2338943481445,0,0,0,-40.5246734619141,0,0,0,14.5687561035156,0,0,0,15.238639831543,0,0,0,10.7173385620117,0,0,0,0,-39.5201416015625,0,0,0,15.4060440063477,0,0,0,15.0712356567383,0,0,0,8.87530517578125,0,0,0,0,-33.6590194702148,0,0,0,14.5688095092773,0,0,0,15.0711288452148,0,0,0,-13.3909454345703,0,0,0,0,-12.7324295043945,0,0,0,15.5736083984375,0,0,0,14.5688629150391,0,0,0,0,-32.6543273925781,0,0,0,15.238639831543,0,0,0,14.7363204956055,0,0,0,2.84677886962891,0,0,0,0,-40.189811706543,0,0,0,11.8894882202148,0,0,0,15.5735015869141,0,0,0,12.5594253540039,0,0,0,0,-34.663818359375,0,0,0,14.0664367675781,0,0,0,14.2339477539062,0,0,0,6.36344146728516,0,0,0,0,-33.826530456543,0,0,0,14.9037780761719,0,0,0,15.4060974121094,0,0,0,-8.20162963867188,0,0,0,0,-19.0939483642578,0,0,0,15.5735015869141,0,0,0,15.4061508178711,0,0,0,0,-35.8359680175781,0,0,0,14.4014053344727,0,0,0,15.5735015869141,0,0,0,-1.16990661621094,0,0,0,0,-24.7860107421875,0,0,0,15.0712356567383,0,0,0,15.4060440063477,0,0,0,-41.013542175293,0,0,0,0,14.0529327392578,0,0,0,15.0711822509766,0,0,0,13.2291488647461,0,0,0,0,-37.0081176757812,0,0,0,14.9037246704102,0,0,0,14.736213684082,0,0,0,7.20078277587891,0,0,0,0,-32.8217315673828,0,0,0,15.238639831543,0,0,0,15.238639831543,0,0,0,-32.9778213500977,0,0,0,0,7.35681915283203,0,0,0,15.238639831543,0,0,0,12.8942337036133,0,0,0,0,-37.1755752563477,0,0,0,14.736213684082,0,0,0,15.4060974121094,0,0,0,6.86586761474609,0,0,0,0,-32.6543273925781,0,0,0,15.238639831543,0,0,0,15.2386932373047,0,0,0,-33.6474914550781,0,0,0,0,8.0264892578125,0,0,0,14.0664367675781,0,0,0,13.8989791870117,0,0,0,0,-39.8421936035156,0,0,0,0,1.15944671630859,0,0,0,13.3966598510742,0,0,0,14.9037246704102,0,0,0,10.3823699951172,0,0,0,0,-35.5009994506836,0,0,0,14.0664367675781,0,0,0],"filename":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"<expr>",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"src/advect.R",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"<expr>","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/diffuse.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null,"src/advect.R","src/advect.R","<expr>",null]},"interval":10,"files":[{"filename":"<expr>","content":"profvis({\n  t <- 0\n  dots <- dots.start\n  while(t <= end.time){\n    dots <- advect.serial(dots, x, y, Ux, Uy, 0.5*delta.t)\n    dots <- diffuse(dots, D, delta.t)\n    dots <- advect.serial(dots, x, y, Ux, Uy, 0.5*delta.t)\n    t <- t + delta.t\n    print(paste(\"t =\", t))\n  }\n})\n","normpath":"<expr>"},{"filename":"src/advect.R","content":"## Advection component\nlibrary(foreach)\nadvect.serial<-function(dots,x,y,Ux,Uy,delta.t){\n  idx<-find.spot.serial(dots[,1],x)\n  idy<-find.spot.serial(dots[,2],y)\n  dots[,1]<-dots[,1]+Ux[idx]*delta.t\n  dots[,2]<-dots[,2]+Uy[idy]*delta.t\n  return(dots)\n}\n\nadvect.parallel<-function(dots,x,y,Ux,Uy,delta.t){\n  idx<-find.spot.parallel(dots[,1],x)\n  idy<-find.spot.parallel(dots[,2],y)\n  dots[,1]<-dots[,1]+Ux[idx]*delta.t\n  dots[,2]<-dots[,2]+Uy[idy]*delta.t\n  return(dots)\n}\n\nfind.spot.serial<-function(points,field) {\n  idx<-rep(NA,length=length(points))\n  for (j in 1:length(points)) idx[j] <- which.min((field - points[j])^2)\n  return(idx)\n}\n\nfind.spot.parallel<-function(points,field) {\n  idx <- foreach(j = 1:length(points), .combine='c') %dopar% {which.min((field - points[j])^2)}\n  return(idx)\n}","normpath":"/Users/tobychappell/Documents/CS_Courses/CS_510/Homework/Parallel/AdvDiff/src/advect.R"},{"filename":"src/diffuse.R","content":"## Diffusion function\ndiffuse <- function(dots, D, delta.t){\n  dist <- sqrt(4*D*delta.t)\n  randos1 <- rnorm(n = nrow(dots), mean = dist, sd = 0.25*dist)\n  randos2 <- runif(n = nrow(dots), min = 0, max = 2*pi)\n  dots[, 1] <- dots[, 1] + randos1*cos(randos2)\n  dots[, 2] <- dots[, 2] + randos1*sin(randos2)\n  return(dots)\n}","normpath":"/Users/tobychappell/Documents/CS_Courses/CS_510/Homework/Parallel/AdvDiff/src/diffuse.R"}],"prof_output":"/Users/tobychappell/Documents/CS_Courses/CS_510/Homework/Parallel/AdvDiff/.Rproj.user/D39955CE/profiles-cache/file85bf3d563e0f.Rprof","highlight":{"output":["^output\\$"],"gc":["^<GC>$"],"stacktrace":["^\\.\\.stacktraceo(n|ff)\\.\\.$"]},"split":"h"}},"evals":[],"jsHooks":[]}</script>
<script type="application/htmlwidget-sizing" data-for="htmlwidget-09ab4a04fd23199e2b12">{"viewer":{"width":450,"height":350,"padding":0,"fill":true},"browser":{"width":960,"height":500,"padding":0,"fill":true}}</script>
</body>
</html>
